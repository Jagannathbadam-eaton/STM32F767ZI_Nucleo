/* Standard includes. */
#include <stdint.h>

/* FreeRTOS includes. */
#include "cbmc.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/FreeRTOS.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/FreeRTOS_DNS.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/FreeRTOS_IP.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/FreeRTOS_Sockets.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/IPTraceMacroDefaults.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/list.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/queue.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/semphr.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/task.h"
#include "../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h"
#include "../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_UDP_IP.h"
#include "../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/test/cbmc/include/cbmc.h"
#include "../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/test/unit-test/ConfigFiles/NetworkBufferManagement.h"
#include "../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/test/unit-test/ConfigFiles/NetworkInterface.h"

/****************************************************************
* Signature of function under test
****************************************************************/

size_t prvReadNameField( const uint8_t * pucByte,
                         size_t uxRemainingBytes,
                         char * pcName,
                         size_t uxDestLen );

/****************************************************************
* The function under test is not defined in all configurations
****************************************************************/

#if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )

/* prvReadNameField is defined in this configuration */

#else

/* prvReadNameField is not defined in this configuration, stub it. */

    size_t prvReadNameField( const uint8_t * pucByte,
                             size_t uxRemainingBytes,
                             char * pcName,
                             size_t uxDestLen )
    {
        return 0;
    }

#endif /* if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 ) */


/****************************************************************
* Proof of prvReadNameField function contract
****************************************************************/

void harness()
{
    __CPROVER_assert( NETWORK_BUFFER_SIZE < CBMC_MAX_OBJECT_SIZE,
                      "NETWORK_BUFFER_SIZE < CBMC_MAX_OBJECT_SIZE" );
    __CPROVER_assert( NAME_SIZE < CBMC_MAX_OBJECT_SIZE,
                      "NAME_SIZE < CBMC_MAX_OBJECT_SIZE" );

    __CPROVER_assert( NAME_SIZE >= 4,
                      "NAME_SIZE >= 4 required for good coverage." );


    size_t uxRemainingBytes;
    size_t uxDestLen;

    uint8_t * pucByte = malloc( uxRemainingBytes );
    char * pcName = malloc( uxDestLen );

    /* Preconditions */

    __CPROVER_assume( uxRemainingBytes < CBMC_MAX_OBJECT_SIZE );
    __CPROVER_assume( uxDestLen < CBMC_MAX_OBJECT_SIZE );

    __CPROVER_assume( uxRemainingBytes <= NETWORK_BUFFER_SIZE );
    __CPROVER_assume( uxDestLen <= NAME_SIZE );

    __CPROVER_assume( pucByte != NULL );
    __CPROVER_assume( pcName != NULL );

    /* Avoid overflow on uxSourceLen - 1U with uxSourceLen == uxRemainingBytes */
    /*__CPROVER_assume(uxRemainingBytes > 0); */

    /* Avoid overflow on uxDestLen - 1U */
    __CPROVER_assume( uxDestLen > 0 );

    size_t index = prvReadNameField( pucByte,
                                     uxRemainingBytes,
                                     pcName,
                                     uxDestLen );

    /* Postconditions */

    __CPROVER_assert( index <= uxDestLen + 1 && index <= uxRemainingBytes,
                      "prvReadNamefield: index <= uxDestLen+1" );
}
