
STM32F767ZI_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b18  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005d18  08005d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e70  08005e70  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005e70  08005e70  00015e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e78  08005e78  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e78  08005e78  00015e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e7c  08005e7c  00015e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a510  20000074  08005ef4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a584  08005ef4  0002a584  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018131  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ae  00000000  00000000  000381d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  0003b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003cb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005efd  00000000  00000000  0003dc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001695f  00000000  00000000  00043b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d9f1  00000000  00000000  0005a46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167e5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005060  00000000  00000000  00167eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08005d00 	.word	0x08005d00

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08005d00 	.word	0x08005d00

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000090 	.word	0x20000090
 8000614:	200000e4 	.word	0x200000e4

08000618 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800061c:	f3bf 8f4f 	dsb	sy
}
 8000620:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000622:	f3bf 8f6f 	isb	sy
}
 8000626:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <SCB_EnableICache+0x48>)
 800062a:	2200      	movs	r2, #0
 800062c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000630:	f3bf 8f4f 	dsb	sy
}
 8000634:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000636:	f3bf 8f6f 	isb	sy
}
 800063a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <SCB_EnableICache+0x48>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <SCB_EnableICache+0x48>)
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000648:	f3bf 8f4f 	dsb	sy
}
 800064c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800064e:	f3bf 8f6f 	isb	sy
}
 8000652:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800066a:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SCB_EnableDCache+0x84>)
 800066c:	2200      	movs	r2, #0
 800066e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000672:	f3bf 8f4f 	dsb	sy
}
 8000676:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <SCB_EnableDCache+0x84>)
 800067a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800067e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	0b5b      	lsrs	r3, r3, #13
 8000684:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000688:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	08db      	lsrs	r3, r3, #3
 800068e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000692:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	015a      	lsls	r2, r3, #5
 8000698:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800069c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006a2:	4911      	ldr	r1, [pc, #68]	; (80006e8 <SCB_EnableDCache+0x84>)
 80006a4:	4313      	orrs	r3, r2
 80006a6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1e5a      	subs	r2, r3, #1
 80006ae:	60ba      	str	r2, [r7, #8]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1ef      	bne.n	8000694 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	1e5a      	subs	r2, r3, #1
 80006b8:	60fa      	str	r2, [r7, #12]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d1e5      	bne.n	800068a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80006be:	f3bf 8f4f 	dsb	sy
}
 80006c2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <SCB_EnableDCache+0x84>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <SCB_EnableDCache+0x84>)
 80006ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d0:	f3bf 8f4f 	dsb	sy
}
 80006d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d6:	f3bf 8f6f 	isb	sy
}
 80006da:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
 /* Perform any hardware initialization that does not require the RTOS to be * running.  */

	printf("Welcome to Demo");
 80006f0:	480a      	ldr	r0, [pc, #40]	; (800071c <main+0x30>)
 80006f2:	f004 fdef 	bl	80052d4 <iprintf>

	LogInfo( ( "PRV Misc Initialization started"));
 80006f6:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <main+0x34>)
 80006f8:	2393      	movs	r3, #147	; 0x93
 80006fa:	490a      	ldr	r1, [pc, #40]	; (8000724 <main+0x38>)
 80006fc:	480a      	ldr	r0, [pc, #40]	; (8000728 <main+0x3c>)
 80006fe:	f004 fde9 	bl	80052d4 <iprintf>
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <main+0x40>)
 8000704:	f004 fde6 	bl	80052d4 <iprintf>
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <main+0x44>)
 800070a:	f004 fe69 	bl	80053e0 <puts>

	prvMiscInitialization();
 800070e:	f000 f811 	bl	8000734 <prvMiscInitialization>

    /* Start the scheduler.  Initialization that requires the OS to be running,
     * including the WiFi initialization, is performed in the RTOS daemon task
     * startup hook. */
    vTaskStartScheduler();
 8000712:	f003 faa3 	bl	8003c5c <vTaskStartScheduler>

    return 0;
 8000716:	2300      	movs	r3, #0
  }
 8000718:	4618      	mov	r0, r3
 800071a:	bd80      	pop	{r7, pc}
 800071c:	08005d18 	.word	0x08005d18
 8000720:	08005d34 	.word	0x08005d34
 8000724:	08005d3c 	.word	0x08005d3c
 8000728:	08005d4c 	.word	0x08005d4c
 800072c:	08005d64 	.word	0x08005d64
 8000730:	08005d84 	.word	0x08005d84

08000734 <prvMiscInitialization>:

/**
 * @brief Initializes the board.
 */
static void prvMiscInitialization( void )
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* MPU Configuration--------------------------------------------------------*/
    MPU_Config();
 8000738:	f000 f840 	bl	80007bc <MPU_Config>

    /* Enable I-Cache---------------------------------------------------------*/
    SCB_EnableICache();
 800073c:	f7ff ff6c 	bl	8000618 <SCB_EnableICache>

    /* Enable D-Cache---------------------------------------------------------*/
    SCB_EnableDCache();
 8000740:	f7ff ff90 	bl	8000664 <SCB_EnableDCache>

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Add core if want to wait for CPU2 boots */

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000744:	f000 fb63 	bl	8000e0e <HAL_Init>

    /* Configure the system clock. */
    SystemClock_Config();
 8000748:	f000 f880 	bl	800084c <SystemClock_Config>

    MX_GPIO_Init();
 800074c:	f000 f920 	bl	8000990 <MX_GPIO_Init>
    MX_RNG_Init();
 8000750:	f000 f82c 	bl	80007ac <MX_RNG_Init>
    MX_USART3_UART_Init();
 8000754:	f000 f8ec 	bl	8000930 <MX_USART3_UART_Init>

    /* Heap_5 is being used because the RAM is not contiguous in memory, so the
     * heap must be initialized. */
    prvInitializeHeap();
 8000758:	f000 f818 	bl	800078c <prvInitializeHeap>
   // printf("PRV Misc Initialization ended");
    LogInfo( ( "PRV Misc Initialization ended"));
 800075c:	4a06      	ldr	r2, [pc, #24]	; (8000778 <prvMiscInitialization+0x44>)
 800075e:	23f6      	movs	r3, #246	; 0xf6
 8000760:	4906      	ldr	r1, [pc, #24]	; (800077c <prvMiscInitialization+0x48>)
 8000762:	4807      	ldr	r0, [pc, #28]	; (8000780 <prvMiscInitialization+0x4c>)
 8000764:	f004 fdb6 	bl	80052d4 <iprintf>
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <prvMiscInitialization+0x50>)
 800076a:	f004 fdb3 	bl	80052d4 <iprintf>
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <prvMiscInitialization+0x54>)
 8000770:	f004 fe36 	bl	80053e0 <puts>

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08005d34 	.word	0x08005d34
 800077c:	08005d3c 	.word	0x08005d3c
 8000780:	08005d4c 	.word	0x08005d4c
 8000784:	08005d88 	.word	0x08005d88
 8000788:	08005d84 	.word	0x08005d84

0800078c <prvInitializeHeap>:

static void prvInitializeHeap( void )
{
 800078c:	b490      	push	{r4, r7}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
    static uint8_t ucHeap1[ configTOTAL_HEAP_SIZE + 25 * 1024 ];

    HeapRegion_t xHeapRegions[] =
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <prvInitializeHeap+0x1c>)
 8000794:	463c      	mov	r4, r7
 8000796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        { ( unsigned char * ) ucHeap1, sizeof( ucHeap1 ) },
        { NULL,                        0                 }
    };

  // vPortDefineHeapRegions( xHeapRegions );
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc90      	pop	{r4, r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	08005da8 	.word	0x08005da8

080007ac <MX_RNG_Init>:
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init( void )
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
    }*/

    /* USER CODE BEGIN RNG_Init 2 */

    /* USER CODE END RNG_Init 2 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <MPU_Config>:

/*-----------------------------------------------------------*/

static void MPU_Config( void )
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 80007c2:	463b      	mov	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]

    /* Disables the MPU */
    HAL_MPU_Disable();
 80007ce:	f000 fc61 	bl	8001094 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007d2:	2301      	movs	r3, #1
 80007d4:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x30040000;
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MPU_Config+0x8c>)
 80007dc:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80007de:	230e      	movs	r3, #14
 80007e0:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80007ea:	2303      	movs	r3, #3
 80007ec:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ee:	2301      	movs	r3, #1
 80007f0:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion( &MPU_InitStruct );
 80007fe:	463b      	mov	r3, r7
 8000800:	4618      	mov	r0, r3
 8000802:	f000 fc7f 	bl	8001104 <HAL_MPU_ConfigRegion>

    /** Initializes and configures the Region and the memory to be protected
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000806:	2301      	movs	r3, #1
 8000808:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800080a:	2301      	movs	r3, #1
 800080c:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x30040000;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MPU_Config+0x8c>)
 8000810:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000812:	2307      	movs	r3, #7
 8000814:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8000816:	2300      	movs	r3, #0
 8000818:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800081a:	2300      	movs	r3, #0
 800081c:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800081e:	2303      	movs	r3, #3
 8000820:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000822:	2301      	movs	r3, #1
 8000824:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion( &MPU_InitStruct );
 8000832:	463b      	mov	r3, r7
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fc65 	bl	8001104 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable( MPU_PRIVILEGED_DEFAULT );
 800083a:	2004      	movs	r0, #4
 800083c:	f000 fc42 	bl	80010c4 <HAL_MPU_Enable>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	30040000 	.word	0x30040000

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b094      	sub	sp, #80	; 0x50
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2234      	movs	r2, #52	; 0x34
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f004 fa44 	bl	8004ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000870:	f000 ff36 	bl	80016e0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000874:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <SystemClock_Config+0xdc>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	4a2b      	ldr	r2, [pc, #172]	; (8000928 <SystemClock_Config+0xdc>)
 800087a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087e:	6413      	str	r3, [r2, #64]	; 0x40
 8000880:	4b29      	ldr	r3, [pc, #164]	; (8000928 <SystemClock_Config+0xdc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800088c:	4b27      	ldr	r3, [pc, #156]	; (800092c <SystemClock_Config+0xe0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000894:	4a25      	ldr	r2, [pc, #148]	; (800092c <SystemClock_Config+0xe0>)
 8000896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	4b23      	ldr	r3, [pc, #140]	; (800092c <SystemClock_Config+0xe0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b2:	2302      	movs	r3, #2
 80008b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008bc:	2304      	movs	r3, #4
 80008be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80008c0:	2360      	movs	r3, #96	; 0x60
 80008c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 ff63 	bl	80017a0 <HAL_RCC_OscConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008e0:	f000 f8f8 	bl	8000ad4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008e4:	f000 ff0c 	bl	8001700 <HAL_PWREx_EnableOverDrive>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ee:	f000 f8f1 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f2:	230f      	movs	r3, #15
 80008f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f6:	2302      	movs	r3, #2
 80008f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	2103      	movs	r1, #3
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f9f4 	bl	8001cfc <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800091a:	f000 f8db 	bl	8000ad4 <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3750      	adds	r7, #80	; 0x50
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <MX_USART3_UART_Init+0x5c>)
 8000938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_USART3_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_USART3_UART_Init+0x58>)
 8000974:	f002 f810 	bl	8002998 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f8a9 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200002e4 	.word	0x200002e4
 800098c:	40004800 	.word	0x40004800

08000990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	4b47      	ldr	r3, [pc, #284]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a46      	ldr	r2, [pc, #280]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b44      	ldr	r3, [pc, #272]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	61bb      	str	r3, [r7, #24]
 80009bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a40      	ldr	r2, [pc, #256]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a3a      	ldr	r2, [pc, #232]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ee:	4b35      	ldr	r3, [pc, #212]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a34      	ldr	r2, [pc, #208]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <MX_GPIO_Init+0x134>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a06:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <MX_GPIO_Init+0x134>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <MX_GPIO_Init+0x134>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <MX_GPIO_Init+0x134>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1e:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <MX_GPIO_Init+0x134>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <MX_GPIO_Init+0x134>)
 8000a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <MX_GPIO_Init+0x134>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a3c:	4822      	ldr	r0, [pc, #136]	; (8000ac8 <MX_GPIO_Init+0x138>)
 8000a3e:	f000 fe35 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2140      	movs	r1, #64	; 0x40
 8000a46:	4821      	ldr	r0, [pc, #132]	; (8000acc <MX_GPIO_Init+0x13c>)
 8000a48:	f000 fe30 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	481b      	ldr	r0, [pc, #108]	; (8000ad0 <MX_GPIO_Init+0x140>)
 8000a64:	f000 fc76 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a68:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_GPIO_Init+0x138>)
 8000a82:	f000 fc67 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a86:	2340      	movs	r3, #64	; 0x40
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <MX_GPIO_Init+0x13c>)
 8000a9e:	f000 fc59 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_GPIO_Init+0x13c>)
 8000ab6:	f000 fc4d 	bl	8001354 <HAL_GPIO_Init>

}
 8000aba:	bf00      	nop
 8000abc:	3730      	adds	r7, #48	; 0x30
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	40021800 	.word	0x40021800
 8000ad0:	40020800 	.word	0x40020800

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	210f      	movs	r1, #15
 8000b1a:	f06f 0001 	mvn.w	r0, #1
 8000b1e:	f000 fa90 	bl	8001042 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0ae      	sub	sp, #184	; 0xb8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2290      	movs	r2, #144	; 0x90
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f004 f8c9 	bl	8004ce8 <memset>
  if(huart->Instance==USART3)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <HAL_UART_MspInit+0xb4>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d13c      	bne.n	8000bda <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 faea 	bl	8002148 <HAL_RCCEx_PeriphCLKConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b7a:	f7ff ffab 	bl	8000ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <HAL_UART_MspInit+0xb8>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <HAL_UART_MspInit+0xb8>)
 8000b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_UART_MspInit+0xb8>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_UART_MspInit+0xb8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <HAL_UART_MspInit+0xb8>)
 8000b9c:	f043 0308 	orr.w	r3, r3, #8
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_UART_MspInit+0xb8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0308 	and.w	r3, r3, #8
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <HAL_UART_MspInit+0xbc>)
 8000bd6:	f000 fbbd 	bl	8001354 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bda:	bf00      	nop
 8000bdc:	37b8      	adds	r7, #184	; 0xb8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40004800 	.word	0x40004800
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020c00 	.word	0x40020c00

08000bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x4>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 f932 	bl	8000e88 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c24:	f003 fc2c 	bl	8004480 <xTaskGetSchedulerState>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d001      	beq.n	8000c32 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c2e:	f003 fedb 	bl	80049e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <ETH_IRQHandler+0x10>)
 8000c3e:	f000 faa5 	bl	800118c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000a37c 	.word	0x2000a37c

08000c4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	e00a      	b.n	8000c74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c5e:	f3af 8000 	nop.w
 8000c62:	4601      	mov	r1, r0
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	b2ca      	uxtb	r2, r1
 8000c6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dbf0      	blt.n	8000c5e <_read+0x12>
	}

return len;
 8000c7c:	687b      	ldr	r3, [r7, #4]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	e009      	b.n	8000cac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	60ba      	str	r2, [r7, #8]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf1      	blt.n	8000c98 <_write+0x12>
	}
	return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_close>:

int _close(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_isatty>:

int _isatty(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
	return 0;
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d205      	bcs.n	8000d64 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <_sbrk+0x6c>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	371c      	adds	r7, #28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	20080000 	.word	0x20080000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	2000a36c 	.word	0x2000a36c
 8000d90:	2000a588 	.word	0x2000a588
 8000d94:	2000a574 	.word	0x2000a574

08000d98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc2:	490e      	ldr	r1, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd8:	4c0b      	ldr	r4, [pc, #44]	; (8000e08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de6:	f7ff ffd7 	bl	8000d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dea:	f003 ff4b 	bl	8004c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fc7d 	bl	80006ec <main>
  bx  lr    
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e00:	08005e80 	.word	0x08005e80
  ldr r2, =_sbss
 8000e04:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e08:	2000a584 	.word	0x2000a584

08000e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC_IRQHandler>

08000e0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e12:	2003      	movs	r0, #3
 8000e14:	f000 f90a 	bl	800102c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e18:	200f      	movs	r0, #15
 8000e1a:	f000 f805 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1e:	f7ff fe5f 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x54>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x58>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f917 	bl	800107a <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00e      	b.n	8000e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d80a      	bhi.n	8000e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f000 f8ed 	bl	8001042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_InitTick+0x5c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x24>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_IncTick+0x24>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000008 	.word	0x20000008
 8000eac:	2000a370 	.word	0x2000a370

08000eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_GetTick+0x14>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	2000a370 	.word	0x2000a370

08000ec8 <__NVIC_SetPriorityGrouping>:
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <__NVIC_SetPriorityGrouping+0x40>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	05fa0000 	.word	0x05fa0000

08000f10 <__NVIC_GetPriorityGrouping>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_SetPriority>:
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	; (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	; (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff8:	d301      	bcc.n	8000ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00f      	b.n	800101e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <SysTick_Config+0x40>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001006:	210f      	movs	r1, #15
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f7ff ff8e 	bl	8000f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <SysTick_Config+0x40>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <SysTick_Config+0x40>)
 8001018:	2207      	movs	r2, #7
 800101a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	e000e010 	.word	0xe000e010

0800102c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff47 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001054:	f7ff ff5c 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff ff8e 	bl	8000f80 <NVIC_EncodePriority>
 8001064:	4602      	mov	r2, r0
 8001066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff5d 	bl	8000f2c <__NVIC_SetPriority>
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffb0 	bl	8000fe8 <SysTick_Config>
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001098:	f3bf 8f5f 	dmb	sy
}
 800109c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <HAL_MPU_Disable+0x28>)
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_MPU_Disable+0x28>)
 80010a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_MPU_Disable+0x2c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	605a      	str	r2, [r3, #4]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	e000ed90 	.word	0xe000ed90

080010c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <HAL_MPU_Enable+0x38>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_MPU_Enable+0x3c>)
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	4a09      	ldr	r2, [pc, #36]	; (8001100 <HAL_MPU_Enable+0x3c>)
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80010e2:	f3bf 8f4f 	dsb	sy
}
 80010e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e8:	f3bf 8f6f 	isb	sy
}
 80010ec:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed90 	.word	0xe000ed90
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	785a      	ldrb	r2, [r3, #1]
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_MPU_ConfigRegion+0x84>)
 8001112:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d029      	beq.n	8001170 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800111c:	4a1a      	ldr	r2, [pc, #104]	; (8001188 <HAL_MPU_ConfigRegion+0x84>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7b1b      	ldrb	r3, [r3, #12]
 8001128:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7adb      	ldrb	r3, [r3, #11]
 800112e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001130:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7a9b      	ldrb	r3, [r3, #10]
 8001136:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001138:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7b5b      	ldrb	r3, [r3, #13]
 800113e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001140:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7b9b      	ldrb	r3, [r3, #14]
 8001146:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001148:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7bdb      	ldrb	r3, [r3, #15]
 800114e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001150:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	7a5b      	ldrb	r3, [r3, #9]
 8001156:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001158:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7a1b      	ldrb	r3, [r3, #8]
 800115e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001160:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800116a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800116c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800116e:	e005      	b.n	800117c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_MPU_ConfigRegion+0x84>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <HAL_MPU_ConfigRegion+0x84>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed90 	.word	0xe000ed90

0800118c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a2:	2b40      	cmp	r3, #64	; 0x40
 80011a4:	d112      	bne.n	80011cc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b4:	2b40      	cmp	r3, #64	; 0x40
 80011b6:	d109      	bne.n	80011cc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b50      	ldr	r3, [pc, #320]	; (8001304 <HAL_ETH_IRQHandler+0x178>)
 80011c4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f002 f84e 	bl	8003268 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d113      	bne.n	8001206 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e6:	69db      	ldr	r3, [r3, #28]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d10a      	bne.n	8001206 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011f8:	461a      	mov	r2, r3
 80011fa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80011fe:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f002 f841 	bl	8003288 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001218:	d14c      	bne.n	80012b4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800122c:	d142      	bne.n	80012b4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001234:	f043 0208 	orr.w	r2, r3, #8
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800124c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001250:	d11a      	bne.n	8001288 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800125a:	695a      	ldr	r2, [r3, #20]
 800125c:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <HAL_ETH_IRQHandler+0x17c>)
 800125e:	4013      	ands	r3, r2
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6812      	ldr	r2, [r2, #0]
 8001274:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001278:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800127c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	22e0      	movs	r2, #224	; 0xe0
 8001282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001286:	e012      	b.n	80012ae <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001290:	695a      	ldr	r2, [r3, #20]
 8001292:	f248 6380 	movw	r3, #34432	; 0x8680
 8001296:	4013      	ands	r3, r2
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012a6:	461a      	mov	r2, r3
 80012a8:	f248 6380 	movw	r3, #34432	; 0x8680
 80012ac:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f001 fffa 	bl	80032a8 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d10e      	bne.n	80012e0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f81c 	bl	8001310 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_ETH_IRQHandler+0x180>)
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <HAL_ETH_IRQHandler+0x180>)
 80012ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012f2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f815 	bl	8001324 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	00010040 	.word	0x00010040
 8001308:	007e2000 	.word	0x007e2000
 800130c:	40013c00 	.word	0x40013c00

08001310 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001354:	b480      	push	{r7}
 8001356:	b089      	sub	sp, #36	; 0x24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	e175      	b.n	8001660 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001374:	2201      	movs	r2, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	429a      	cmp	r2, r3
 800138e:	f040 8164 	bne.w	800165a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b01      	cmp	r3, #1
 800139c:	d005      	beq.n	80013aa <HAL_GPIO_Init+0x56>
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d130      	bne.n	800140c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e0:	2201      	movs	r2, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	f003 0201 	and.w	r2, r3, #1
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b03      	cmp	r3, #3
 8001416:	d017      	beq.n	8001448 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d123      	bne.n	800149c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	220f      	movs	r2, #15
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	08da      	lsrs	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3208      	adds	r2, #8
 8001496:	69b9      	ldr	r1, [r7, #24]
 8001498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 80be 	beq.w	800165a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	4b66      	ldr	r3, [pc, #408]	; (8001678 <HAL_GPIO_Init+0x324>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	4a65      	ldr	r2, [pc, #404]	; (8001678 <HAL_GPIO_Init+0x324>)
 80014e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ea:	4b63      	ldr	r3, [pc, #396]	; (8001678 <HAL_GPIO_Init+0x324>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80014f6:	4a61      	ldr	r2, [pc, #388]	; (800167c <HAL_GPIO_Init+0x328>)
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	3302      	adds	r3, #2
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a58      	ldr	r2, [pc, #352]	; (8001680 <HAL_GPIO_Init+0x32c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d037      	beq.n	8001592 <HAL_GPIO_Init+0x23e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a57      	ldr	r2, [pc, #348]	; (8001684 <HAL_GPIO_Init+0x330>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d031      	beq.n	800158e <HAL_GPIO_Init+0x23a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a56      	ldr	r2, [pc, #344]	; (8001688 <HAL_GPIO_Init+0x334>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d02b      	beq.n	800158a <HAL_GPIO_Init+0x236>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a55      	ldr	r2, [pc, #340]	; (800168c <HAL_GPIO_Init+0x338>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d025      	beq.n	8001586 <HAL_GPIO_Init+0x232>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a54      	ldr	r2, [pc, #336]	; (8001690 <HAL_GPIO_Init+0x33c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d01f      	beq.n	8001582 <HAL_GPIO_Init+0x22e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a53      	ldr	r2, [pc, #332]	; (8001694 <HAL_GPIO_Init+0x340>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d019      	beq.n	800157e <HAL_GPIO_Init+0x22a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a52      	ldr	r2, [pc, #328]	; (8001698 <HAL_GPIO_Init+0x344>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_GPIO_Init+0x226>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a51      	ldr	r2, [pc, #324]	; (800169c <HAL_GPIO_Init+0x348>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00d      	beq.n	8001576 <HAL_GPIO_Init+0x222>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a50      	ldr	r2, [pc, #320]	; (80016a0 <HAL_GPIO_Init+0x34c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_Init+0x21e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4f      	ldr	r2, [pc, #316]	; (80016a4 <HAL_GPIO_Init+0x350>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_GPIO_Init+0x21a>
 800156a:	2309      	movs	r3, #9
 800156c:	e012      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800156e:	230a      	movs	r3, #10
 8001570:	e010      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001572:	2308      	movs	r3, #8
 8001574:	e00e      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001576:	2307      	movs	r3, #7
 8001578:	e00c      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800157a:	2306      	movs	r3, #6
 800157c:	e00a      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800157e:	2305      	movs	r3, #5
 8001580:	e008      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001582:	2304      	movs	r3, #4
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001586:	2303      	movs	r3, #3
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x240>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x240>
 8001592:	2300      	movs	r3, #0
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	f002 0203 	and.w	r2, r2, #3
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015a4:	4935      	ldr	r1, [pc, #212]	; (800167c <HAL_GPIO_Init+0x328>)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b2:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <HAL_GPIO_Init+0x354>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015d6:	4a34      	ldr	r2, [pc, #208]	; (80016a8 <HAL_GPIO_Init+0x354>)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015dc:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <HAL_GPIO_Init+0x354>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001600:	4a29      	ldr	r2, [pc, #164]	; (80016a8 <HAL_GPIO_Init+0x354>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <HAL_GPIO_Init+0x354>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162a:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <HAL_GPIO_Init+0x354>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_GPIO_Init+0x354>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <HAL_GPIO_Init+0x354>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3301      	adds	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	2b0f      	cmp	r3, #15
 8001664:	f67f ae86 	bls.w	8001374 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40013800 	.word	0x40013800
 8001680:	40020000 	.word	0x40020000
 8001684:	40020400 	.word	0x40020400
 8001688:	40020800 	.word	0x40020800
 800168c:	40020c00 	.word	0x40020c00
 8001690:	40021000 	.word	0x40021000
 8001694:	40021400 	.word	0x40021400
 8001698:	40021800 	.word	0x40021800
 800169c:	40021c00 	.word	0x40021c00
 80016a0:	40022000 	.word	0x40022000
 80016a4:	40022400 	.word	0x40022400
 80016a8:	40013c00 	.word	0x40013c00

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016bc:	787b      	ldrb	r3, [r7, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80016c8:	e003      	b.n	80016d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016ca:	887b      	ldrh	r3, [r7, #2]
 80016cc:	041a      	lsls	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	619a      	str	r2, [r3, #24]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40007000 	.word	0x40007000

08001700 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b23      	ldr	r3, [pc, #140]	; (8001798 <HAL_PWREx_EnableOverDrive+0x98>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a22      	ldr	r2, [pc, #136]	; (8001798 <HAL_PWREx_EnableOverDrive+0x98>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_PWREx_EnableOverDrive+0x98>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001722:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1d      	ldr	r2, [pc, #116]	; (800179c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800172e:	f7ff fbbf 	bl	8000eb0 <HAL_GetTick>
 8001732:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001734:	e009      	b.n	800174a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001736:	f7ff fbbb 	bl	8000eb0 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001744:	d901      	bls.n	800174a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e022      	b.n	8001790 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_PWREx_EnableOverDrive+0x9c>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001756:	d1ee      	bne.n	8001736 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_PWREx_EnableOverDrive+0x9c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0f      	ldr	r2, [pc, #60]	; (800179c <HAL_PWREx_EnableOverDrive+0x9c>)
 800175e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001762:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001764:	f7ff fba4 	bl	8000eb0 <HAL_GetTick>
 8001768:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800176a:	e009      	b.n	8001780 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800176c:	f7ff fba0 	bl	8000eb0 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800177a:	d901      	bls.n	8001780 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e007      	b.n	8001790 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800178c:	d1ee      	bne.n	800176c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	40007000 	.word	0x40007000

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017a8:	2300      	movs	r3, #0
 80017aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e29b      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 8087 	beq.w	80018d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c4:	4b96      	ldr	r3, [pc, #600]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d00c      	beq.n	80017ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d0:	4b93      	ldr	r3, [pc, #588]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 030c 	and.w	r3, r3, #12
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d112      	bne.n	8001802 <HAL_RCC_OscConfig+0x62>
 80017dc:	4b90      	ldr	r3, [pc, #576]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017e8:	d10b      	bne.n	8001802 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ea:	4b8d      	ldr	r3, [pc, #564]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d06c      	beq.n	80018d0 <HAL_RCC_OscConfig+0x130>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d168      	bne.n	80018d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e275      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x7a>
 800180c:	4b84      	ldr	r3, [pc, #528]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a83      	ldr	r2, [pc, #524]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e02e      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x9c>
 8001822:	4b7f      	ldr	r3, [pc, #508]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7e      	ldr	r2, [pc, #504]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b7c      	ldr	r3, [pc, #496]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a7b      	ldr	r2, [pc, #492]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0xc0>
 8001846:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a75      	ldr	r2, [pc, #468]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b73      	ldr	r3, [pc, #460]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a72      	ldr	r2, [pc, #456]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 8001860:	4b6f      	ldr	r3, [pc, #444]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a6e      	ldr	r2, [pc, #440]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b6c      	ldr	r3, [pc, #432]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a6b      	ldr	r2, [pc, #428]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff fb16 	bl	8000eb0 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fb12 	bl	8000eb0 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e229      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	4b61      	ldr	r3, [pc, #388]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0xe8>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fb02 	bl	8000eb0 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fafe 	bl	8000eb0 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e215      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c2:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x110>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d069      	beq.n	80019b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018de:	4b50      	ldr	r3, [pc, #320]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00b      	beq.n	8001902 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ea:	4b4d      	ldr	r3, [pc, #308]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d11c      	bne.n	8001930 <HAL_RCC_OscConfig+0x190>
 80018f6:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d116      	bne.n	8001930 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x17a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d001      	beq.n	800191a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e1e9      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	493d      	ldr	r1, [pc, #244]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	e040      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d023      	beq.n	8001980 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001938:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a38      	ldr	r2, [pc, #224]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fab4 	bl	8000eb0 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff fab0 	bl	8000eb0 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1c7      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195e:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4929      	ldr	r1, [pc, #164]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
 800197e:	e018      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a26      	ldr	r2, [pc, #152]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fa90 	bl	8000eb0 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001994:	f7ff fa8c 	bl	8000eb0 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e1a3      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d038      	beq.n	8001a30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d019      	beq.n	80019fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ca:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d2:	f7ff fa6d 	bl	8000eb0 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff fa69 	bl	8000eb0 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e180      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x23a>
 80019f8:	e01a      	b.n	8001a30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 80019fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_RCC_OscConfig+0x280>)
 8001a00:	f023 0301 	bic.w	r3, r3, #1
 8001a04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a06:	f7ff fa53 	bl	8000eb0 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fa4f 	bl	8000eb0 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d903      	bls.n	8001a24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e166      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
 8001a20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a24:	4b92      	ldr	r3, [pc, #584]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ee      	bne.n	8001a0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80a4 	beq.w	8001b86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3e:	4b8c      	ldr	r3, [pc, #560]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10d      	bne.n	8001a66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b89      	ldr	r3, [pc, #548]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	4a88      	ldr	r2, [pc, #544]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
 8001a56:	4b86      	ldr	r3, [pc, #536]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a62:	2301      	movs	r3, #1
 8001a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a66:	4b83      	ldr	r3, [pc, #524]	; (8001c74 <HAL_RCC_OscConfig+0x4d4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d118      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001a72:	4b80      	ldr	r3, [pc, #512]	; (8001c74 <HAL_RCC_OscConfig+0x4d4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a7f      	ldr	r2, [pc, #508]	; (8001c74 <HAL_RCC_OscConfig+0x4d4>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fa17 	bl	8000eb0 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a86:	f7ff fa13 	bl	8000eb0 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b64      	cmp	r3, #100	; 0x64
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e12a      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a98:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x4d4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x31a>
 8001aac:	4b70      	ldr	r3, [pc, #448]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab0:	4a6f      	ldr	r2, [pc, #444]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab8:	e02d      	b.n	8001b16 <HAL_RCC_OscConfig+0x376>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x33c>
 8001ac2:	4b6b      	ldr	r3, [pc, #428]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac6:	4a6a      	ldr	r2, [pc, #424]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ace:	4b68      	ldr	r3, [pc, #416]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad2:	4a67      	ldr	r2, [pc, #412]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ada:	e01c      	b.n	8001b16 <HAL_RCC_OscConfig+0x376>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d10c      	bne.n	8001afe <HAL_RCC_OscConfig+0x35e>
 8001ae4:	4b62      	ldr	r3, [pc, #392]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae8:	4a61      	ldr	r2, [pc, #388]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001aea:	f043 0304 	orr.w	r3, r3, #4
 8001aee:	6713      	str	r3, [r2, #112]	; 0x70
 8001af0:	4b5f      	ldr	r3, [pc, #380]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	4a5e      	ldr	r2, [pc, #376]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	; 0x70
 8001afc:	e00b      	b.n	8001b16 <HAL_RCC_OscConfig+0x376>
 8001afe:	4b5c      	ldr	r3, [pc, #368]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	4a5b      	ldr	r2, [pc, #364]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0a:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	4a58      	ldr	r2, [pc, #352]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b10:	f023 0304 	bic.w	r3, r3, #4
 8001b14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d015      	beq.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1e:	f7ff f9c7 	bl	8000eb0 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff f9c3 	bl	8000eb0 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e0d8      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3c:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0ee      	beq.n	8001b26 <HAL_RCC_OscConfig+0x386>
 8001b48:	e014      	b.n	8001b74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff f9b1 	bl	8000eb0 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff f9ad 	bl	8000eb0 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e0c2      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b68:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ee      	bne.n	8001b52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b74:	7dfb      	ldrb	r3, [r7, #23]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d105      	bne.n	8001b86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	4a3c      	ldr	r2, [pc, #240]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80ae 	beq.w	8001cec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b90:	4b37      	ldr	r3, [pc, #220]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d06d      	beq.n	8001c78 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d14b      	bne.n	8001c3c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba4:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a31      	ldr	r2, [pc, #196]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff f97e 	bl	8000eb0 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff f97a 	bl	8000eb0 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e091      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	019b      	lsls	r3, r3, #6
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	041b      	lsls	r3, r3, #16
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	071b      	lsls	r3, r3, #28
 8001c02:	491b      	ldr	r1, [pc, #108]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c08:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f94c 	bl	8000eb0 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f948 	bl	8000eb0 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e05f      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x47c>
 8001c3a:	e057      	b.n	8001cec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0b      	ldr	r2, [pc, #44]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff f932 	bl	8000eb0 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c50:	f7ff f92e 	bl	8000eb0 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e045      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_RCC_OscConfig+0x4d0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x4b0>
 8001c6e:	e03d      	b.n	8001cec <HAL_RCC_OscConfig+0x54c>
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <HAL_RCC_OscConfig+0x558>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d030      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d129      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d122      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ca8:	4013      	ands	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d119      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	085b      	lsrs	r3, r3, #1
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d10f      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800

08001cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0d0      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b6a      	ldr	r3, [pc, #424]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d910      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b67      	ldr	r3, [pc, #412]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 020f 	bic.w	r2, r3, #15
 8001d2a:	4965      	ldr	r1, [pc, #404]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b63      	ldr	r3, [pc, #396]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0b8      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a58      	ldr	r2, [pc, #352]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4a52      	ldr	r2, [pc, #328]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d80:	4b50      	ldr	r3, [pc, #320]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	494d      	ldr	r1, [pc, #308]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d040      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d115      	bne.n	8001dde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e07f      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbe:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e073      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e06b      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f023 0203 	bic.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4936      	ldr	r1, [pc, #216]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df0:	f7ff f85e 	bl	8000eb0 <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df8:	f7ff f85a 	bl	8000eb0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e053      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 020c 	and.w	r2, r3, #12
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d1eb      	bne.n	8001df8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d210      	bcs.n	8001e50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 020f 	bic.w	r2, r3, #15
 8001e36:	4922      	ldr	r1, [pc, #136]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e032      	b.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4916      	ldr	r1, [pc, #88]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	490e      	ldr	r1, [pc, #56]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e8e:	f000 f821 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	091b      	lsrs	r3, r3, #4
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	490a      	ldr	r1, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ea0:	5ccb      	ldrb	r3, [r1, r3]
 8001ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1d0>)
 8001ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1d4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe ffba 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023c00 	.word	0x40023c00
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	08005dc0 	.word	0x08005dc0
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ed8:	b094      	sub	sp, #80	; 0x50
 8001eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	647b      	str	r3, [r7, #68]	; 0x44
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eec:	4b79      	ldr	r3, [pc, #484]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d00d      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x40>
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	f200 80e1 	bhi.w	80020c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x34>
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f06:	e0db      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f08:	4b73      	ldr	r3, [pc, #460]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f0c:	e0db      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f0e:	4b73      	ldr	r3, [pc, #460]	; (80020dc <HAL_RCC_GetSysClockFreq+0x208>)
 8001f10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f12:	e0d8      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f14:	4b6f      	ldr	r3, [pc, #444]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f1c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f1e:	4b6d      	ldr	r3, [pc, #436]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d063      	beq.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2a:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	099b      	lsrs	r3, r3, #6
 8001f30:	2200      	movs	r2, #0
 8001f32:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f3e:	2300      	movs	r3, #0
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
 8001f42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f46:	4622      	mov	r2, r4
 8001f48:	462b      	mov	r3, r5
 8001f4a:	f04f 0000 	mov.w	r0, #0
 8001f4e:	f04f 0100 	mov.w	r1, #0
 8001f52:	0159      	lsls	r1, r3, #5
 8001f54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f58:	0150      	lsls	r0, r2, #5
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4621      	mov	r1, r4
 8001f60:	1a51      	subs	r1, r2, r1
 8001f62:	6139      	str	r1, [r7, #16]
 8001f64:	4629      	mov	r1, r5
 8001f66:	eb63 0301 	sbc.w	r3, r3, r1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f78:	4659      	mov	r1, fp
 8001f7a:	018b      	lsls	r3, r1, #6
 8001f7c:	4651      	mov	r1, sl
 8001f7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f82:	4651      	mov	r1, sl
 8001f84:	018a      	lsls	r2, r1, #6
 8001f86:	4651      	mov	r1, sl
 8001f88:	ebb2 0801 	subs.w	r8, r2, r1
 8001f8c:	4659      	mov	r1, fp
 8001f8e:	eb63 0901 	sbc.w	r9, r3, r1
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fa6:	4690      	mov	r8, r2
 8001fa8:	4699      	mov	r9, r3
 8001faa:	4623      	mov	r3, r4
 8001fac:	eb18 0303 	adds.w	r3, r8, r3
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	462b      	mov	r3, r5
 8001fb4:	eb49 0303 	adc.w	r3, r9, r3
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fc6:	4629      	mov	r1, r5
 8001fc8:	024b      	lsls	r3, r1, #9
 8001fca:	4621      	mov	r1, r4
 8001fcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	024a      	lsls	r2, r1, #9
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fda:	2200      	movs	r2, #0
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fe0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fe4:	f7fe f97c 	bl	80002e0 <__aeabi_uldivmod>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4613      	mov	r3, r2
 8001fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ff0:	e058      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff2:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	099b      	lsrs	r3, r3, #6
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002002:	623b      	str	r3, [r7, #32]
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
 8002008:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800200c:	4642      	mov	r2, r8
 800200e:	464b      	mov	r3, r9
 8002010:	f04f 0000 	mov.w	r0, #0
 8002014:	f04f 0100 	mov.w	r1, #0
 8002018:	0159      	lsls	r1, r3, #5
 800201a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800201e:	0150      	lsls	r0, r2, #5
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4641      	mov	r1, r8
 8002026:	ebb2 0a01 	subs.w	sl, r2, r1
 800202a:	4649      	mov	r1, r9
 800202c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	f04f 0300 	mov.w	r3, #0
 8002038:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800203c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002040:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002044:	ebb2 040a 	subs.w	r4, r2, sl
 8002048:	eb63 050b 	sbc.w	r5, r3, fp
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	00eb      	lsls	r3, r5, #3
 8002056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800205a:	00e2      	lsls	r2, r4, #3
 800205c:	4614      	mov	r4, r2
 800205e:	461d      	mov	r5, r3
 8002060:	4643      	mov	r3, r8
 8002062:	18e3      	adds	r3, r4, r3
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	464b      	mov	r3, r9
 8002068:	eb45 0303 	adc.w	r3, r5, r3
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9d7 4500 	ldrd	r4, r5, [r7]
 800207a:	4629      	mov	r1, r5
 800207c:	028b      	lsls	r3, r1, #10
 800207e:	4621      	mov	r1, r4
 8002080:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002084:	4621      	mov	r1, r4
 8002086:	028a      	lsls	r2, r1, #10
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800208e:	2200      	movs	r2, #0
 8002090:	61bb      	str	r3, [r7, #24]
 8002092:	61fa      	str	r2, [r7, #28]
 8002094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002098:	f7fe f922 	bl	80002e0 <__aeabi_uldivmod>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4613      	mov	r3, r2
 80020a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	0c1b      	lsrs	r3, r3, #16
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	3301      	adds	r3, #1
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80020b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020be:	e002      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80020c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3750      	adds	r7, #80	; 0x50
 80020cc:	46bd      	mov	sp, r7
 80020ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	00f42400 	.word	0x00f42400
 80020dc:	007a1200 	.word	0x007a1200

080020e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000000 	.word	0x20000000

080020f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020fc:	f7ff fff0 	bl	80020e0 <HAL_RCC_GetHCLKFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0a9b      	lsrs	r3, r3, #10
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	4903      	ldr	r1, [pc, #12]	; (800211c <HAL_RCC_GetPCLK1Freq+0x24>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002114:	4618      	mov	r0, r3
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40023800 	.word	0x40023800
 800211c:	08005dd0 	.word	0x08005dd0

08002120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002124:	f7ff ffdc 	bl	80020e0 <HAL_RCC_GetHCLKFreq>
 8002128:	4602      	mov	r2, r0
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_RCC_GetPCLK2Freq+0x20>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	0b5b      	lsrs	r3, r3, #13
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	4903      	ldr	r1, [pc, #12]	; (8002144 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002136:	5ccb      	ldrb	r3, [r1, r3]
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40023800 	.word	0x40023800
 8002144:	08005dd0 	.word	0x08005dd0

08002148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d012      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002170:	4b69      	ldr	r3, [pc, #420]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4a68      	ldr	r2, [pc, #416]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002176:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800217a:	6093      	str	r3, [r2, #8]
 800217c:	4b66      	ldr	r3, [pc, #408]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002184:	4964      	ldr	r1, [pc, #400]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002192:	2301      	movs	r3, #1
 8002194:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d017      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021a2:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	4959      	ldr	r1, [pc, #356]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021c0:	d101      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80021c2:	2301      	movs	r3, #1
 80021c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80021ce:	2301      	movs	r3, #1
 80021d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d017      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021de:	4b4e      	ldr	r3, [pc, #312]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	494a      	ldr	r1, [pc, #296]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021fc:	d101      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80021fe:	2301      	movs	r3, #1
 8002200:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800221a:	2301      	movs	r3, #1
 800221c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0320 	and.w	r3, r3, #32
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 808b 	beq.w	8002342 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800222c:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	4a39      	ldr	r2, [pc, #228]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002236:	6413      	str	r3, [r2, #64]	; 0x40
 8002238:	4b37      	ldr	r3, [pc, #220]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002244:	4b35      	ldr	r3, [pc, #212]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a34      	ldr	r2, [pc, #208]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800224a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002250:	f7fe fe2e 	bl	8000eb0 <HAL_GetTick>
 8002254:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002258:	f7fe fe2a 	bl	8000eb0 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e38f      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800226a:	4b2c      	ldr	r3, [pc, #176]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002276:	4b28      	ldr	r3, [pc, #160]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d035      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	429a      	cmp	r2, r3
 8002292:	d02e      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800229c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80022b6:	4a18      	ldr	r2, [pc, #96]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d114      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe fdf2 	bl	8000eb0 <HAL_GetTick>
 80022cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7fe fdee 	bl	8000eb0 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e351      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0ee      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022fe:	d111      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800230e:	400b      	ands	r3, r1
 8002310:	4901      	ldr	r1, [pc, #4]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002312:	4313      	orrs	r3, r2
 8002314:	608b      	str	r3, [r1, #8]
 8002316:	e00b      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002318:	40023800 	.word	0x40023800
 800231c:	40007000 	.word	0x40007000
 8002320:	0ffffcff 	.word	0x0ffffcff
 8002324:	4bac      	ldr	r3, [pc, #688]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4aab      	ldr	r2, [pc, #684]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800232a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800232e:	6093      	str	r3, [r2, #8]
 8002330:	4ba9      	ldr	r3, [pc, #676]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	49a6      	ldr	r1, [pc, #664]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800233e:	4313      	orrs	r3, r2
 8002340:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b00      	cmp	r3, #0
 800234c:	d010      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800234e:	4ba2      	ldr	r3, [pc, #648]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002354:	4aa0      	ldr	r2, [pc, #640]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800235a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800235e:	4b9e      	ldr	r3, [pc, #632]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002360:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002368:	499b      	ldr	r1, [pc, #620]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800237c:	4b96      	ldr	r3, [pc, #600]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800238a:	4993      	ldr	r1, [pc, #588]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800239e:	4b8e      	ldr	r3, [pc, #568]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023ac:	498a      	ldr	r1, [pc, #552]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023c0:	4b85      	ldr	r3, [pc, #532]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ce:	4982      	ldr	r1, [pc, #520]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023e2:	4b7d      	ldr	r3, [pc, #500]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	4979      	ldr	r1, [pc, #484]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002404:	4b74      	ldr	r3, [pc, #464]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240a:	f023 0203 	bic.w	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	4971      	ldr	r1, [pc, #452]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00a      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002426:	4b6c      	ldr	r3, [pc, #432]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	f023 020c 	bic.w	r2, r3, #12
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002434:	4968      	ldr	r1, [pc, #416]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002448:	4b63      	ldr	r3, [pc, #396]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002456:	4960      	ldr	r1, [pc, #384]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800246a:	4b5b      	ldr	r3, [pc, #364]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002470:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002478:	4957      	ldr	r1, [pc, #348]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800248c:	4b52      	ldr	r3, [pc, #328]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249a:	494f      	ldr	r1, [pc, #316]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800249c:	4313      	orrs	r3, r2
 800249e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80024ae:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	4946      	ldr	r1, [pc, #280]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80024d0:	4b41      	ldr	r3, [pc, #260]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024de:	493e      	ldr	r1, [pc, #248]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00a      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80024f2:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002500:	4935      	ldr	r1, [pc, #212]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002514:	4b30      	ldr	r3, [pc, #192]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002522:	492d      	ldr	r1, [pc, #180]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d011      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002536:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002544:	4924      	ldr	r1, [pc, #144]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002554:	d101      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002556:	2301      	movs	r3, #1
 8002558:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002566:	2301      	movs	r3, #1
 8002568:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002576:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002584:	4914      	ldr	r1, [pc, #80]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00b      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a8:	490b      	ldr	r1, [pc, #44]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00f      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025cc:	4902      	ldr	r1, [pc, #8]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025d4:	e002      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00b      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025e8:	4b8a      	ldr	r3, [pc, #552]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f8:	4986      	ldr	r1, [pc, #536]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00b      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800260c:	4b81      	ldr	r3, [pc, #516]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800260e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002612:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800261c:	497d      	ldr	r1, [pc, #500]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d006      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80d6 	beq.w	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002638:	4b76      	ldr	r3, [pc, #472]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a75      	ldr	r2, [pc, #468]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800263e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002644:	f7fe fc34 	bl	8000eb0 <HAL_GetTick>
 8002648:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800264c:	f7fe fc30 	bl	8000eb0 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e195      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800265e:	4b6d      	ldr	r3, [pc, #436]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d021      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267a:	2b00      	cmp	r3, #0
 800267c:	d11d      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800267e:	4b65      	ldr	r3, [pc, #404]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002684:	0c1b      	lsrs	r3, r3, #16
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800268c:	4b61      	ldr	r3, [pc, #388]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800268e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002692:	0e1b      	lsrs	r3, r3, #24
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	019a      	lsls	r2, r3, #6
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	431a      	orrs	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	061b      	lsls	r3, r3, #24
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	071b      	lsls	r3, r3, #28
 80026b2:	4958      	ldr	r1, [pc, #352]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d004      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d02e      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e4:	d129      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026e6:	4b4b      	ldr	r3, [pc, #300]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ec:	0c1b      	lsrs	r3, r3, #16
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026f4:	4b47      	ldr	r3, [pc, #284]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fa:	0f1b      	lsrs	r3, r3, #28
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	019a      	lsls	r2, r3, #6
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	061b      	lsls	r3, r3, #24
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	071b      	lsls	r3, r3, #28
 800271a:	493e      	ldr	r1, [pc, #248]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002722:	4b3c      	ldr	r3, [pc, #240]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002728:	f023 021f 	bic.w	r2, r3, #31
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	3b01      	subs	r3, #1
 8002732:	4938      	ldr	r1, [pc, #224]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d01d      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002746:	4b33      	ldr	r3, [pc, #204]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800274c:	0e1b      	lsrs	r3, r3, #24
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002754:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800275a:	0f1b      	lsrs	r3, r3, #28
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	019a      	lsls	r2, r3, #6
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	431a      	orrs	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	061b      	lsls	r3, r3, #24
 8002774:	431a      	orrs	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	071b      	lsls	r3, r3, #28
 800277a:	4926      	ldr	r1, [pc, #152]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d011      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	019a      	lsls	r2, r3, #6
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	041b      	lsls	r3, r3, #16
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	071b      	lsls	r3, r3, #28
 80027aa:	491a      	ldr	r1, [pc, #104]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027b2:	4b18      	ldr	r3, [pc, #96]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a17      	ldr	r2, [pc, #92]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027be:	f7fe fb77 	bl	8000eb0 <HAL_GetTick>
 80027c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80027c6:	f7fe fb73 	bl	8000eb0 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b64      	cmp	r3, #100	; 0x64
 80027d2:	d901      	bls.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0d8      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027d8:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	f040 80ce 	bne.w	8002988 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a08      	ldr	r2, [pc, #32]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f8:	f7fe fb5a 	bl	8000eb0 <HAL_GetTick>
 80027fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027fe:	e00b      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002800:	f7fe fb56 	bl	8000eb0 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d904      	bls.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e0bb      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002818:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002824:	d0ec      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002842:	2b00      	cmp	r3, #0
 8002844:	d02e      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d12a      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800284e:	4b51      	ldr	r3, [pc, #324]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	0c1b      	lsrs	r3, r3, #16
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800285c:	4b4d      	ldr	r3, [pc, #308]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	0f1b      	lsrs	r3, r3, #28
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	019a      	lsls	r2, r3, #6
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	041b      	lsls	r3, r3, #16
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	061b      	lsls	r3, r3, #24
 800287c:	431a      	orrs	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	071b      	lsls	r3, r3, #28
 8002882:	4944      	ldr	r1, [pc, #272]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800288a:	4b42      	ldr	r3, [pc, #264]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800288c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002890:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	493d      	ldr	r1, [pc, #244]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d022      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028b8:	d11d      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	0e1b      	lsrs	r3, r3, #24
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028c8:	4b32      	ldr	r3, [pc, #200]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	0f1b      	lsrs	r3, r3, #28
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	019a      	lsls	r2, r3, #6
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	431a      	orrs	r2, r3
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	061b      	lsls	r3, r3, #24
 80028e8:	431a      	orrs	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	071b      	lsls	r3, r3, #28
 80028ee:	4929      	ldr	r1, [pc, #164]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d028      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	0e1b      	lsrs	r3, r3, #24
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002910:	4b20      	ldr	r3, [pc, #128]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	019a      	lsls	r2, r3, #6
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	431a      	orrs	r2, r3
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	071b      	lsls	r3, r3, #28
 8002936:	4917      	ldr	r1, [pc, #92]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	4911      	ldr	r1, [pc, #68]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800295a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002960:	f7fe faa6 	bl	8000eb0 <HAL_GetTick>
 8002964:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002968:	f7fe faa2 	bl	8000eb0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e007      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002986:	d1ef      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800

08002998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e040      	b.n	8002a2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe f8b8 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2224      	movs	r2, #36	; 0x24
 80029c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f82c 	bl	8002a34 <UART_SetConfig>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e022      	b.n	8002a2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 fa84 	bl	8002efc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 fb0b 	bl	8003040 <UART_CheckIdleState>
 8002a2a:	4603      	mov	r3, r0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4ba6      	ldr	r3, [pc, #664]	; (8002cf8 <UART_SetConfig+0x2c4>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	6979      	ldr	r1, [r7, #20]
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a94      	ldr	r2, [pc, #592]	; (8002cfc <UART_SetConfig+0x2c8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d120      	bne.n	8002af2 <UART_SetConfig+0xbe>
 8002ab0:	4b93      	ldr	r3, [pc, #588]	; (8002d00 <UART_SetConfig+0x2cc>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d816      	bhi.n	8002aec <UART_SetConfig+0xb8>
 8002abe:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <UART_SetConfig+0x90>)
 8002ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac4:	08002ad5 	.word	0x08002ad5
 8002ac8:	08002ae1 	.word	0x08002ae1
 8002acc:	08002adb 	.word	0x08002adb
 8002ad0:	08002ae7 	.word	0x08002ae7
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	77fb      	strb	r3, [r7, #31]
 8002ad8:	e150      	b.n	8002d7c <UART_SetConfig+0x348>
 8002ada:	2302      	movs	r3, #2
 8002adc:	77fb      	strb	r3, [r7, #31]
 8002ade:	e14d      	b.n	8002d7c <UART_SetConfig+0x348>
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	77fb      	strb	r3, [r7, #31]
 8002ae4:	e14a      	b.n	8002d7c <UART_SetConfig+0x348>
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	77fb      	strb	r3, [r7, #31]
 8002aea:	e147      	b.n	8002d7c <UART_SetConfig+0x348>
 8002aec:	2310      	movs	r3, #16
 8002aee:	77fb      	strb	r3, [r7, #31]
 8002af0:	e144      	b.n	8002d7c <UART_SetConfig+0x348>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a83      	ldr	r2, [pc, #524]	; (8002d04 <UART_SetConfig+0x2d0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d132      	bne.n	8002b62 <UART_SetConfig+0x12e>
 8002afc:	4b80      	ldr	r3, [pc, #512]	; (8002d00 <UART_SetConfig+0x2cc>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d828      	bhi.n	8002b5c <UART_SetConfig+0x128>
 8002b0a:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <UART_SetConfig+0xdc>)
 8002b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b10:	08002b45 	.word	0x08002b45
 8002b14:	08002b5d 	.word	0x08002b5d
 8002b18:	08002b5d 	.word	0x08002b5d
 8002b1c:	08002b5d 	.word	0x08002b5d
 8002b20:	08002b51 	.word	0x08002b51
 8002b24:	08002b5d 	.word	0x08002b5d
 8002b28:	08002b5d 	.word	0x08002b5d
 8002b2c:	08002b5d 	.word	0x08002b5d
 8002b30:	08002b4b 	.word	0x08002b4b
 8002b34:	08002b5d 	.word	0x08002b5d
 8002b38:	08002b5d 	.word	0x08002b5d
 8002b3c:	08002b5d 	.word	0x08002b5d
 8002b40:	08002b57 	.word	0x08002b57
 8002b44:	2300      	movs	r3, #0
 8002b46:	77fb      	strb	r3, [r7, #31]
 8002b48:	e118      	b.n	8002d7c <UART_SetConfig+0x348>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	77fb      	strb	r3, [r7, #31]
 8002b4e:	e115      	b.n	8002d7c <UART_SetConfig+0x348>
 8002b50:	2304      	movs	r3, #4
 8002b52:	77fb      	strb	r3, [r7, #31]
 8002b54:	e112      	b.n	8002d7c <UART_SetConfig+0x348>
 8002b56:	2308      	movs	r3, #8
 8002b58:	77fb      	strb	r3, [r7, #31]
 8002b5a:	e10f      	b.n	8002d7c <UART_SetConfig+0x348>
 8002b5c:	2310      	movs	r3, #16
 8002b5e:	77fb      	strb	r3, [r7, #31]
 8002b60:	e10c      	b.n	8002d7c <UART_SetConfig+0x348>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a68      	ldr	r2, [pc, #416]	; (8002d08 <UART_SetConfig+0x2d4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d120      	bne.n	8002bae <UART_SetConfig+0x17a>
 8002b6c:	4b64      	ldr	r3, [pc, #400]	; (8002d00 <UART_SetConfig+0x2cc>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b76:	2b30      	cmp	r3, #48	; 0x30
 8002b78:	d013      	beq.n	8002ba2 <UART_SetConfig+0x16e>
 8002b7a:	2b30      	cmp	r3, #48	; 0x30
 8002b7c:	d814      	bhi.n	8002ba8 <UART_SetConfig+0x174>
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d009      	beq.n	8002b96 <UART_SetConfig+0x162>
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	d810      	bhi.n	8002ba8 <UART_SetConfig+0x174>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <UART_SetConfig+0x15c>
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d006      	beq.n	8002b9c <UART_SetConfig+0x168>
 8002b8e:	e00b      	b.n	8002ba8 <UART_SetConfig+0x174>
 8002b90:	2300      	movs	r3, #0
 8002b92:	77fb      	strb	r3, [r7, #31]
 8002b94:	e0f2      	b.n	8002d7c <UART_SetConfig+0x348>
 8002b96:	2302      	movs	r3, #2
 8002b98:	77fb      	strb	r3, [r7, #31]
 8002b9a:	e0ef      	b.n	8002d7c <UART_SetConfig+0x348>
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	77fb      	strb	r3, [r7, #31]
 8002ba0:	e0ec      	b.n	8002d7c <UART_SetConfig+0x348>
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	77fb      	strb	r3, [r7, #31]
 8002ba6:	e0e9      	b.n	8002d7c <UART_SetConfig+0x348>
 8002ba8:	2310      	movs	r3, #16
 8002baa:	77fb      	strb	r3, [r7, #31]
 8002bac:	e0e6      	b.n	8002d7c <UART_SetConfig+0x348>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a56      	ldr	r2, [pc, #344]	; (8002d0c <UART_SetConfig+0x2d8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d120      	bne.n	8002bfa <UART_SetConfig+0x1c6>
 8002bb8:	4b51      	ldr	r3, [pc, #324]	; (8002d00 <UART_SetConfig+0x2cc>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002bc2:	2bc0      	cmp	r3, #192	; 0xc0
 8002bc4:	d013      	beq.n	8002bee <UART_SetConfig+0x1ba>
 8002bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8002bc8:	d814      	bhi.n	8002bf4 <UART_SetConfig+0x1c0>
 8002bca:	2b80      	cmp	r3, #128	; 0x80
 8002bcc:	d009      	beq.n	8002be2 <UART_SetConfig+0x1ae>
 8002bce:	2b80      	cmp	r3, #128	; 0x80
 8002bd0:	d810      	bhi.n	8002bf4 <UART_SetConfig+0x1c0>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <UART_SetConfig+0x1a8>
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	d006      	beq.n	8002be8 <UART_SetConfig+0x1b4>
 8002bda:	e00b      	b.n	8002bf4 <UART_SetConfig+0x1c0>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	77fb      	strb	r3, [r7, #31]
 8002be0:	e0cc      	b.n	8002d7c <UART_SetConfig+0x348>
 8002be2:	2302      	movs	r3, #2
 8002be4:	77fb      	strb	r3, [r7, #31]
 8002be6:	e0c9      	b.n	8002d7c <UART_SetConfig+0x348>
 8002be8:	2304      	movs	r3, #4
 8002bea:	77fb      	strb	r3, [r7, #31]
 8002bec:	e0c6      	b.n	8002d7c <UART_SetConfig+0x348>
 8002bee:	2308      	movs	r3, #8
 8002bf0:	77fb      	strb	r3, [r7, #31]
 8002bf2:	e0c3      	b.n	8002d7c <UART_SetConfig+0x348>
 8002bf4:	2310      	movs	r3, #16
 8002bf6:	77fb      	strb	r3, [r7, #31]
 8002bf8:	e0c0      	b.n	8002d7c <UART_SetConfig+0x348>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a44      	ldr	r2, [pc, #272]	; (8002d10 <UART_SetConfig+0x2dc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d125      	bne.n	8002c50 <UART_SetConfig+0x21c>
 8002c04:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <UART_SetConfig+0x2cc>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c12:	d017      	beq.n	8002c44 <UART_SetConfig+0x210>
 8002c14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c18:	d817      	bhi.n	8002c4a <UART_SetConfig+0x216>
 8002c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1e:	d00b      	beq.n	8002c38 <UART_SetConfig+0x204>
 8002c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c24:	d811      	bhi.n	8002c4a <UART_SetConfig+0x216>
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <UART_SetConfig+0x1fe>
 8002c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c2e:	d006      	beq.n	8002c3e <UART_SetConfig+0x20a>
 8002c30:	e00b      	b.n	8002c4a <UART_SetConfig+0x216>
 8002c32:	2300      	movs	r3, #0
 8002c34:	77fb      	strb	r3, [r7, #31]
 8002c36:	e0a1      	b.n	8002d7c <UART_SetConfig+0x348>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	77fb      	strb	r3, [r7, #31]
 8002c3c:	e09e      	b.n	8002d7c <UART_SetConfig+0x348>
 8002c3e:	2304      	movs	r3, #4
 8002c40:	77fb      	strb	r3, [r7, #31]
 8002c42:	e09b      	b.n	8002d7c <UART_SetConfig+0x348>
 8002c44:	2308      	movs	r3, #8
 8002c46:	77fb      	strb	r3, [r7, #31]
 8002c48:	e098      	b.n	8002d7c <UART_SetConfig+0x348>
 8002c4a:	2310      	movs	r3, #16
 8002c4c:	77fb      	strb	r3, [r7, #31]
 8002c4e:	e095      	b.n	8002d7c <UART_SetConfig+0x348>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2f      	ldr	r2, [pc, #188]	; (8002d14 <UART_SetConfig+0x2e0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d125      	bne.n	8002ca6 <UART_SetConfig+0x272>
 8002c5a:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <UART_SetConfig+0x2cc>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c68:	d017      	beq.n	8002c9a <UART_SetConfig+0x266>
 8002c6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c6e:	d817      	bhi.n	8002ca0 <UART_SetConfig+0x26c>
 8002c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c74:	d00b      	beq.n	8002c8e <UART_SetConfig+0x25a>
 8002c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c7a:	d811      	bhi.n	8002ca0 <UART_SetConfig+0x26c>
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <UART_SetConfig+0x254>
 8002c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c84:	d006      	beq.n	8002c94 <UART_SetConfig+0x260>
 8002c86:	e00b      	b.n	8002ca0 <UART_SetConfig+0x26c>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	77fb      	strb	r3, [r7, #31]
 8002c8c:	e076      	b.n	8002d7c <UART_SetConfig+0x348>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	77fb      	strb	r3, [r7, #31]
 8002c92:	e073      	b.n	8002d7c <UART_SetConfig+0x348>
 8002c94:	2304      	movs	r3, #4
 8002c96:	77fb      	strb	r3, [r7, #31]
 8002c98:	e070      	b.n	8002d7c <UART_SetConfig+0x348>
 8002c9a:	2308      	movs	r3, #8
 8002c9c:	77fb      	strb	r3, [r7, #31]
 8002c9e:	e06d      	b.n	8002d7c <UART_SetConfig+0x348>
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e06a      	b.n	8002d7c <UART_SetConfig+0x348>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a1b      	ldr	r2, [pc, #108]	; (8002d18 <UART_SetConfig+0x2e4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d138      	bne.n	8002d22 <UART_SetConfig+0x2ee>
 8002cb0:	4b13      	ldr	r3, [pc, #76]	; (8002d00 <UART_SetConfig+0x2cc>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002cba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cbe:	d017      	beq.n	8002cf0 <UART_SetConfig+0x2bc>
 8002cc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cc4:	d82a      	bhi.n	8002d1c <UART_SetConfig+0x2e8>
 8002cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cca:	d00b      	beq.n	8002ce4 <UART_SetConfig+0x2b0>
 8002ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd0:	d824      	bhi.n	8002d1c <UART_SetConfig+0x2e8>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <UART_SetConfig+0x2aa>
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cda:	d006      	beq.n	8002cea <UART_SetConfig+0x2b6>
 8002cdc:	e01e      	b.n	8002d1c <UART_SetConfig+0x2e8>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	77fb      	strb	r3, [r7, #31]
 8002ce2:	e04b      	b.n	8002d7c <UART_SetConfig+0x348>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	77fb      	strb	r3, [r7, #31]
 8002ce8:	e048      	b.n	8002d7c <UART_SetConfig+0x348>
 8002cea:	2304      	movs	r3, #4
 8002cec:	77fb      	strb	r3, [r7, #31]
 8002cee:	e045      	b.n	8002d7c <UART_SetConfig+0x348>
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	77fb      	strb	r3, [r7, #31]
 8002cf4:	e042      	b.n	8002d7c <UART_SetConfig+0x348>
 8002cf6:	bf00      	nop
 8002cf8:	efff69f3 	.word	0xefff69f3
 8002cfc:	40011000 	.word	0x40011000
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40004400 	.word	0x40004400
 8002d08:	40004800 	.word	0x40004800
 8002d0c:	40004c00 	.word	0x40004c00
 8002d10:	40005000 	.word	0x40005000
 8002d14:	40011400 	.word	0x40011400
 8002d18:	40007800 	.word	0x40007800
 8002d1c:	2310      	movs	r3, #16
 8002d1e:	77fb      	strb	r3, [r7, #31]
 8002d20:	e02c      	b.n	8002d7c <UART_SetConfig+0x348>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a72      	ldr	r2, [pc, #456]	; (8002ef0 <UART_SetConfig+0x4bc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d125      	bne.n	8002d78 <UART_SetConfig+0x344>
 8002d2c:	4b71      	ldr	r3, [pc, #452]	; (8002ef4 <UART_SetConfig+0x4c0>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d3a:	d017      	beq.n	8002d6c <UART_SetConfig+0x338>
 8002d3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002d40:	d817      	bhi.n	8002d72 <UART_SetConfig+0x33e>
 8002d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d46:	d00b      	beq.n	8002d60 <UART_SetConfig+0x32c>
 8002d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4c:	d811      	bhi.n	8002d72 <UART_SetConfig+0x33e>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <UART_SetConfig+0x326>
 8002d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d56:	d006      	beq.n	8002d66 <UART_SetConfig+0x332>
 8002d58:	e00b      	b.n	8002d72 <UART_SetConfig+0x33e>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	77fb      	strb	r3, [r7, #31]
 8002d5e:	e00d      	b.n	8002d7c <UART_SetConfig+0x348>
 8002d60:	2302      	movs	r3, #2
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	e00a      	b.n	8002d7c <UART_SetConfig+0x348>
 8002d66:	2304      	movs	r3, #4
 8002d68:	77fb      	strb	r3, [r7, #31]
 8002d6a:	e007      	b.n	8002d7c <UART_SetConfig+0x348>
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e004      	b.n	8002d7c <UART_SetConfig+0x348>
 8002d72:	2310      	movs	r3, #16
 8002d74:	77fb      	strb	r3, [r7, #31]
 8002d76:	e001      	b.n	8002d7c <UART_SetConfig+0x348>
 8002d78:	2310      	movs	r3, #16
 8002d7a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d84:	d15b      	bne.n	8002e3e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002d86:	7ffb      	ldrb	r3, [r7, #31]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d828      	bhi.n	8002dde <UART_SetConfig+0x3aa>
 8002d8c:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <UART_SetConfig+0x360>)
 8002d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d92:	bf00      	nop
 8002d94:	08002db9 	.word	0x08002db9
 8002d98:	08002dc1 	.word	0x08002dc1
 8002d9c:	08002dc9 	.word	0x08002dc9
 8002da0:	08002ddf 	.word	0x08002ddf
 8002da4:	08002dcf 	.word	0x08002dcf
 8002da8:	08002ddf 	.word	0x08002ddf
 8002dac:	08002ddf 	.word	0x08002ddf
 8002db0:	08002ddf 	.word	0x08002ddf
 8002db4:	08002dd7 	.word	0x08002dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002db8:	f7ff f99e 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8002dbc:	61b8      	str	r0, [r7, #24]
        break;
 8002dbe:	e013      	b.n	8002de8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dc0:	f7ff f9ae 	bl	8002120 <HAL_RCC_GetPCLK2Freq>
 8002dc4:	61b8      	str	r0, [r7, #24]
        break;
 8002dc6:	e00f      	b.n	8002de8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dc8:	4b4b      	ldr	r3, [pc, #300]	; (8002ef8 <UART_SetConfig+0x4c4>)
 8002dca:	61bb      	str	r3, [r7, #24]
        break;
 8002dcc:	e00c      	b.n	8002de8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dce:	f7ff f881 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8002dd2:	61b8      	str	r0, [r7, #24]
        break;
 8002dd4:	e008      	b.n	8002de8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dda:	61bb      	str	r3, [r7, #24]
        break;
 8002ddc:	e004      	b.n	8002de8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	77bb      	strb	r3, [r7, #30]
        break;
 8002de6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d074      	beq.n	8002ed8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	005a      	lsls	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	441a      	add	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	2b0f      	cmp	r3, #15
 8002e08:	d916      	bls.n	8002e38 <UART_SetConfig+0x404>
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e10:	d212      	bcs.n	8002e38 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f023 030f 	bic.w	r3, r3, #15
 8002e1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	89fb      	ldrh	r3, [r7, #14]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	89fa      	ldrh	r2, [r7, #14]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	e04f      	b.n	8002ed8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	77bb      	strb	r3, [r7, #30]
 8002e3c:	e04c      	b.n	8002ed8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e3e:	7ffb      	ldrb	r3, [r7, #31]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d828      	bhi.n	8002e96 <UART_SetConfig+0x462>
 8002e44:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <UART_SetConfig+0x418>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e71 	.word	0x08002e71
 8002e50:	08002e79 	.word	0x08002e79
 8002e54:	08002e81 	.word	0x08002e81
 8002e58:	08002e97 	.word	0x08002e97
 8002e5c:	08002e87 	.word	0x08002e87
 8002e60:	08002e97 	.word	0x08002e97
 8002e64:	08002e97 	.word	0x08002e97
 8002e68:	08002e97 	.word	0x08002e97
 8002e6c:	08002e8f 	.word	0x08002e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e70:	f7ff f942 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8002e74:	61b8      	str	r0, [r7, #24]
        break;
 8002e76:	e013      	b.n	8002ea0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e78:	f7ff f952 	bl	8002120 <HAL_RCC_GetPCLK2Freq>
 8002e7c:	61b8      	str	r0, [r7, #24]
        break;
 8002e7e:	e00f      	b.n	8002ea0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e80:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <UART_SetConfig+0x4c4>)
 8002e82:	61bb      	str	r3, [r7, #24]
        break;
 8002e84:	e00c      	b.n	8002ea0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e86:	f7ff f825 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8002e8a:	61b8      	str	r0, [r7, #24]
        break;
 8002e8c:	e008      	b.n	8002ea0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e92:	61bb      	str	r3, [r7, #24]
        break;
 8002e94:	e004      	b.n	8002ea0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	77bb      	strb	r3, [r7, #30]
        break;
 8002e9e:	bf00      	nop
    }

    if (pclk != 0U)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d018      	beq.n	8002ed8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	085a      	lsrs	r2, r3, #1
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	441a      	add	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b0f      	cmp	r3, #15
 8002ebe:	d909      	bls.n	8002ed4 <UART_SetConfig+0x4a0>
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec6:	d205      	bcs.n	8002ed4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	e001      	b.n	8002ed8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002ee4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3720      	adds	r7, #32
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40007c00 	.word	0x40007c00
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	00f42400 	.word	0x00f42400

08002efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01a      	beq.n	8003012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ffa:	d10a      	bne.n	8003012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	605a      	str	r2, [r3, #4]
  }
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af02      	add	r7, sp, #8
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003050:	f7fd ff2e 	bl	8000eb0 <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b08      	cmp	r3, #8
 8003062:	d10e      	bne.n	8003082 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f831 	bl	80030da <UART_WaitOnFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e027      	b.n	80030d2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b04      	cmp	r3, #4
 800308e:	d10e      	bne.n	80030ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003090:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f81b 	bl	80030da <UART_WaitOnFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e011      	b.n	80030d2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2220      	movs	r2, #32
 80030b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b09c      	sub	sp, #112	; 0x70
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	4613      	mov	r3, r2
 80030e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ea:	e0a7      	b.n	800323c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	f000 80a3 	beq.w	800323c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f6:	f7fd fedb 	bl	8000eb0 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003102:	429a      	cmp	r2, r3
 8003104:	d302      	bcc.n	800310c <UART_WaitOnFlagUntilTimeout+0x32>
 8003106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003108:	2b00      	cmp	r3, #0
 800310a:	d13f      	bne.n	800318c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800311a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003120:	667b      	str	r3, [r7, #100]	; 0x64
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800312a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800312c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003130:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003132:	e841 2300 	strex	r3, r2, [r1]
 8003136:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1e6      	bne.n	800310c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3308      	adds	r3, #8
 8003144:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003148:	e853 3f00 	ldrex	r3, [r3]
 800314c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800314e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003150:	f023 0301 	bic.w	r3, r3, #1
 8003154:	663b      	str	r3, [r7, #96]	; 0x60
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3308      	adds	r3, #8
 800315c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800315e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003160:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800316c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e5      	bne.n	800313e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e068      	b.n	800325e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	d050      	beq.n	800323c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a8:	d148      	bne.n	800323c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	e853 3f00 	ldrex	r3, [r3]
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
 80031d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031da:	e841 2300 	strex	r3, r2, [r1]
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1e6      	bne.n	80031b4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3308      	adds	r3, #8
 80031ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	e853 3f00 	ldrex	r3, [r3]
 80031f4:	613b      	str	r3, [r7, #16]
   return(result);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3308      	adds	r3, #8
 8003204:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003206:	623a      	str	r2, [r7, #32]
 8003208:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320a:	69f9      	ldr	r1, [r7, #28]
 800320c:	6a3a      	ldr	r2, [r7, #32]
 800320e:	e841 2300 	strex	r3, r2, [r1]
 8003212:	61bb      	str	r3, [r7, #24]
   return(result);
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1e5      	bne.n	80031e6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e010      	b.n	800325e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4013      	ands	r3, r2
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	429a      	cmp	r2, r3
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	429a      	cmp	r2, r3
 8003258:	f43f af48 	beq.w	80030ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3770      	adds	r7, #112	; 0x70
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <HAL_ETH_RxCpltCallback+0x1c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f841 	bl	80032fc <osSemaphoreRelease>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	2000a374 	.word	0x2000a374

08003288 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <HAL_ETH_TxCpltCallback+0x1c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 f831 	bl	80032fc <osSemaphoreRelease>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	2000a378 	.word	0x2000a378

080032a8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7fe f841 	bl	8001338 <HAL_ETH_GetDMAError>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032bc:	2b80      	cmp	r3, #128	; 0x80
 80032be:	d104      	bne.n	80032ca <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80032c0:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <HAL_ETH_ErrorCallback+0x2c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f819 	bl	80032fc <osSemaphoreRelease>
  }
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	2000a374 	.word	0x2000a374

080032d8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032de:	f3ef 8305 	mrs	r3, IPSR
 80032e2:	607b      	str	r3, [r7, #4]
  return(result);
 80032e4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	bf14      	ite	ne
 80032ea:	2301      	movne	r3, #1
 80032ec:	2300      	moveq	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003308:	2300      	movs	r3, #0
 800330a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800330c:	f7ff ffe4 	bl	80032d8 <inHandlerMode>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d016      	beq.n	8003344 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003316:	f107 0308 	add.w	r3, r7, #8
 800331a:	4619      	mov	r1, r3
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f9dd 	bl	80036dc <xQueueGiveFromISR>
 8003322:	4603      	mov	r3, r0
 8003324:	2b01      	cmp	r3, #1
 8003326:	d001      	beq.n	800332c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003328:	23ff      	movs	r3, #255	; 0xff
 800332a:	e017      	b.n	800335c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d013      	beq.n	800335a <osSemaphoreRelease+0x5e>
 8003332:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <osSemaphoreRelease+0x68>)
 8003334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	e00a      	b.n	800335a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003344:	2300      	movs	r3, #0
 8003346:	2200      	movs	r2, #0
 8003348:	2100      	movs	r1, #0
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f8c0 	bl	80034d0 <xQueueGenericSend>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	d001      	beq.n	800335a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003356:	23ff      	movs	r3, #255	; 0xff
 8003358:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	e000ed04 	.word	0xe000ed04

08003368 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f103 0208 	add.w	r2, r3, #8
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f04f 32ff 	mov.w	r2, #4294967295
 8003380:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f103 0208 	add.w	r2, r3, #8
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 0208 	add.w	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	601a      	str	r2, [r3, #0]
}
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d103      	bne.n	800342a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e00c      	b.n	8003444 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3308      	adds	r3, #8
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	e002      	b.n	8003438 <vListInsert+0x2e>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	429a      	cmp	r2, r3
 8003442:	d2f6      	bcs.n	8003432 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	601a      	str	r2, [r3, #0]
}
 8003470:	bf00      	nop
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6892      	ldr	r2, [r2, #8]
 8003492:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6852      	ldr	r2, [r2, #4]
 800349c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d103      	bne.n	80034b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	1e5a      	subs	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08e      	sub	sp, #56	; 0x38
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
 80034dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034de:	2300      	movs	r3, #0
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10c      	bne.n	8003506 <xQueueGenericSend+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f0:	b672      	cpsid	i
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	b662      	cpsie	i
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003502:	bf00      	nop
 8003504:	e7fe      	b.n	8003504 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d103      	bne.n	8003514 <xQueueGenericSend+0x44>
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <xQueueGenericSend+0x48>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <xQueueGenericSend+0x4a>
 8003518:	2300      	movs	r3, #0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10c      	bne.n	8003538 <xQueueGenericSend+0x68>
	__asm volatile
 800351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003522:	b672      	cpsid	i
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	b662      	cpsie	i
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003534:	bf00      	nop
 8003536:	e7fe      	b.n	8003536 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d103      	bne.n	8003546 <xQueueGenericSend+0x76>
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <xQueueGenericSend+0x7a>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <xQueueGenericSend+0x7c>
 800354a:	2300      	movs	r3, #0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10c      	bne.n	800356a <xQueueGenericSend+0x9a>
	__asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	b672      	cpsid	i
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	b662      	cpsie	i
 8003564:	623b      	str	r3, [r7, #32]
}
 8003566:	bf00      	nop
 8003568:	e7fe      	b.n	8003568 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800356a:	f000 ff89 	bl	8004480 <xTaskGetSchedulerState>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <xQueueGenericSend+0xaa>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <xQueueGenericSend+0xae>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <xQueueGenericSend+0xb0>
 800357e:	2300      	movs	r3, #0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10c      	bne.n	800359e <xQueueGenericSend+0xce>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	b672      	cpsid	i
 800358a:	f383 8811 	msr	BASEPRI, r3
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	b662      	cpsie	i
 8003598:	61fb      	str	r3, [r7, #28]
}
 800359a:	bf00      	nop
 800359c:	e7fe      	b.n	800359c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800359e:	f001 f98d 	bl	80048bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d302      	bcc.n	80035b4 <xQueueGenericSend+0xe4>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d129      	bne.n	8003608 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ba:	f000 f924 	bl	8003806 <prvCopyDataToQueue>
 80035be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d010      	beq.n	80035ea <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ca:	3324      	adds	r3, #36	; 0x24
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fd93 	bl	80040f8 <xTaskRemoveFromEventList>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d013      	beq.n	8003600 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80035d8:	4b3f      	ldr	r3, [pc, #252]	; (80036d8 <xQueueGenericSend+0x208>)
 80035da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	e00a      	b.n	8003600 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80035ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d007      	beq.n	8003600 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80035f0:	4b39      	ldr	r3, [pc, #228]	; (80036d8 <xQueueGenericSend+0x208>)
 80035f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003600:	f001 f990 	bl	8004924 <vPortExitCritical>
				return pdPASS;
 8003604:	2301      	movs	r3, #1
 8003606:	e063      	b.n	80036d0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d103      	bne.n	8003616 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800360e:	f001 f989 	bl	8004924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003612:	2300      	movs	r3, #0
 8003614:	e05c      	b.n	80036d0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003618:	2b00      	cmp	r3, #0
 800361a:	d106      	bne.n	800362a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800361c:	f107 0314 	add.w	r3, r7, #20
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fdcd 	bl	80041c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003626:	2301      	movs	r3, #1
 8003628:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800362a:	f001 f97b 	bl	8004924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800362e:	f000 fb79 	bl	8003d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003632:	f001 f943 	bl	80048bc <vPortEnterCritical>
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800363c:	b25b      	sxtb	r3, r3
 800363e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003642:	d103      	bne.n	800364c <xQueueGenericSend+0x17c>
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003652:	b25b      	sxtb	r3, r3
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d103      	bne.n	8003662 <xQueueGenericSend+0x192>
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003662:	f001 f95f 	bl	8004924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003666:	1d3a      	adds	r2, r7, #4
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fdbc 	bl	80041ec <xTaskCheckForTimeOut>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d124      	bne.n	80036c4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800367a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800367c:	f000 f97f 	bl	800397e <prvIsQueueFull>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d018      	beq.n	80036b8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	3310      	adds	r3, #16
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	4611      	mov	r1, r2
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fd0c 	bl	80040ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003696:	f000 f920 	bl	80038da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800369a:	f000 fb51 	bl	8003d40 <xTaskResumeAll>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f47f af7c 	bne.w	800359e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80036a6:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <xQueueGenericSend+0x208>)
 80036a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	e772      	b.n	800359e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80036b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ba:	f000 f90e 	bl	80038da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036be:	f000 fb3f 	bl	8003d40 <xTaskResumeAll>
 80036c2:	e76c      	b.n	800359e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80036c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036c6:	f000 f908 	bl	80038da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036ca:	f000 fb39 	bl	8003d40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80036ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3738      	adds	r7, #56	; 0x38
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	e000ed04 	.word	0xe000ed04

080036dc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08e      	sub	sp, #56	; 0x38
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10c      	bne.n	800370a <xQueueGiveFromISR+0x2e>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	b672      	cpsid	i
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	b662      	cpsie	i
 8003704:	623b      	str	r3, [r7, #32]
}
 8003706:	bf00      	nop
 8003708:	e7fe      	b.n	8003708 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00c      	beq.n	800372c <xQueueGiveFromISR+0x50>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	b672      	cpsid	i
 8003718:	f383 8811 	msr	BASEPRI, r3
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	b662      	cpsie	i
 8003726:	61fb      	str	r3, [r7, #28]
}
 8003728:	bf00      	nop
 800372a:	e7fe      	b.n	800372a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d103      	bne.n	800373c <xQueueGiveFromISR+0x60>
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <xQueueGiveFromISR+0x64>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <xQueueGiveFromISR+0x66>
 8003740:	2300      	movs	r3, #0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10c      	bne.n	8003760 <xQueueGiveFromISR+0x84>
	__asm volatile
 8003746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374a:	b672      	cpsid	i
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	b662      	cpsie	i
 800375a:	61bb      	str	r3, [r7, #24]
}
 800375c:	bf00      	nop
 800375e:	e7fe      	b.n	800375e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003760:	f001 f994 	bl	8004a8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003764:	f3ef 8211 	mrs	r2, BASEPRI
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	b672      	cpsid	i
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	b662      	cpsie	i
 800377c:	617a      	str	r2, [r7, #20]
 800377e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003780:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003782:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003790:	429a      	cmp	r2, r3
 8003792:	d22b      	bcs.n	80037ec <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800379a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80037a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80037aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ae:	d112      	bne.n	80037d6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d016      	beq.n	80037e6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	3324      	adds	r3, #36	; 0x24
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fc9b 	bl	80040f8 <xTaskRemoveFromEventList>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00e      	beq.n	80037e6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e007      	b.n	80037e6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037da:	3301      	adds	r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	b25a      	sxtb	r2, r3
 80037e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80037e6:	2301      	movs	r3, #1
 80037e8:	637b      	str	r3, [r7, #52]	; 0x34
 80037ea:	e001      	b.n	80037f0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	637b      	str	r3, [r7, #52]	; 0x34
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3738      	adds	r7, #56	; 0x38
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10d      	bne.n	8003840 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d14d      	bne.n	80038c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fe43 	bl	80044bc <xTaskPriorityDisinherit>
 8003836:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
 800383e:	e043      	b.n	80038c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d119      	bne.n	800387a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6858      	ldr	r0, [r3, #4]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	461a      	mov	r2, r3
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	f001 fa3b 	bl	8004ccc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	441a      	add	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	429a      	cmp	r2, r3
 800386e:	d32b      	bcc.n	80038c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	605a      	str	r2, [r3, #4]
 8003878:	e026      	b.n	80038c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	68d8      	ldr	r0, [r3, #12]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	461a      	mov	r2, r3
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	f001 fa21 	bl	8004ccc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	425b      	negs	r3, r3
 8003894:	441a      	add	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d207      	bcs.n	80038b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	425b      	negs	r3, r3
 80038b0:	441a      	add	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d105      	bne.n	80038c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80038d0:	697b      	ldr	r3, [r7, #20]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038e2:	f000 ffeb 	bl	80048bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038ee:	e011      	b.n	8003914 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d012      	beq.n	800391e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3324      	adds	r3, #36	; 0x24
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fbfb 	bl	80040f8 <xTaskRemoveFromEventList>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003908:	f000 fcd6 	bl	80042b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	3b01      	subs	r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003918:	2b00      	cmp	r3, #0
 800391a:	dce9      	bgt.n	80038f0 <prvUnlockQueue+0x16>
 800391c:	e000      	b.n	8003920 <prvUnlockQueue+0x46>
					break;
 800391e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	22ff      	movs	r2, #255	; 0xff
 8003924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003928:	f000 fffc 	bl	8004924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800392c:	f000 ffc6 	bl	80048bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003936:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003938:	e011      	b.n	800395e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d012      	beq.n	8003968 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3310      	adds	r3, #16
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fbd6 	bl	80040f8 <xTaskRemoveFromEventList>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003952:	f000 fcb1 	bl	80042b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003956:	7bbb      	ldrb	r3, [r7, #14]
 8003958:	3b01      	subs	r3, #1
 800395a:	b2db      	uxtb	r3, r3
 800395c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800395e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003962:	2b00      	cmp	r3, #0
 8003964:	dce9      	bgt.n	800393a <prvUnlockQueue+0x60>
 8003966:	e000      	b.n	800396a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003968:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	22ff      	movs	r2, #255	; 0xff
 800396e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003972:	f000 ffd7 	bl	8004924 <vPortExitCritical>
}
 8003976:	bf00      	nop
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003986:	f000 ff99 	bl	80048bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	429a      	cmp	r2, r3
 8003994:	d102      	bne.n	800399c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003996:	2301      	movs	r3, #1
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	e001      	b.n	80039a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039a0:	f000 ffc0 	bl	8004924 <vPortExitCritical>

	return xReturn;
 80039a4:	68fb      	ldr	r3, [r7, #12]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b08e      	sub	sp, #56	; 0x38
 80039b2:	af04      	add	r7, sp, #16
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10c      	bne.n	80039dc <xTaskCreateStatic+0x2e>
	__asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	b672      	cpsid	i
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	b662      	cpsie	i
 80039d6:	623b      	str	r3, [r7, #32]
}
 80039d8:	bf00      	nop
 80039da:	e7fe      	b.n	80039da <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80039dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10c      	bne.n	80039fc <xTaskCreateStatic+0x4e>
	__asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	b672      	cpsid	i
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	b662      	cpsie	i
 80039f6:	61fb      	str	r3, [r7, #28]
}
 80039f8:	bf00      	nop
 80039fa:	e7fe      	b.n	80039fa <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039fc:	2354      	movs	r3, #84	; 0x54
 80039fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2b54      	cmp	r3, #84	; 0x54
 8003a04:	d00c      	beq.n	8003a20 <xTaskCreateStatic+0x72>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	b672      	cpsid	i
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	b662      	cpsie	i
 8003a1a:	61bb      	str	r3, [r7, #24]
}
 8003a1c:	bf00      	nop
 8003a1e:	e7fe      	b.n	8003a1e <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01e      	beq.n	8003a66 <xTaskCreateStatic+0xb8>
 8003a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01b      	beq.n	8003a66 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a40:	2300      	movs	r3, #0
 8003a42:	9303      	str	r3, [sp, #12]
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	9302      	str	r3, [sp, #8]
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f80b 	bl	8003a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a60:	f000 f892 	bl	8003b88 <prvAddNewTaskToReadyList>
 8003a64:	e001      	b.n	8003a6a <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a6a:	697b      	ldr	r3, [r7, #20]
	}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3728      	adds	r7, #40	; 0x28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003a8c:	440b      	add	r3, r1
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f023 0307 	bic.w	r3, r3, #7
 8003a9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00c      	beq.n	8003ac0 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	b672      	cpsid	i
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	b662      	cpsie	i
 8003aba:	617b      	str	r3, [r7, #20]
}
 8003abc:	bf00      	nop
 8003abe:	e7fe      	b.n	8003abe <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01f      	beq.n	8003b06 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	e012      	b.n	8003af2 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	7819      	ldrb	r1, [r3, #0]
 8003ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	4413      	add	r3, r2
 8003ada:	3334      	adds	r3, #52	; 0x34
 8003adc:	460a      	mov	r2, r1
 8003ade:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d006      	beq.n	8003afa <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	3301      	adds	r3, #1
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b0f      	cmp	r3, #15
 8003af6:	d9e9      	bls.n	8003acc <prvInitialiseNewTask+0x58>
 8003af8:	e000      	b.n	8003afc <prvInitialiseNewTask+0x88>
			{
				break;
 8003afa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b04:	e003      	b.n	8003b0e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b10:	2b06      	cmp	r3, #6
 8003b12:	d901      	bls.n	8003b18 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b14:	2306      	movs	r3, #6
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b22:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	2200      	movs	r2, #0
 8003b28:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff fc3a 	bl	80033a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	3318      	adds	r3, #24
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff fc35 	bl	80033a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	f1c3 0207 	rsb	r2, r3, #7
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	2200      	movs	r2, #0
 8003b58:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	68f9      	ldr	r1, [r7, #12]
 8003b66:	69b8      	ldr	r0, [r7, #24]
 8003b68:	f000 fd98 	bl	800469c <pxPortInitialiseStack>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b7e:	bf00      	nop
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b90:	f000 fe94 	bl	80048bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b94:	4b2a      	ldr	r3, [pc, #168]	; (8003c40 <prvAddNewTaskToReadyList+0xb8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	4a29      	ldr	r2, [pc, #164]	; (8003c40 <prvAddNewTaskToReadyList+0xb8>)
 8003b9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b9e:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <prvAddNewTaskToReadyList+0xbc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ba6:	4a27      	ldr	r2, [pc, #156]	; (8003c44 <prvAddNewTaskToReadyList+0xbc>)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bac:	4b24      	ldr	r3, [pc, #144]	; (8003c40 <prvAddNewTaskToReadyList+0xb8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d110      	bne.n	8003bd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bb4:	f000 fba4 	bl	8004300 <prvInitialiseTaskLists>
 8003bb8:	e00d      	b.n	8003bd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bba:	4b23      	ldr	r3, [pc, #140]	; (8003c48 <prvAddNewTaskToReadyList+0xc0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bc2:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <prvAddNewTaskToReadyList+0xbc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d802      	bhi.n	8003bd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bd0:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <prvAddNewTaskToReadyList+0xbc>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bd6:	4b1d      	ldr	r3, [pc, #116]	; (8003c4c <prvAddNewTaskToReadyList+0xc4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	4a1b      	ldr	r2, [pc, #108]	; (8003c4c <prvAddNewTaskToReadyList+0xc4>)
 8003bde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	2201      	movs	r2, #1
 8003be6:	409a      	lsls	r2, r3
 8003be8:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <prvAddNewTaskToReadyList+0xc8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <prvAddNewTaskToReadyList+0xc8>)
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4a15      	ldr	r2, [pc, #84]	; (8003c54 <prvAddNewTaskToReadyList+0xcc>)
 8003c00:	441a      	add	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3304      	adds	r3, #4
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f7ff fbda 	bl	80033c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c0e:	f000 fe89 	bl	8004924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <prvAddNewTaskToReadyList+0xc0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00e      	beq.n	8003c38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <prvAddNewTaskToReadyList+0xbc>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d207      	bcs.n	8003c38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <prvAddNewTaskToReadyList+0xd0>)
 8003c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c38:	bf00      	nop
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	2000a52c 	.word	0x2000a52c
 8003c44:	2000a42c 	.word	0x2000a42c
 8003c48:	2000a538 	.word	0x2000a538
 8003c4c:	2000a548 	.word	0x2000a548
 8003c50:	2000a534 	.word	0x2000a534
 8003c54:	2000a430 	.word	0x2000a430
 8003c58:	e000ed04 	.word	0xe000ed04

08003c5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	; 0x28
 8003c60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c6a:	463a      	mov	r2, r7
 8003c6c:	1d39      	adds	r1, r7, #4
 8003c6e:	f107 0308 	add.w	r3, r7, #8
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc fcb6 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c78:	6839      	ldr	r1, [r7, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	9202      	str	r2, [sp, #8]
 8003c80:	9301      	str	r3, [sp, #4]
 8003c82:	2300      	movs	r3, #0
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	2300      	movs	r3, #0
 8003c88:	460a      	mov	r2, r1
 8003c8a:	4920      	ldr	r1, [pc, #128]	; (8003d0c <vTaskStartScheduler+0xb0>)
 8003c8c:	4820      	ldr	r0, [pc, #128]	; (8003d10 <vTaskStartScheduler+0xb4>)
 8003c8e:	f7ff fe8e 	bl	80039ae <xTaskCreateStatic>
 8003c92:	4603      	mov	r3, r0
 8003c94:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <vTaskStartScheduler+0xb8>)
 8003c96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c98:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <vTaskStartScheduler+0xb8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e001      	b.n	8003caa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d118      	bne.n	8003ce2 <vTaskStartScheduler+0x86>
	__asm volatile
 8003cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb4:	b672      	cpsid	i
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	b662      	cpsie	i
 8003cc4:	613b      	str	r3, [r7, #16]
}
 8003cc6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cc8:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <vTaskStartScheduler+0xbc>)
 8003cca:	f04f 32ff 	mov.w	r2, #4294967295
 8003cce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <vTaskStartScheduler+0xc0>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <vTaskStartScheduler+0xc4>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cdc:	f000 fd70 	bl	80047c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ce0:	e010      	b.n	8003d04 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d10c      	bne.n	8003d04 <vTaskStartScheduler+0xa8>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	b672      	cpsid	i
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	b662      	cpsie	i
 8003cfe:	60fb      	str	r3, [r7, #12]
}
 8003d00:	bf00      	nop
 8003d02:	e7fe      	b.n	8003d02 <vTaskStartScheduler+0xa6>
}
 8003d04:	bf00      	nop
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	08005db8 	.word	0x08005db8
 8003d10:	080042d1 	.word	0x080042d1
 8003d14:	2000a550 	.word	0x2000a550
 8003d18:	2000a54c 	.word	0x2000a54c
 8003d1c:	2000a538 	.word	0x2000a538
 8003d20:	2000a530 	.word	0x2000a530

08003d24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d28:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <vTaskSuspendAll+0x18>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	4a03      	ldr	r2, [pc, #12]	; (8003d3c <vTaskSuspendAll+0x18>)
 8003d30:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003d32:	bf00      	nop
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	2000a554 	.word	0x2000a554

08003d40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d4e:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <xTaskResumeAll+0x118>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10c      	bne.n	8003d70 <xTaskResumeAll+0x30>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	b672      	cpsid	i
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	b662      	cpsie	i
 8003d6a:	603b      	str	r3, [r7, #0]
}
 8003d6c:	bf00      	nop
 8003d6e:	e7fe      	b.n	8003d6e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d70:	f000 fda4 	bl	80048bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d74:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <xTaskResumeAll+0x118>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	4a37      	ldr	r2, [pc, #220]	; (8003e58 <xTaskResumeAll+0x118>)
 8003d7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d7e:	4b36      	ldr	r3, [pc, #216]	; (8003e58 <xTaskResumeAll+0x118>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d161      	bne.n	8003e4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d86:	4b35      	ldr	r3, [pc, #212]	; (8003e5c <xTaskResumeAll+0x11c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d05d      	beq.n	8003e4a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d8e:	e02e      	b.n	8003dee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d90:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <xTaskResumeAll+0x120>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3318      	adds	r3, #24
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fb6d 	bl	800347c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3304      	adds	r3, #4
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fb68 	bl	800347c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	2201      	movs	r2, #1
 8003db2:	409a      	lsls	r2, r3
 8003db4:	4b2b      	ldr	r3, [pc, #172]	; (8003e64 <xTaskResumeAll+0x124>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	4a2a      	ldr	r2, [pc, #168]	; (8003e64 <xTaskResumeAll+0x124>)
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4a27      	ldr	r2, [pc, #156]	; (8003e68 <xTaskResumeAll+0x128>)
 8003dcc:	441a      	add	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	f7ff faf4 	bl	80033c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dde:	4b23      	ldr	r3, [pc, #140]	; (8003e6c <xTaskResumeAll+0x12c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d302      	bcc.n	8003dee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003de8:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <xTaskResumeAll+0x130>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dee:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <xTaskResumeAll+0x120>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1cc      	bne.n	8003d90 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dfc:	f000 fb20 	bl	8004440 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e00:	4b1c      	ldr	r3, [pc, #112]	; (8003e74 <xTaskResumeAll+0x134>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d010      	beq.n	8003e2e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e0c:	f000 f836 	bl	8003e7c <xTaskIncrementTick>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003e16:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <xTaskResumeAll+0x130>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1f1      	bne.n	8003e0c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <xTaskResumeAll+0x134>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e2e:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <xTaskResumeAll+0x130>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d009      	beq.n	8003e4a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e36:	2301      	movs	r3, #1
 8003e38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <xTaskResumeAll+0x138>)
 8003e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	f3bf 8f4f 	dsb	sy
 8003e46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e4a:	f000 fd6b 	bl	8004924 <vPortExitCritical>

	return xAlreadyYielded;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	2000a554 	.word	0x2000a554
 8003e5c:	2000a52c 	.word	0x2000a52c
 8003e60:	2000a4ec 	.word	0x2000a4ec
 8003e64:	2000a534 	.word	0x2000a534
 8003e68:	2000a430 	.word	0x2000a430
 8003e6c:	2000a42c 	.word	0x2000a42c
 8003e70:	2000a540 	.word	0x2000a540
 8003e74:	2000a53c 	.word	0x2000a53c
 8003e78:	e000ed04 	.word	0xe000ed04

08003e7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e86:	4b4f      	ldr	r3, [pc, #316]	; (8003fc4 <xTaskIncrementTick+0x148>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 808a 	bne.w	8003fa4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e90:	4b4d      	ldr	r3, [pc, #308]	; (8003fc8 <xTaskIncrementTick+0x14c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3301      	adds	r3, #1
 8003e96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e98:	4a4b      	ldr	r2, [pc, #300]	; (8003fc8 <xTaskIncrementTick+0x14c>)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d122      	bne.n	8003eea <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ea4:	4b49      	ldr	r3, [pc, #292]	; (8003fcc <xTaskIncrementTick+0x150>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00c      	beq.n	8003ec8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	b672      	cpsid	i
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	b662      	cpsie	i
 8003ec2:	603b      	str	r3, [r7, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	e7fe      	b.n	8003ec6 <xTaskIncrementTick+0x4a>
 8003ec8:	4b40      	ldr	r3, [pc, #256]	; (8003fcc <xTaskIncrementTick+0x150>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	4b40      	ldr	r3, [pc, #256]	; (8003fd0 <xTaskIncrementTick+0x154>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a3e      	ldr	r2, [pc, #248]	; (8003fcc <xTaskIncrementTick+0x150>)
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4a3e      	ldr	r2, [pc, #248]	; (8003fd0 <xTaskIncrementTick+0x154>)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	4b3d      	ldr	r3, [pc, #244]	; (8003fd4 <xTaskIncrementTick+0x158>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	4a3c      	ldr	r2, [pc, #240]	; (8003fd4 <xTaskIncrementTick+0x158>)
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	f000 faab 	bl	8004440 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003eea:	4b3b      	ldr	r3, [pc, #236]	; (8003fd8 <xTaskIncrementTick+0x15c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d348      	bcc.n	8003f86 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ef4:	4b35      	ldr	r3, [pc, #212]	; (8003fcc <xTaskIncrementTick+0x150>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d104      	bne.n	8003f08 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003efe:	4b36      	ldr	r3, [pc, #216]	; (8003fd8 <xTaskIncrementTick+0x15c>)
 8003f00:	f04f 32ff 	mov.w	r2, #4294967295
 8003f04:	601a      	str	r2, [r3, #0]
					break;
 8003f06:	e03e      	b.n	8003f86 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f08:	4b30      	ldr	r3, [pc, #192]	; (8003fcc <xTaskIncrementTick+0x150>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d203      	bcs.n	8003f28 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f20:	4a2d      	ldr	r2, [pc, #180]	; (8003fd8 <xTaskIncrementTick+0x15c>)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f26:	e02e      	b.n	8003f86 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff faa5 	bl	800347c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d004      	beq.n	8003f44 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	3318      	adds	r3, #24
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fa9c 	bl	800347c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	2201      	movs	r2, #1
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	4b23      	ldr	r3, [pc, #140]	; (8003fdc <xTaskIncrementTick+0x160>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	4a22      	ldr	r2, [pc, #136]	; (8003fdc <xTaskIncrementTick+0x160>)
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4a1f      	ldr	r2, [pc, #124]	; (8003fe0 <xTaskIncrementTick+0x164>)
 8003f64:	441a      	add	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f7ff fa28 	bl	80033c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f76:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <xTaskIncrementTick+0x168>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d3b9      	bcc.n	8003ef4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8003f80:	2301      	movs	r3, #1
 8003f82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f84:	e7b6      	b.n	8003ef4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f86:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <xTaskIncrementTick+0x168>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f8c:	4914      	ldr	r1, [pc, #80]	; (8003fe0 <xTaskIncrementTick+0x164>)
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d907      	bls.n	8003fae <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e004      	b.n	8003fae <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003fa4:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <xTaskIncrementTick+0x16c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	4a0f      	ldr	r2, [pc, #60]	; (8003fe8 <xTaskIncrementTick+0x16c>)
 8003fac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <xTaskIncrementTick+0x170>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003fba:	697b      	ldr	r3, [r7, #20]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	2000a554 	.word	0x2000a554
 8003fc8:	2000a530 	.word	0x2000a530
 8003fcc:	2000a4e4 	.word	0x2000a4e4
 8003fd0:	2000a4e8 	.word	0x2000a4e8
 8003fd4:	2000a544 	.word	0x2000a544
 8003fd8:	2000a54c 	.word	0x2000a54c
 8003fdc:	2000a534 	.word	0x2000a534
 8003fe0:	2000a430 	.word	0x2000a430
 8003fe4:	2000a42c 	.word	0x2000a42c
 8003fe8:	2000a53c 	.word	0x2000a53c
 8003fec:	2000a540 	.word	0x2000a540

08003ff0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ff6:	4b28      	ldr	r3, [pc, #160]	; (8004098 <vTaskSwitchContext+0xa8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ffe:	4b27      	ldr	r3, [pc, #156]	; (800409c <vTaskSwitchContext+0xac>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004004:	e041      	b.n	800408a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004006:	4b25      	ldr	r3, [pc, #148]	; (800409c <vTaskSwitchContext+0xac>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400c:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <vTaskSwitchContext+0xb0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	fab3 f383 	clz	r3, r3
 8004018:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800401a:	7afb      	ldrb	r3, [r7, #11]
 800401c:	f1c3 031f 	rsb	r3, r3, #31
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	4920      	ldr	r1, [pc, #128]	; (80040a4 <vTaskSwitchContext+0xb4>)
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10c      	bne.n	8004050 <vTaskSwitchContext+0x60>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	b672      	cpsid	i
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	b662      	cpsie	i
 800404a:	607b      	str	r3, [r7, #4]
}
 800404c:	bf00      	nop
 800404e:	e7fe      	b.n	800404e <vTaskSwitchContext+0x5e>
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4613      	mov	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4413      	add	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <vTaskSwitchContext+0xb4>)
 800405c:	4413      	add	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	3308      	adds	r3, #8
 8004072:	429a      	cmp	r2, r3
 8004074:	d104      	bne.n	8004080 <vTaskSwitchContext+0x90>
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	605a      	str	r2, [r3, #4]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <vTaskSwitchContext+0xb8>)
 8004088:	6013      	str	r3, [r2, #0]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	2000a554 	.word	0x2000a554
 800409c:	2000a540 	.word	0x2000a540
 80040a0:	2000a534 	.word	0x2000a534
 80040a4:	2000a430 	.word	0x2000a430
 80040a8:	2000a42c 	.word	0x2000a42c

080040ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10c      	bne.n	80040d6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	b672      	cpsid	i
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	b662      	cpsie	i
 80040d0:	60fb      	str	r3, [r7, #12]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <vTaskPlaceOnEventList+0x48>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3318      	adds	r3, #24
 80040dc:	4619      	mov	r1, r3
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff f993 	bl	800340a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040e4:	2101      	movs	r1, #1
 80040e6:	6838      	ldr	r0, [r7, #0]
 80040e8:	f000 fa72 	bl	80045d0 <prvAddCurrentTaskToDelayedList>
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	2000a42c 	.word	0x2000a42c

080040f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10c      	bne.n	8004128 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	b672      	cpsid	i
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	b662      	cpsie	i
 8004122:	60fb      	str	r3, [r7, #12]
}
 8004124:	bf00      	nop
 8004126:	e7fe      	b.n	8004126 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	3318      	adds	r3, #24
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff f9a5 	bl	800347c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004132:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <xTaskRemoveFromEventList+0xb0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d11c      	bne.n	8004174 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3304      	adds	r3, #4
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff f99c 	bl	800347c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	2201      	movs	r2, #1
 800414a:	409a      	lsls	r2, r3
 800414c:	4b17      	ldr	r3, [pc, #92]	; (80041ac <xTaskRemoveFromEventList+0xb4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4313      	orrs	r3, r2
 8004152:	4a16      	ldr	r2, [pc, #88]	; (80041ac <xTaskRemoveFromEventList+0xb4>)
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <xTaskRemoveFromEventList+0xb8>)
 8004164:	441a      	add	r2, r3
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	3304      	adds	r3, #4
 800416a:	4619      	mov	r1, r3
 800416c:	4610      	mov	r0, r2
 800416e:	f7ff f928 	bl	80033c2 <vListInsertEnd>
 8004172:	e005      	b.n	8004180 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	3318      	adds	r3, #24
 8004178:	4619      	mov	r1, r3
 800417a:	480e      	ldr	r0, [pc, #56]	; (80041b4 <xTaskRemoveFromEventList+0xbc>)
 800417c:	f7ff f921 	bl	80033c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <xTaskRemoveFromEventList+0xc0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	429a      	cmp	r2, r3
 800418c:	d905      	bls.n	800419a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800418e:	2301      	movs	r3, #1
 8004190:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <xTaskRemoveFromEventList+0xc4>)
 8004194:	2201      	movs	r2, #1
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e001      	b.n	800419e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800419a:	2300      	movs	r3, #0
 800419c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800419e:	697b      	ldr	r3, [r7, #20]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	2000a554 	.word	0x2000a554
 80041ac:	2000a534 	.word	0x2000a534
 80041b0:	2000a430 	.word	0x2000a430
 80041b4:	2000a4ec 	.word	0x2000a4ec
 80041b8:	2000a42c 	.word	0x2000a42c
 80041bc:	2000a540 	.word	0x2000a540

080041c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <vTaskInternalSetTimeOutState+0x24>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <vTaskInternalSetTimeOutState+0x28>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	605a      	str	r2, [r3, #4]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	2000a544 	.word	0x2000a544
 80041e8:	2000a530 	.word	0x2000a530

080041ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10c      	bne.n	8004216 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004200:	b672      	cpsid	i
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	b662      	cpsie	i
 8004210:	613b      	str	r3, [r7, #16]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10c      	bne.n	8004236 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	b672      	cpsid	i
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	b662      	cpsie	i
 8004230:	60fb      	str	r3, [r7, #12]
}
 8004232:	bf00      	nop
 8004234:	e7fe      	b.n	8004234 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8004236:	f000 fb41 	bl	80048bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800423a:	4b1d      	ldr	r3, [pc, #116]	; (80042b0 <xTaskCheckForTimeOut+0xc4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d102      	bne.n	800425a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	e023      	b.n	80042a2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <xTaskCheckForTimeOut+0xc8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d007      	beq.n	8004276 <xTaskCheckForTimeOut+0x8a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	429a      	cmp	r2, r3
 800426e:	d302      	bcc.n	8004276 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004270:	2301      	movs	r3, #1
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	e015      	b.n	80042a2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	429a      	cmp	r2, r3
 800427e:	d20b      	bcs.n	8004298 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	1ad2      	subs	r2, r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff ff97 	bl	80041c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	e004      	b.n	80042a2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800429e:	2301      	movs	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80042a2:	f000 fb3f 	bl	8004924 <vPortExitCritical>

	return xReturn;
 80042a6:	69fb      	ldr	r3, [r7, #28]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	2000a530 	.word	0x2000a530
 80042b4:	2000a544 	.word	0x2000a544

080042b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <vTaskMissedYield+0x14>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]
}
 80042c2:	bf00      	nop
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	2000a540 	.word	0x2000a540

080042d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042d8:	f000 f852 	bl	8004380 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <prvIdleTask+0x28>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d9f9      	bls.n	80042d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <prvIdleTask+0x2c>)
 80042e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042f4:	e7f0      	b.n	80042d8 <prvIdleTask+0x8>
 80042f6:	bf00      	nop
 80042f8:	2000a430 	.word	0x2000a430
 80042fc:	e000ed04 	.word	0xe000ed04

08004300 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004306:	2300      	movs	r3, #0
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	e00c      	b.n	8004326 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <prvInitialiseTaskLists+0x60>)
 8004318:	4413      	add	r3, r2
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff f824 	bl	8003368 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3301      	adds	r3, #1
 8004324:	607b      	str	r3, [r7, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b06      	cmp	r3, #6
 800432a:	d9ef      	bls.n	800430c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800432c:	480d      	ldr	r0, [pc, #52]	; (8004364 <prvInitialiseTaskLists+0x64>)
 800432e:	f7ff f81b 	bl	8003368 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004332:	480d      	ldr	r0, [pc, #52]	; (8004368 <prvInitialiseTaskLists+0x68>)
 8004334:	f7ff f818 	bl	8003368 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004338:	480c      	ldr	r0, [pc, #48]	; (800436c <prvInitialiseTaskLists+0x6c>)
 800433a:	f7ff f815 	bl	8003368 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800433e:	480c      	ldr	r0, [pc, #48]	; (8004370 <prvInitialiseTaskLists+0x70>)
 8004340:	f7ff f812 	bl	8003368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004344:	480b      	ldr	r0, [pc, #44]	; (8004374 <prvInitialiseTaskLists+0x74>)
 8004346:	f7ff f80f 	bl	8003368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <prvInitialiseTaskLists+0x78>)
 800434c:	4a05      	ldr	r2, [pc, #20]	; (8004364 <prvInitialiseTaskLists+0x64>)
 800434e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <prvInitialiseTaskLists+0x7c>)
 8004352:	4a05      	ldr	r2, [pc, #20]	; (8004368 <prvInitialiseTaskLists+0x68>)
 8004354:	601a      	str	r2, [r3, #0]
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	2000a430 	.word	0x2000a430
 8004364:	2000a4bc 	.word	0x2000a4bc
 8004368:	2000a4d0 	.word	0x2000a4d0
 800436c:	2000a4ec 	.word	0x2000a4ec
 8004370:	2000a500 	.word	0x2000a500
 8004374:	2000a518 	.word	0x2000a518
 8004378:	2000a4e4 	.word	0x2000a4e4
 800437c:	2000a4e8 	.word	0x2000a4e8

08004380 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004386:	e019      	b.n	80043bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004388:	f000 fa98 	bl	80048bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800438c:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <prvCheckTasksWaitingTermination+0x50>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3304      	adds	r3, #4
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff f86f 	bl	800347c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800439e:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <prvCheckTasksWaitingTermination+0x54>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	4a0b      	ldr	r2, [pc, #44]	; (80043d4 <prvCheckTasksWaitingTermination+0x54>)
 80043a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <prvCheckTasksWaitingTermination+0x58>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <prvCheckTasksWaitingTermination+0x58>)
 80043b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043b2:	f000 fab7 	bl	8004924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f810 	bl	80043dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <prvCheckTasksWaitingTermination+0x58>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e1      	bne.n	8004388 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	2000a500 	.word	0x2000a500
 80043d4:	2000a52c 	.word	0x2000a52c
 80043d8:	2000a514 	.word	0x2000a514

080043dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d108      	bne.n	8004400 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fb8e 	bl	8004b14 <vPortFree>
				vPortFree( pxTCB );
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fb8b 	bl	8004b14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043fe:	e01a      	b.n	8004436 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004406:	2b01      	cmp	r3, #1
 8004408:	d103      	bne.n	8004412 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fb82 	bl	8004b14 <vPortFree>
	}
 8004410:	e011      	b.n	8004436 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004418:	2b02      	cmp	r3, #2
 800441a:	d00c      	beq.n	8004436 <prvDeleteTCB+0x5a>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	b672      	cpsid	i
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	b662      	cpsie	i
 8004430:	60fb      	str	r3, [r7, #12]
}
 8004432:	bf00      	nop
 8004434:	e7fe      	b.n	8004434 <prvDeleteTCB+0x58>
	}
 8004436:	bf00      	nop
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004446:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <prvResetNextTaskUnblockTime+0x38>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d104      	bne.n	800445a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <prvResetNextTaskUnblockTime+0x3c>)
 8004452:	f04f 32ff 	mov.w	r2, #4294967295
 8004456:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004458:	e008      	b.n	800446c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800445a:	4b07      	ldr	r3, [pc, #28]	; (8004478 <prvResetNextTaskUnblockTime+0x38>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	4a04      	ldr	r2, [pc, #16]	; (800447c <prvResetNextTaskUnblockTime+0x3c>)
 800446a:	6013      	str	r3, [r2, #0]
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	2000a4e4 	.word	0x2000a4e4
 800447c:	2000a54c 	.word	0x2000a54c

08004480 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <xTaskGetSchedulerState+0x34>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d102      	bne.n	8004494 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800448e:	2301      	movs	r3, #1
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	e008      	b.n	80044a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004494:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <xTaskGetSchedulerState+0x38>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d102      	bne.n	80044a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800449c:	2302      	movs	r3, #2
 800449e:	607b      	str	r3, [r7, #4]
 80044a0:	e001      	b.n	80044a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044a2:	2300      	movs	r3, #0
 80044a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044a6:	687b      	ldr	r3, [r7, #4]
	}
 80044a8:	4618      	mov	r0, r3
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	2000a538 	.word	0x2000a538
 80044b8:	2000a554 	.word	0x2000a554

080044bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d072      	beq.n	80045b8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044d2:	4b3c      	ldr	r3, [pc, #240]	; (80045c4 <xTaskPriorityDisinherit+0x108>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d00c      	beq.n	80044f6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	b672      	cpsid	i
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	b662      	cpsie	i
 80044f0:	60fb      	str	r3, [r7, #12]
}
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10c      	bne.n	8004518 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	b672      	cpsid	i
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	b662      	cpsie	i
 8004512:	60bb      	str	r3, [r7, #8]
}
 8004514:	bf00      	nop
 8004516:	e7fe      	b.n	8004516 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451c:	1e5a      	subs	r2, r3, #1
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	429a      	cmp	r2, r3
 800452c:	d044      	beq.n	80045b8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004532:	2b00      	cmp	r3, #0
 8004534:	d140      	bne.n	80045b8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	3304      	adds	r3, #4
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe ff9e 	bl	800347c <uxListRemove>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d115      	bne.n	8004572 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454a:	491f      	ldr	r1, [pc, #124]	; (80045c8 <xTaskPriorityDisinherit+0x10c>)
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10a      	bne.n	8004572 <xTaskPriorityDisinherit+0xb6>
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004560:	2201      	movs	r2, #1
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43da      	mvns	r2, r3
 8004568:	4b18      	ldr	r3, [pc, #96]	; (80045cc <xTaskPriorityDisinherit+0x110>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4013      	ands	r3, r2
 800456e:	4a17      	ldr	r2, [pc, #92]	; (80045cc <xTaskPriorityDisinherit+0x110>)
 8004570:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	f1c3 0207 	rsb	r2, r3, #7
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	2201      	movs	r2, #1
 800458c:	409a      	lsls	r2, r3
 800458e:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <xTaskPriorityDisinherit+0x110>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4313      	orrs	r3, r2
 8004594:	4a0d      	ldr	r2, [pc, #52]	; (80045cc <xTaskPriorityDisinherit+0x110>)
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4a08      	ldr	r2, [pc, #32]	; (80045c8 <xTaskPriorityDisinherit+0x10c>)
 80045a6:	441a      	add	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	3304      	adds	r3, #4
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f7fe ff07 	bl	80033c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045b4:	2301      	movs	r3, #1
 80045b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045b8:	697b      	ldr	r3, [r7, #20]
	}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	2000a42c 	.word	0x2000a42c
 80045c8:	2000a430 	.word	0x2000a430
 80045cc:	2000a534 	.word	0x2000a534

080045d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045da:	4b29      	ldr	r3, [pc, #164]	; (8004680 <prvAddCurrentTaskToDelayedList+0xb0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045e0:	4b28      	ldr	r3, [pc, #160]	; (8004684 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe ff48 	bl	800347c <uxListRemove>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10b      	bne.n	800460a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80045f2:	4b24      	ldr	r3, [pc, #144]	; (8004684 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	2201      	movs	r2, #1
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43da      	mvns	r2, r3
 8004600:	4b21      	ldr	r3, [pc, #132]	; (8004688 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4013      	ands	r3, r2
 8004606:	4a20      	ldr	r2, [pc, #128]	; (8004688 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004608:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004610:	d10a      	bne.n	8004628 <prvAddCurrentTaskToDelayedList+0x58>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004618:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <prvAddCurrentTaskToDelayedList+0xb4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3304      	adds	r3, #4
 800461e:	4619      	mov	r1, r3
 8004620:	481a      	ldr	r0, [pc, #104]	; (800468c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004622:	f7fe fece 	bl	80033c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004626:	e026      	b.n	8004676 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	429a      	cmp	r2, r3
 800463e:	d209      	bcs.n	8004654 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004640:	4b13      	ldr	r3, [pc, #76]	; (8004690 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3304      	adds	r3, #4
 800464a:	4619      	mov	r1, r3
 800464c:	4610      	mov	r0, r2
 800464e:	f7fe fedc 	bl	800340a <vListInsert>
}
 8004652:	e010      	b.n	8004676 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004654:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <prvAddCurrentTaskToDelayedList+0xb4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3304      	adds	r3, #4
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f7fe fed2 	bl	800340a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004666:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	429a      	cmp	r2, r3
 800466e:	d202      	bcs.n	8004676 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004670:	4a09      	ldr	r2, [pc, #36]	; (8004698 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6013      	str	r3, [r2, #0]
}
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	2000a530 	.word	0x2000a530
 8004684:	2000a42c 	.word	0x2000a42c
 8004688:	2000a534 	.word	0x2000a534
 800468c:	2000a518 	.word	0x2000a518
 8004690:	2000a4e8 	.word	0x2000a4e8
 8004694:	2000a4e4 	.word	0x2000a4e4
 8004698:	2000a54c 	.word	0x2000a54c

0800469c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3b04      	subs	r3, #4
 80046ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	3b04      	subs	r3, #4
 80046ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f023 0201 	bic.w	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3b04      	subs	r3, #4
 80046ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046cc:	4a0c      	ldr	r2, [pc, #48]	; (8004700 <pxPortInitialiseStack+0x64>)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3b14      	subs	r3, #20
 80046d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3b04      	subs	r3, #4
 80046e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f06f 0202 	mvn.w	r2, #2
 80046ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3b20      	subs	r3, #32
 80046f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046f2:	68fb      	ldr	r3, [r7, #12]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	08004705 	.word	0x08004705

08004704 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800470e:	4b14      	ldr	r3, [pc, #80]	; (8004760 <prvTaskExitError+0x5c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d00c      	beq.n	8004732 <prvTaskExitError+0x2e>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	b672      	cpsid	i
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	b662      	cpsie	i
 800472c:	60fb      	str	r3, [r7, #12]
}
 800472e:	bf00      	nop
 8004730:	e7fe      	b.n	8004730 <prvTaskExitError+0x2c>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	b672      	cpsid	i
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	b662      	cpsie	i
 8004746:	60bb      	str	r3, [r7, #8]
}
 8004748:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800474a:	bf00      	nop
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0fc      	beq.n	800474c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004752:	bf00      	nop
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	2000000c 	.word	0x2000000c
	...

08004770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <pxCurrentTCBConst2>)
 8004772:	6819      	ldr	r1, [r3, #0]
 8004774:	6808      	ldr	r0, [r1, #0]
 8004776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477a:	f380 8809 	msr	PSP, r0
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f380 8811 	msr	BASEPRI, r0
 800478a:	4770      	bx	lr
 800478c:	f3af 8000 	nop.w

08004790 <pxCurrentTCBConst2>:
 8004790:	2000a42c 	.word	0x2000a42c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop

08004798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004798:	4808      	ldr	r0, [pc, #32]	; (80047bc <prvPortStartFirstTask+0x24>)
 800479a:	6800      	ldr	r0, [r0, #0]
 800479c:	6800      	ldr	r0, [r0, #0]
 800479e:	f380 8808 	msr	MSP, r0
 80047a2:	f04f 0000 	mov.w	r0, #0
 80047a6:	f380 8814 	msr	CONTROL, r0
 80047aa:	b662      	cpsie	i
 80047ac:	b661      	cpsie	f
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	df00      	svc	0
 80047b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047ba:	bf00      	nop
 80047bc:	e000ed08 	.word	0xe000ed08

080047c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047c6:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <xPortStartScheduler+0xe4>)
 80047c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	22ff      	movs	r2, #255	; 0xff
 80047d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	4b2f      	ldr	r3, [pc, #188]	; (80048a8 <xPortStartScheduler+0xe8>)
 80047ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047ee:	4b2f      	ldr	r3, [pc, #188]	; (80048ac <xPortStartScheduler+0xec>)
 80047f0:	2207      	movs	r2, #7
 80047f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047f4:	e009      	b.n	800480a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80047f6:	4b2d      	ldr	r3, [pc, #180]	; (80048ac <xPortStartScheduler+0xec>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	4a2b      	ldr	r2, [pc, #172]	; (80048ac <xPortStartScheduler+0xec>)
 80047fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004812:	2b80      	cmp	r3, #128	; 0x80
 8004814:	d0ef      	beq.n	80047f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004816:	4b25      	ldr	r3, [pc, #148]	; (80048ac <xPortStartScheduler+0xec>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f1c3 0307 	rsb	r3, r3, #7
 800481e:	2b04      	cmp	r3, #4
 8004820:	d00c      	beq.n	800483c <xPortStartScheduler+0x7c>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	b672      	cpsid	i
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	b662      	cpsie	i
 8004836:	60bb      	str	r3, [r7, #8]
}
 8004838:	bf00      	nop
 800483a:	e7fe      	b.n	800483a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800483c:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <xPortStartScheduler+0xec>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	4a1a      	ldr	r2, [pc, #104]	; (80048ac <xPortStartScheduler+0xec>)
 8004844:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004846:	4b19      	ldr	r3, [pc, #100]	; (80048ac <xPortStartScheduler+0xec>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800484e:	4a17      	ldr	r2, [pc, #92]	; (80048ac <xPortStartScheduler+0xec>)
 8004850:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	b2da      	uxtb	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <xPortStartScheduler+0xf0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a14      	ldr	r2, [pc, #80]	; (80048b0 <xPortStartScheduler+0xf0>)
 8004860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004864:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <xPortStartScheduler+0xf0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a11      	ldr	r2, [pc, #68]	; (80048b0 <xPortStartScheduler+0xf0>)
 800486c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004870:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004872:	f000 f8dd 	bl	8004a30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004876:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <xPortStartScheduler+0xf4>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800487c:	f000 f8fc 	bl	8004a78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004880:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <xPortStartScheduler+0xf8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a0c      	ldr	r2, [pc, #48]	; (80048b8 <xPortStartScheduler+0xf8>)
 8004886:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800488a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800488c:	f7ff ff84 	bl	8004798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004890:	f7ff fbae 	bl	8003ff0 <vTaskSwitchContext>
	prvTaskExitError();
 8004894:	f7ff ff36 	bl	8004704 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	e000e400 	.word	0xe000e400
 80048a8:	2000a558 	.word	0x2000a558
 80048ac:	2000a55c 	.word	0x2000a55c
 80048b0:	e000ed20 	.word	0xe000ed20
 80048b4:	2000000c 	.word	0x2000000c
 80048b8:	e000ef34 	.word	0xe000ef34

080048bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	b672      	cpsid	i
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	b662      	cpsie	i
 80048d6:	607b      	str	r3, [r7, #4]
}
 80048d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048da:	4b10      	ldr	r3, [pc, #64]	; (800491c <vPortEnterCritical+0x60>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3301      	adds	r3, #1
 80048e0:	4a0e      	ldr	r2, [pc, #56]	; (800491c <vPortEnterCritical+0x60>)
 80048e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048e4:	4b0d      	ldr	r3, [pc, #52]	; (800491c <vPortEnterCritical+0x60>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d111      	bne.n	8004910 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048ec:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <vPortEnterCritical+0x64>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00c      	beq.n	8004910 <vPortEnterCritical+0x54>
	__asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	b672      	cpsid	i
 80048fc:	f383 8811 	msr	BASEPRI, r3
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	f3bf 8f4f 	dsb	sy
 8004908:	b662      	cpsie	i
 800490a:	603b      	str	r3, [r7, #0]
}
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <vPortEnterCritical+0x52>
	}
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	2000000c 	.word	0x2000000c
 8004920:	e000ed04 	.word	0xe000ed04

08004924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800492a:	4b13      	ldr	r3, [pc, #76]	; (8004978 <vPortExitCritical+0x54>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10c      	bne.n	800494c <vPortExitCritical+0x28>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	b672      	cpsid	i
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	b662      	cpsie	i
 8004946:	607b      	str	r3, [r7, #4]
}
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800494c:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <vPortExitCritical+0x54>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3b01      	subs	r3, #1
 8004952:	4a09      	ldr	r2, [pc, #36]	; (8004978 <vPortExitCritical+0x54>)
 8004954:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004956:	4b08      	ldr	r3, [pc, #32]	; (8004978 <vPortExitCritical+0x54>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d105      	bne.n	800496a <vPortExitCritical+0x46>
 800495e:	2300      	movs	r3, #0
 8004960:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	f383 8811 	msr	BASEPRI, r3
}
 8004968:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	2000000c 	.word	0x2000000c
 800497c:	00000000 	.word	0x00000000

08004980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004980:	f3ef 8009 	mrs	r0, PSP
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <pxCurrentTCBConst>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	f01e 0f10 	tst.w	lr, #16
 8004990:	bf08      	it	eq
 8004992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499a:	6010      	str	r0, [r2, #0]
 800499c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049a4:	b672      	cpsid	i
 80049a6:	f380 8811 	msr	BASEPRI, r0
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	b662      	cpsie	i
 80049b4:	f7ff fb1c 	bl	8003ff0 <vTaskSwitchContext>
 80049b8:	f04f 0000 	mov.w	r0, #0
 80049bc:	f380 8811 	msr	BASEPRI, r0
 80049c0:	bc09      	pop	{r0, r3}
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	6808      	ldr	r0, [r1, #0]
 80049c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ca:	f01e 0f10 	tst.w	lr, #16
 80049ce:	bf08      	it	eq
 80049d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049d4:	f380 8809 	msr	PSP, r0
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop

080049e0 <pxCurrentTCBConst>:
 80049e0:	2000a42c 	.word	0x2000a42c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop

080049e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	b672      	cpsid	i
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	b662      	cpsie	i
 8004a02:	607b      	str	r3, [r7, #4]
}
 8004a04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a06:	f7ff fa39 	bl	8003e7c <xTaskIncrementTick>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <xPortSysTickHandler+0x44>)
 8004a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	f383 8811 	msr	BASEPRI, r3
}
 8004a22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a24:	bf00      	nop
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	e000ed04 	.word	0xe000ed04

08004a30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a34:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <vPortSetupTimerInterrupt+0x34>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <vPortSetupTimerInterrupt+0x38>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a40:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <vPortSetupTimerInterrupt+0x3c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <vPortSetupTimerInterrupt+0x40>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	099b      	lsrs	r3, r3, #6
 8004a4c:	4a09      	ldr	r2, [pc, #36]	; (8004a74 <vPortSetupTimerInterrupt+0x44>)
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a52:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <vPortSetupTimerInterrupt+0x34>)
 8004a54:	2207      	movs	r2, #7
 8004a56:	601a      	str	r2, [r3, #0]
}
 8004a58:	bf00      	nop
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	e000e010 	.word	0xe000e010
 8004a68:	e000e018 	.word	0xe000e018
 8004a6c:	20000000 	.word	0x20000000
 8004a70:	10624dd3 	.word	0x10624dd3
 8004a74:	e000e014 	.word	0xe000e014

08004a78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a88 <vPortEnableVFP+0x10>
 8004a7c:	6801      	ldr	r1, [r0, #0]
 8004a7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a82:	6001      	str	r1, [r0, #0]
 8004a84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a86:	bf00      	nop
 8004a88:	e000ed88 	.word	0xe000ed88

08004a8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a92:	f3ef 8305 	mrs	r3, IPSR
 8004a96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b0f      	cmp	r3, #15
 8004a9c:	d916      	bls.n	8004acc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a9e:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <vPortValidateInterruptPriority+0x78>)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004aa8:	4b17      	ldr	r3, [pc, #92]	; (8004b08 <vPortValidateInterruptPriority+0x7c>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	7afa      	ldrb	r2, [r7, #11]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d20c      	bcs.n	8004acc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	b672      	cpsid	i
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	b662      	cpsie	i
 8004ac6:	607b      	str	r3, [r7, #4]
}
 8004ac8:	bf00      	nop
 8004aca:	e7fe      	b.n	8004aca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004acc:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <vPortValidateInterruptPriority+0x80>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <vPortValidateInterruptPriority+0x84>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d90c      	bls.n	8004af6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	b672      	cpsid	i
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	b662      	cpsie	i
 8004af0:	603b      	str	r3, [r7, #0]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <vPortValidateInterruptPriority+0x68>
	}
 8004af6:	bf00      	nop
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	e000e3f0 	.word	0xe000e3f0
 8004b08:	2000a558 	.word	0x2000a558
 8004b0c:	e000ed0c 	.word	0xe000ed0c
 8004b10:	2000a55c 	.word	0x2000a55c

08004b14 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d04c      	beq.n	8004bc0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b26:	2308      	movs	r3, #8
 8004b28:	425b      	negs	r3, r3
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <vPortFree+0xb4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10c      	bne.n	8004b5c <vPortFree+0x48>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	b672      	cpsid	i
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	b662      	cpsie	i
 8004b56:	60fb      	str	r3, [r7, #12]
}
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00c      	beq.n	8004b7e <vPortFree+0x6a>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	b672      	cpsid	i
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	b662      	cpsie	i
 8004b78:	60bb      	str	r3, [r7, #8]
}
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	685a      	ldr	r2, [r3, #4]
 8004b82:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <vPortFree+0xb4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d019      	beq.n	8004bc0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d115      	bne.n	8004bc0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <vPortFree+0xb4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ba4:	f7ff f8be 	bl	8003d24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <vPortFree+0xb8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	4a06      	ldr	r2, [pc, #24]	; (8004bcc <vPortFree+0xb8>)
 8004bb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bb6:	6938      	ldr	r0, [r7, #16]
 8004bb8:	f000 f80a 	bl	8004bd0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004bbc:	f7ff f8c0 	bl	8003d40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004bc0:	bf00      	nop
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	2000a570 	.word	0x2000a570
 8004bcc:	2000a56c 	.word	0x2000a56c

08004bd0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bd8:	4b28      	ldr	r3, [pc, #160]	; (8004c7c <prvInsertBlockIntoFreeList+0xac>)
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e002      	b.n	8004be4 <prvInsertBlockIntoFreeList+0x14>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d8f7      	bhi.n	8004bde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d108      	bne.n	8004c12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	441a      	add	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	441a      	add	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d118      	bne.n	8004c58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <prvInsertBlockIntoFreeList+0xb0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d00d      	beq.n	8004c4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	441a      	add	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	e008      	b.n	8004c60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <prvInsertBlockIntoFreeList+0xb0>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	601a      	str	r2, [r3, #0]
 8004c56:	e003      	b.n	8004c60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d002      	beq.n	8004c6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c6e:	bf00      	nop
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	2000a560 	.word	0x2000a560
 8004c80:	2000a568 	.word	0x2000a568

08004c84 <__libc_init_array>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	4d0d      	ldr	r5, [pc, #52]	; (8004cbc <__libc_init_array+0x38>)
 8004c88:	4c0d      	ldr	r4, [pc, #52]	; (8004cc0 <__libc_init_array+0x3c>)
 8004c8a:	1b64      	subs	r4, r4, r5
 8004c8c:	10a4      	asrs	r4, r4, #2
 8004c8e:	2600      	movs	r6, #0
 8004c90:	42a6      	cmp	r6, r4
 8004c92:	d109      	bne.n	8004ca8 <__libc_init_array+0x24>
 8004c94:	4d0b      	ldr	r5, [pc, #44]	; (8004cc4 <__libc_init_array+0x40>)
 8004c96:	4c0c      	ldr	r4, [pc, #48]	; (8004cc8 <__libc_init_array+0x44>)
 8004c98:	f001 f832 	bl	8005d00 <_init>
 8004c9c:	1b64      	subs	r4, r4, r5
 8004c9e:	10a4      	asrs	r4, r4, #2
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	42a6      	cmp	r6, r4
 8004ca4:	d105      	bne.n	8004cb2 <__libc_init_array+0x2e>
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cac:	4798      	blx	r3
 8004cae:	3601      	adds	r6, #1
 8004cb0:	e7ee      	b.n	8004c90 <__libc_init_array+0xc>
 8004cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb6:	4798      	blx	r3
 8004cb8:	3601      	adds	r6, #1
 8004cba:	e7f2      	b.n	8004ca2 <__libc_init_array+0x1e>
 8004cbc:	08005e78 	.word	0x08005e78
 8004cc0:	08005e78 	.word	0x08005e78
 8004cc4:	08005e78 	.word	0x08005e78
 8004cc8:	08005e7c 	.word	0x08005e7c

08004ccc <memcpy>:
 8004ccc:	440a      	add	r2, r1
 8004cce:	4291      	cmp	r1, r2
 8004cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cd4:	d100      	bne.n	8004cd8 <memcpy+0xc>
 8004cd6:	4770      	bx	lr
 8004cd8:	b510      	push	{r4, lr}
 8004cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ce2:	4291      	cmp	r1, r2
 8004ce4:	d1f9      	bne.n	8004cda <memcpy+0xe>
 8004ce6:	bd10      	pop	{r4, pc}

08004ce8 <memset>:
 8004ce8:	4402      	add	r2, r0
 8004cea:	4603      	mov	r3, r0
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d100      	bne.n	8004cf2 <memset+0xa>
 8004cf0:	4770      	bx	lr
 8004cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf6:	e7f9      	b.n	8004cec <memset+0x4>

08004cf8 <__sfputc_r>:
 8004cf8:	6893      	ldr	r3, [r2, #8]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	b410      	push	{r4}
 8004d00:	6093      	str	r3, [r2, #8]
 8004d02:	da08      	bge.n	8004d16 <__sfputc_r+0x1e>
 8004d04:	6994      	ldr	r4, [r2, #24]
 8004d06:	42a3      	cmp	r3, r4
 8004d08:	db01      	blt.n	8004d0e <__sfputc_r+0x16>
 8004d0a:	290a      	cmp	r1, #10
 8004d0c:	d103      	bne.n	8004d16 <__sfputc_r+0x1e>
 8004d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d12:	f000 bbb1 	b.w	8005478 <__swbuf_r>
 8004d16:	6813      	ldr	r3, [r2, #0]
 8004d18:	1c58      	adds	r0, r3, #1
 8004d1a:	6010      	str	r0, [r2, #0]
 8004d1c:	7019      	strb	r1, [r3, #0]
 8004d1e:	4608      	mov	r0, r1
 8004d20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <__sfputs_r>:
 8004d26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d28:	4606      	mov	r6, r0
 8004d2a:	460f      	mov	r7, r1
 8004d2c:	4614      	mov	r4, r2
 8004d2e:	18d5      	adds	r5, r2, r3
 8004d30:	42ac      	cmp	r4, r5
 8004d32:	d101      	bne.n	8004d38 <__sfputs_r+0x12>
 8004d34:	2000      	movs	r0, #0
 8004d36:	e007      	b.n	8004d48 <__sfputs_r+0x22>
 8004d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d3c:	463a      	mov	r2, r7
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f7ff ffda 	bl	8004cf8 <__sfputc_r>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d1f3      	bne.n	8004d30 <__sfputs_r+0xa>
 8004d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d4c <_vfiprintf_r>:
 8004d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d50:	460d      	mov	r5, r1
 8004d52:	b09d      	sub	sp, #116	; 0x74
 8004d54:	4614      	mov	r4, r2
 8004d56:	4698      	mov	r8, r3
 8004d58:	4606      	mov	r6, r0
 8004d5a:	b118      	cbz	r0, 8004d64 <_vfiprintf_r+0x18>
 8004d5c:	6983      	ldr	r3, [r0, #24]
 8004d5e:	b90b      	cbnz	r3, 8004d64 <_vfiprintf_r+0x18>
 8004d60:	f000 fd86 	bl	8005870 <__sinit>
 8004d64:	4b89      	ldr	r3, [pc, #548]	; (8004f8c <_vfiprintf_r+0x240>)
 8004d66:	429d      	cmp	r5, r3
 8004d68:	d11b      	bne.n	8004da2 <_vfiprintf_r+0x56>
 8004d6a:	6875      	ldr	r5, [r6, #4]
 8004d6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d6e:	07d9      	lsls	r1, r3, #31
 8004d70:	d405      	bmi.n	8004d7e <_vfiprintf_r+0x32>
 8004d72:	89ab      	ldrh	r3, [r5, #12]
 8004d74:	059a      	lsls	r2, r3, #22
 8004d76:	d402      	bmi.n	8004d7e <_vfiprintf_r+0x32>
 8004d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d7a:	f000 fe17 	bl	80059ac <__retarget_lock_acquire_recursive>
 8004d7e:	89ab      	ldrh	r3, [r5, #12]
 8004d80:	071b      	lsls	r3, r3, #28
 8004d82:	d501      	bpl.n	8004d88 <_vfiprintf_r+0x3c>
 8004d84:	692b      	ldr	r3, [r5, #16]
 8004d86:	b9eb      	cbnz	r3, 8004dc4 <_vfiprintf_r+0x78>
 8004d88:	4629      	mov	r1, r5
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f000 fbd8 	bl	8005540 <__swsetup_r>
 8004d90:	b1c0      	cbz	r0, 8004dc4 <_vfiprintf_r+0x78>
 8004d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d94:	07dc      	lsls	r4, r3, #31
 8004d96:	d50e      	bpl.n	8004db6 <_vfiprintf_r+0x6a>
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	b01d      	add	sp, #116	; 0x74
 8004d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da2:	4b7b      	ldr	r3, [pc, #492]	; (8004f90 <_vfiprintf_r+0x244>)
 8004da4:	429d      	cmp	r5, r3
 8004da6:	d101      	bne.n	8004dac <_vfiprintf_r+0x60>
 8004da8:	68b5      	ldr	r5, [r6, #8]
 8004daa:	e7df      	b.n	8004d6c <_vfiprintf_r+0x20>
 8004dac:	4b79      	ldr	r3, [pc, #484]	; (8004f94 <_vfiprintf_r+0x248>)
 8004dae:	429d      	cmp	r5, r3
 8004db0:	bf08      	it	eq
 8004db2:	68f5      	ldreq	r5, [r6, #12]
 8004db4:	e7da      	b.n	8004d6c <_vfiprintf_r+0x20>
 8004db6:	89ab      	ldrh	r3, [r5, #12]
 8004db8:	0598      	lsls	r0, r3, #22
 8004dba:	d4ed      	bmi.n	8004d98 <_vfiprintf_r+0x4c>
 8004dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dbe:	f000 fdf6 	bl	80059ae <__retarget_lock_release_recursive>
 8004dc2:	e7e9      	b.n	8004d98 <_vfiprintf_r+0x4c>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc8:	2320      	movs	r3, #32
 8004dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dce:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dd2:	2330      	movs	r3, #48	; 0x30
 8004dd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f98 <_vfiprintf_r+0x24c>
 8004dd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ddc:	f04f 0901 	mov.w	r9, #1
 8004de0:	4623      	mov	r3, r4
 8004de2:	469a      	mov	sl, r3
 8004de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004de8:	b10a      	cbz	r2, 8004dee <_vfiprintf_r+0xa2>
 8004dea:	2a25      	cmp	r2, #37	; 0x25
 8004dec:	d1f9      	bne.n	8004de2 <_vfiprintf_r+0x96>
 8004dee:	ebba 0b04 	subs.w	fp, sl, r4
 8004df2:	d00b      	beq.n	8004e0c <_vfiprintf_r+0xc0>
 8004df4:	465b      	mov	r3, fp
 8004df6:	4622      	mov	r2, r4
 8004df8:	4629      	mov	r1, r5
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	f7ff ff93 	bl	8004d26 <__sfputs_r>
 8004e00:	3001      	adds	r0, #1
 8004e02:	f000 80aa 	beq.w	8004f5a <_vfiprintf_r+0x20e>
 8004e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e08:	445a      	add	r2, fp
 8004e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 80a2 	beq.w	8004f5a <_vfiprintf_r+0x20e>
 8004e16:	2300      	movs	r3, #0
 8004e18:	f04f 32ff 	mov.w	r2, #4294967295
 8004e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e20:	f10a 0a01 	add.w	sl, sl, #1
 8004e24:	9304      	str	r3, [sp, #16]
 8004e26:	9307      	str	r3, [sp, #28]
 8004e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e2c:	931a      	str	r3, [sp, #104]	; 0x68
 8004e2e:	4654      	mov	r4, sl
 8004e30:	2205      	movs	r2, #5
 8004e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e36:	4858      	ldr	r0, [pc, #352]	; (8004f98 <_vfiprintf_r+0x24c>)
 8004e38:	f7fb fa02 	bl	8000240 <memchr>
 8004e3c:	9a04      	ldr	r2, [sp, #16]
 8004e3e:	b9d8      	cbnz	r0, 8004e78 <_vfiprintf_r+0x12c>
 8004e40:	06d1      	lsls	r1, r2, #27
 8004e42:	bf44      	itt	mi
 8004e44:	2320      	movmi	r3, #32
 8004e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e4a:	0713      	lsls	r3, r2, #28
 8004e4c:	bf44      	itt	mi
 8004e4e:	232b      	movmi	r3, #43	; 0x2b
 8004e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e54:	f89a 3000 	ldrb.w	r3, [sl]
 8004e58:	2b2a      	cmp	r3, #42	; 0x2a
 8004e5a:	d015      	beq.n	8004e88 <_vfiprintf_r+0x13c>
 8004e5c:	9a07      	ldr	r2, [sp, #28]
 8004e5e:	4654      	mov	r4, sl
 8004e60:	2000      	movs	r0, #0
 8004e62:	f04f 0c0a 	mov.w	ip, #10
 8004e66:	4621      	mov	r1, r4
 8004e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e6c:	3b30      	subs	r3, #48	; 0x30
 8004e6e:	2b09      	cmp	r3, #9
 8004e70:	d94e      	bls.n	8004f10 <_vfiprintf_r+0x1c4>
 8004e72:	b1b0      	cbz	r0, 8004ea2 <_vfiprintf_r+0x156>
 8004e74:	9207      	str	r2, [sp, #28]
 8004e76:	e014      	b.n	8004ea2 <_vfiprintf_r+0x156>
 8004e78:	eba0 0308 	sub.w	r3, r0, r8
 8004e7c:	fa09 f303 	lsl.w	r3, r9, r3
 8004e80:	4313      	orrs	r3, r2
 8004e82:	9304      	str	r3, [sp, #16]
 8004e84:	46a2      	mov	sl, r4
 8004e86:	e7d2      	b.n	8004e2e <_vfiprintf_r+0xe2>
 8004e88:	9b03      	ldr	r3, [sp, #12]
 8004e8a:	1d19      	adds	r1, r3, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	9103      	str	r1, [sp, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bfbb      	ittet	lt
 8004e94:	425b      	neglt	r3, r3
 8004e96:	f042 0202 	orrlt.w	r2, r2, #2
 8004e9a:	9307      	strge	r3, [sp, #28]
 8004e9c:	9307      	strlt	r3, [sp, #28]
 8004e9e:	bfb8      	it	lt
 8004ea0:	9204      	strlt	r2, [sp, #16]
 8004ea2:	7823      	ldrb	r3, [r4, #0]
 8004ea4:	2b2e      	cmp	r3, #46	; 0x2e
 8004ea6:	d10c      	bne.n	8004ec2 <_vfiprintf_r+0x176>
 8004ea8:	7863      	ldrb	r3, [r4, #1]
 8004eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8004eac:	d135      	bne.n	8004f1a <_vfiprintf_r+0x1ce>
 8004eae:	9b03      	ldr	r3, [sp, #12]
 8004eb0:	1d1a      	adds	r2, r3, #4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	9203      	str	r2, [sp, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	bfb8      	it	lt
 8004eba:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ebe:	3402      	adds	r4, #2
 8004ec0:	9305      	str	r3, [sp, #20]
 8004ec2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004fa8 <_vfiprintf_r+0x25c>
 8004ec6:	7821      	ldrb	r1, [r4, #0]
 8004ec8:	2203      	movs	r2, #3
 8004eca:	4650      	mov	r0, sl
 8004ecc:	f7fb f9b8 	bl	8000240 <memchr>
 8004ed0:	b140      	cbz	r0, 8004ee4 <_vfiprintf_r+0x198>
 8004ed2:	2340      	movs	r3, #64	; 0x40
 8004ed4:	eba0 000a 	sub.w	r0, r0, sl
 8004ed8:	fa03 f000 	lsl.w	r0, r3, r0
 8004edc:	9b04      	ldr	r3, [sp, #16]
 8004ede:	4303      	orrs	r3, r0
 8004ee0:	3401      	adds	r4, #1
 8004ee2:	9304      	str	r3, [sp, #16]
 8004ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee8:	482c      	ldr	r0, [pc, #176]	; (8004f9c <_vfiprintf_r+0x250>)
 8004eea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004eee:	2206      	movs	r2, #6
 8004ef0:	f7fb f9a6 	bl	8000240 <memchr>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	d03f      	beq.n	8004f78 <_vfiprintf_r+0x22c>
 8004ef8:	4b29      	ldr	r3, [pc, #164]	; (8004fa0 <_vfiprintf_r+0x254>)
 8004efa:	bb1b      	cbnz	r3, 8004f44 <_vfiprintf_r+0x1f8>
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	3307      	adds	r3, #7
 8004f00:	f023 0307 	bic.w	r3, r3, #7
 8004f04:	3308      	adds	r3, #8
 8004f06:	9303      	str	r3, [sp, #12]
 8004f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0a:	443b      	add	r3, r7
 8004f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0e:	e767      	b.n	8004de0 <_vfiprintf_r+0x94>
 8004f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f14:	460c      	mov	r4, r1
 8004f16:	2001      	movs	r0, #1
 8004f18:	e7a5      	b.n	8004e66 <_vfiprintf_r+0x11a>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	3401      	adds	r4, #1
 8004f1e:	9305      	str	r3, [sp, #20]
 8004f20:	4619      	mov	r1, r3
 8004f22:	f04f 0c0a 	mov.w	ip, #10
 8004f26:	4620      	mov	r0, r4
 8004f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f2c:	3a30      	subs	r2, #48	; 0x30
 8004f2e:	2a09      	cmp	r2, #9
 8004f30:	d903      	bls.n	8004f3a <_vfiprintf_r+0x1ee>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0c5      	beq.n	8004ec2 <_vfiprintf_r+0x176>
 8004f36:	9105      	str	r1, [sp, #20]
 8004f38:	e7c3      	b.n	8004ec2 <_vfiprintf_r+0x176>
 8004f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f3e:	4604      	mov	r4, r0
 8004f40:	2301      	movs	r3, #1
 8004f42:	e7f0      	b.n	8004f26 <_vfiprintf_r+0x1da>
 8004f44:	ab03      	add	r3, sp, #12
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	462a      	mov	r2, r5
 8004f4a:	4b16      	ldr	r3, [pc, #88]	; (8004fa4 <_vfiprintf_r+0x258>)
 8004f4c:	a904      	add	r1, sp, #16
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f3af 8000 	nop.w
 8004f54:	4607      	mov	r7, r0
 8004f56:	1c78      	adds	r0, r7, #1
 8004f58:	d1d6      	bne.n	8004f08 <_vfiprintf_r+0x1bc>
 8004f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f5c:	07d9      	lsls	r1, r3, #31
 8004f5e:	d405      	bmi.n	8004f6c <_vfiprintf_r+0x220>
 8004f60:	89ab      	ldrh	r3, [r5, #12]
 8004f62:	059a      	lsls	r2, r3, #22
 8004f64:	d402      	bmi.n	8004f6c <_vfiprintf_r+0x220>
 8004f66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f68:	f000 fd21 	bl	80059ae <__retarget_lock_release_recursive>
 8004f6c:	89ab      	ldrh	r3, [r5, #12]
 8004f6e:	065b      	lsls	r3, r3, #25
 8004f70:	f53f af12 	bmi.w	8004d98 <_vfiprintf_r+0x4c>
 8004f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f76:	e711      	b.n	8004d9c <_vfiprintf_r+0x50>
 8004f78:	ab03      	add	r3, sp, #12
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	462a      	mov	r2, r5
 8004f7e:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <_vfiprintf_r+0x258>)
 8004f80:	a904      	add	r1, sp, #16
 8004f82:	4630      	mov	r0, r6
 8004f84:	f000 f880 	bl	8005088 <_printf_i>
 8004f88:	e7e4      	b.n	8004f54 <_vfiprintf_r+0x208>
 8004f8a:	bf00      	nop
 8004f8c:	08005e30 	.word	0x08005e30
 8004f90:	08005e50 	.word	0x08005e50
 8004f94:	08005e10 	.word	0x08005e10
 8004f98:	08005ddc 	.word	0x08005ddc
 8004f9c:	08005de6 	.word	0x08005de6
 8004fa0:	00000000 	.word	0x00000000
 8004fa4:	08004d27 	.word	0x08004d27
 8004fa8:	08005de2 	.word	0x08005de2

08004fac <_printf_common>:
 8004fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb0:	4616      	mov	r6, r2
 8004fb2:	4699      	mov	r9, r3
 8004fb4:	688a      	ldr	r2, [r1, #8]
 8004fb6:	690b      	ldr	r3, [r1, #16]
 8004fb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	bfb8      	it	lt
 8004fc0:	4613      	movlt	r3, r2
 8004fc2:	6033      	str	r3, [r6, #0]
 8004fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fc8:	4607      	mov	r7, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	b10a      	cbz	r2, 8004fd2 <_printf_common+0x26>
 8004fce:	3301      	adds	r3, #1
 8004fd0:	6033      	str	r3, [r6, #0]
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	0699      	lsls	r1, r3, #26
 8004fd6:	bf42      	ittt	mi
 8004fd8:	6833      	ldrmi	r3, [r6, #0]
 8004fda:	3302      	addmi	r3, #2
 8004fdc:	6033      	strmi	r3, [r6, #0]
 8004fde:	6825      	ldr	r5, [r4, #0]
 8004fe0:	f015 0506 	ands.w	r5, r5, #6
 8004fe4:	d106      	bne.n	8004ff4 <_printf_common+0x48>
 8004fe6:	f104 0a19 	add.w	sl, r4, #25
 8004fea:	68e3      	ldr	r3, [r4, #12]
 8004fec:	6832      	ldr	r2, [r6, #0]
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	42ab      	cmp	r3, r5
 8004ff2:	dc26      	bgt.n	8005042 <_printf_common+0x96>
 8004ff4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ff8:	1e13      	subs	r3, r2, #0
 8004ffa:	6822      	ldr	r2, [r4, #0]
 8004ffc:	bf18      	it	ne
 8004ffe:	2301      	movne	r3, #1
 8005000:	0692      	lsls	r2, r2, #26
 8005002:	d42b      	bmi.n	800505c <_printf_common+0xb0>
 8005004:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005008:	4649      	mov	r1, r9
 800500a:	4638      	mov	r0, r7
 800500c:	47c0      	blx	r8
 800500e:	3001      	adds	r0, #1
 8005010:	d01e      	beq.n	8005050 <_printf_common+0xa4>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	68e5      	ldr	r5, [r4, #12]
 8005016:	6832      	ldr	r2, [r6, #0]
 8005018:	f003 0306 	and.w	r3, r3, #6
 800501c:	2b04      	cmp	r3, #4
 800501e:	bf08      	it	eq
 8005020:	1aad      	subeq	r5, r5, r2
 8005022:	68a3      	ldr	r3, [r4, #8]
 8005024:	6922      	ldr	r2, [r4, #16]
 8005026:	bf0c      	ite	eq
 8005028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800502c:	2500      	movne	r5, #0
 800502e:	4293      	cmp	r3, r2
 8005030:	bfc4      	itt	gt
 8005032:	1a9b      	subgt	r3, r3, r2
 8005034:	18ed      	addgt	r5, r5, r3
 8005036:	2600      	movs	r6, #0
 8005038:	341a      	adds	r4, #26
 800503a:	42b5      	cmp	r5, r6
 800503c:	d11a      	bne.n	8005074 <_printf_common+0xc8>
 800503e:	2000      	movs	r0, #0
 8005040:	e008      	b.n	8005054 <_printf_common+0xa8>
 8005042:	2301      	movs	r3, #1
 8005044:	4652      	mov	r2, sl
 8005046:	4649      	mov	r1, r9
 8005048:	4638      	mov	r0, r7
 800504a:	47c0      	blx	r8
 800504c:	3001      	adds	r0, #1
 800504e:	d103      	bne.n	8005058 <_printf_common+0xac>
 8005050:	f04f 30ff 	mov.w	r0, #4294967295
 8005054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005058:	3501      	adds	r5, #1
 800505a:	e7c6      	b.n	8004fea <_printf_common+0x3e>
 800505c:	18e1      	adds	r1, r4, r3
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	2030      	movs	r0, #48	; 0x30
 8005062:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005066:	4422      	add	r2, r4
 8005068:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800506c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005070:	3302      	adds	r3, #2
 8005072:	e7c7      	b.n	8005004 <_printf_common+0x58>
 8005074:	2301      	movs	r3, #1
 8005076:	4622      	mov	r2, r4
 8005078:	4649      	mov	r1, r9
 800507a:	4638      	mov	r0, r7
 800507c:	47c0      	blx	r8
 800507e:	3001      	adds	r0, #1
 8005080:	d0e6      	beq.n	8005050 <_printf_common+0xa4>
 8005082:	3601      	adds	r6, #1
 8005084:	e7d9      	b.n	800503a <_printf_common+0x8e>
	...

08005088 <_printf_i>:
 8005088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800508c:	7e0f      	ldrb	r7, [r1, #24]
 800508e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005090:	2f78      	cmp	r7, #120	; 0x78
 8005092:	4691      	mov	r9, r2
 8005094:	4680      	mov	r8, r0
 8005096:	460c      	mov	r4, r1
 8005098:	469a      	mov	sl, r3
 800509a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800509e:	d807      	bhi.n	80050b0 <_printf_i+0x28>
 80050a0:	2f62      	cmp	r7, #98	; 0x62
 80050a2:	d80a      	bhi.n	80050ba <_printf_i+0x32>
 80050a4:	2f00      	cmp	r7, #0
 80050a6:	f000 80d8 	beq.w	800525a <_printf_i+0x1d2>
 80050aa:	2f58      	cmp	r7, #88	; 0x58
 80050ac:	f000 80a3 	beq.w	80051f6 <_printf_i+0x16e>
 80050b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050b8:	e03a      	b.n	8005130 <_printf_i+0xa8>
 80050ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050be:	2b15      	cmp	r3, #21
 80050c0:	d8f6      	bhi.n	80050b0 <_printf_i+0x28>
 80050c2:	a101      	add	r1, pc, #4	; (adr r1, 80050c8 <_printf_i+0x40>)
 80050c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050c8:	08005121 	.word	0x08005121
 80050cc:	08005135 	.word	0x08005135
 80050d0:	080050b1 	.word	0x080050b1
 80050d4:	080050b1 	.word	0x080050b1
 80050d8:	080050b1 	.word	0x080050b1
 80050dc:	080050b1 	.word	0x080050b1
 80050e0:	08005135 	.word	0x08005135
 80050e4:	080050b1 	.word	0x080050b1
 80050e8:	080050b1 	.word	0x080050b1
 80050ec:	080050b1 	.word	0x080050b1
 80050f0:	080050b1 	.word	0x080050b1
 80050f4:	08005241 	.word	0x08005241
 80050f8:	08005165 	.word	0x08005165
 80050fc:	08005223 	.word	0x08005223
 8005100:	080050b1 	.word	0x080050b1
 8005104:	080050b1 	.word	0x080050b1
 8005108:	08005263 	.word	0x08005263
 800510c:	080050b1 	.word	0x080050b1
 8005110:	08005165 	.word	0x08005165
 8005114:	080050b1 	.word	0x080050b1
 8005118:	080050b1 	.word	0x080050b1
 800511c:	0800522b 	.word	0x0800522b
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	1d1a      	adds	r2, r3, #4
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	602a      	str	r2, [r5, #0]
 8005128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800512c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005130:	2301      	movs	r3, #1
 8005132:	e0a3      	b.n	800527c <_printf_i+0x1f4>
 8005134:	6820      	ldr	r0, [r4, #0]
 8005136:	6829      	ldr	r1, [r5, #0]
 8005138:	0606      	lsls	r6, r0, #24
 800513a:	f101 0304 	add.w	r3, r1, #4
 800513e:	d50a      	bpl.n	8005156 <_printf_i+0xce>
 8005140:	680e      	ldr	r6, [r1, #0]
 8005142:	602b      	str	r3, [r5, #0]
 8005144:	2e00      	cmp	r6, #0
 8005146:	da03      	bge.n	8005150 <_printf_i+0xc8>
 8005148:	232d      	movs	r3, #45	; 0x2d
 800514a:	4276      	negs	r6, r6
 800514c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005150:	485e      	ldr	r0, [pc, #376]	; (80052cc <_printf_i+0x244>)
 8005152:	230a      	movs	r3, #10
 8005154:	e019      	b.n	800518a <_printf_i+0x102>
 8005156:	680e      	ldr	r6, [r1, #0]
 8005158:	602b      	str	r3, [r5, #0]
 800515a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800515e:	bf18      	it	ne
 8005160:	b236      	sxthne	r6, r6
 8005162:	e7ef      	b.n	8005144 <_printf_i+0xbc>
 8005164:	682b      	ldr	r3, [r5, #0]
 8005166:	6820      	ldr	r0, [r4, #0]
 8005168:	1d19      	adds	r1, r3, #4
 800516a:	6029      	str	r1, [r5, #0]
 800516c:	0601      	lsls	r1, r0, #24
 800516e:	d501      	bpl.n	8005174 <_printf_i+0xec>
 8005170:	681e      	ldr	r6, [r3, #0]
 8005172:	e002      	b.n	800517a <_printf_i+0xf2>
 8005174:	0646      	lsls	r6, r0, #25
 8005176:	d5fb      	bpl.n	8005170 <_printf_i+0xe8>
 8005178:	881e      	ldrh	r6, [r3, #0]
 800517a:	4854      	ldr	r0, [pc, #336]	; (80052cc <_printf_i+0x244>)
 800517c:	2f6f      	cmp	r7, #111	; 0x6f
 800517e:	bf0c      	ite	eq
 8005180:	2308      	moveq	r3, #8
 8005182:	230a      	movne	r3, #10
 8005184:	2100      	movs	r1, #0
 8005186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800518a:	6865      	ldr	r5, [r4, #4]
 800518c:	60a5      	str	r5, [r4, #8]
 800518e:	2d00      	cmp	r5, #0
 8005190:	bfa2      	ittt	ge
 8005192:	6821      	ldrge	r1, [r4, #0]
 8005194:	f021 0104 	bicge.w	r1, r1, #4
 8005198:	6021      	strge	r1, [r4, #0]
 800519a:	b90e      	cbnz	r6, 80051a0 <_printf_i+0x118>
 800519c:	2d00      	cmp	r5, #0
 800519e:	d04d      	beq.n	800523c <_printf_i+0x1b4>
 80051a0:	4615      	mov	r5, r2
 80051a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80051a6:	fb03 6711 	mls	r7, r3, r1, r6
 80051aa:	5dc7      	ldrb	r7, [r0, r7]
 80051ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051b0:	4637      	mov	r7, r6
 80051b2:	42bb      	cmp	r3, r7
 80051b4:	460e      	mov	r6, r1
 80051b6:	d9f4      	bls.n	80051a2 <_printf_i+0x11a>
 80051b8:	2b08      	cmp	r3, #8
 80051ba:	d10b      	bne.n	80051d4 <_printf_i+0x14c>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	07de      	lsls	r6, r3, #31
 80051c0:	d508      	bpl.n	80051d4 <_printf_i+0x14c>
 80051c2:	6923      	ldr	r3, [r4, #16]
 80051c4:	6861      	ldr	r1, [r4, #4]
 80051c6:	4299      	cmp	r1, r3
 80051c8:	bfde      	ittt	le
 80051ca:	2330      	movle	r3, #48	; 0x30
 80051cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051d4:	1b52      	subs	r2, r2, r5
 80051d6:	6122      	str	r2, [r4, #16]
 80051d8:	f8cd a000 	str.w	sl, [sp]
 80051dc:	464b      	mov	r3, r9
 80051de:	aa03      	add	r2, sp, #12
 80051e0:	4621      	mov	r1, r4
 80051e2:	4640      	mov	r0, r8
 80051e4:	f7ff fee2 	bl	8004fac <_printf_common>
 80051e8:	3001      	adds	r0, #1
 80051ea:	d14c      	bne.n	8005286 <_printf_i+0x1fe>
 80051ec:	f04f 30ff 	mov.w	r0, #4294967295
 80051f0:	b004      	add	sp, #16
 80051f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f6:	4835      	ldr	r0, [pc, #212]	; (80052cc <_printf_i+0x244>)
 80051f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80051fc:	6829      	ldr	r1, [r5, #0]
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	f851 6b04 	ldr.w	r6, [r1], #4
 8005204:	6029      	str	r1, [r5, #0]
 8005206:	061d      	lsls	r5, r3, #24
 8005208:	d514      	bpl.n	8005234 <_printf_i+0x1ac>
 800520a:	07df      	lsls	r7, r3, #31
 800520c:	bf44      	itt	mi
 800520e:	f043 0320 	orrmi.w	r3, r3, #32
 8005212:	6023      	strmi	r3, [r4, #0]
 8005214:	b91e      	cbnz	r6, 800521e <_printf_i+0x196>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	f023 0320 	bic.w	r3, r3, #32
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	2310      	movs	r3, #16
 8005220:	e7b0      	b.n	8005184 <_printf_i+0xfc>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	f043 0320 	orr.w	r3, r3, #32
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	2378      	movs	r3, #120	; 0x78
 800522c:	4828      	ldr	r0, [pc, #160]	; (80052d0 <_printf_i+0x248>)
 800522e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005232:	e7e3      	b.n	80051fc <_printf_i+0x174>
 8005234:	0659      	lsls	r1, r3, #25
 8005236:	bf48      	it	mi
 8005238:	b2b6      	uxthmi	r6, r6
 800523a:	e7e6      	b.n	800520a <_printf_i+0x182>
 800523c:	4615      	mov	r5, r2
 800523e:	e7bb      	b.n	80051b8 <_printf_i+0x130>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	6826      	ldr	r6, [r4, #0]
 8005244:	6961      	ldr	r1, [r4, #20]
 8005246:	1d18      	adds	r0, r3, #4
 8005248:	6028      	str	r0, [r5, #0]
 800524a:	0635      	lsls	r5, r6, #24
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	d501      	bpl.n	8005254 <_printf_i+0x1cc>
 8005250:	6019      	str	r1, [r3, #0]
 8005252:	e002      	b.n	800525a <_printf_i+0x1d2>
 8005254:	0670      	lsls	r0, r6, #25
 8005256:	d5fb      	bpl.n	8005250 <_printf_i+0x1c8>
 8005258:	8019      	strh	r1, [r3, #0]
 800525a:	2300      	movs	r3, #0
 800525c:	6123      	str	r3, [r4, #16]
 800525e:	4615      	mov	r5, r2
 8005260:	e7ba      	b.n	80051d8 <_printf_i+0x150>
 8005262:	682b      	ldr	r3, [r5, #0]
 8005264:	1d1a      	adds	r2, r3, #4
 8005266:	602a      	str	r2, [r5, #0]
 8005268:	681d      	ldr	r5, [r3, #0]
 800526a:	6862      	ldr	r2, [r4, #4]
 800526c:	2100      	movs	r1, #0
 800526e:	4628      	mov	r0, r5
 8005270:	f7fa ffe6 	bl	8000240 <memchr>
 8005274:	b108      	cbz	r0, 800527a <_printf_i+0x1f2>
 8005276:	1b40      	subs	r0, r0, r5
 8005278:	6060      	str	r0, [r4, #4]
 800527a:	6863      	ldr	r3, [r4, #4]
 800527c:	6123      	str	r3, [r4, #16]
 800527e:	2300      	movs	r3, #0
 8005280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005284:	e7a8      	b.n	80051d8 <_printf_i+0x150>
 8005286:	6923      	ldr	r3, [r4, #16]
 8005288:	462a      	mov	r2, r5
 800528a:	4649      	mov	r1, r9
 800528c:	4640      	mov	r0, r8
 800528e:	47d0      	blx	sl
 8005290:	3001      	adds	r0, #1
 8005292:	d0ab      	beq.n	80051ec <_printf_i+0x164>
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	079b      	lsls	r3, r3, #30
 8005298:	d413      	bmi.n	80052c2 <_printf_i+0x23a>
 800529a:	68e0      	ldr	r0, [r4, #12]
 800529c:	9b03      	ldr	r3, [sp, #12]
 800529e:	4298      	cmp	r0, r3
 80052a0:	bfb8      	it	lt
 80052a2:	4618      	movlt	r0, r3
 80052a4:	e7a4      	b.n	80051f0 <_printf_i+0x168>
 80052a6:	2301      	movs	r3, #1
 80052a8:	4632      	mov	r2, r6
 80052aa:	4649      	mov	r1, r9
 80052ac:	4640      	mov	r0, r8
 80052ae:	47d0      	blx	sl
 80052b0:	3001      	adds	r0, #1
 80052b2:	d09b      	beq.n	80051ec <_printf_i+0x164>
 80052b4:	3501      	adds	r5, #1
 80052b6:	68e3      	ldr	r3, [r4, #12]
 80052b8:	9903      	ldr	r1, [sp, #12]
 80052ba:	1a5b      	subs	r3, r3, r1
 80052bc:	42ab      	cmp	r3, r5
 80052be:	dcf2      	bgt.n	80052a6 <_printf_i+0x21e>
 80052c0:	e7eb      	b.n	800529a <_printf_i+0x212>
 80052c2:	2500      	movs	r5, #0
 80052c4:	f104 0619 	add.w	r6, r4, #25
 80052c8:	e7f5      	b.n	80052b6 <_printf_i+0x22e>
 80052ca:	bf00      	nop
 80052cc:	08005ded 	.word	0x08005ded
 80052d0:	08005dfe 	.word	0x08005dfe

080052d4 <iprintf>:
 80052d4:	b40f      	push	{r0, r1, r2, r3}
 80052d6:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <iprintf+0x2c>)
 80052d8:	b513      	push	{r0, r1, r4, lr}
 80052da:	681c      	ldr	r4, [r3, #0]
 80052dc:	b124      	cbz	r4, 80052e8 <iprintf+0x14>
 80052de:	69a3      	ldr	r3, [r4, #24]
 80052e0:	b913      	cbnz	r3, 80052e8 <iprintf+0x14>
 80052e2:	4620      	mov	r0, r4
 80052e4:	f000 fac4 	bl	8005870 <__sinit>
 80052e8:	ab05      	add	r3, sp, #20
 80052ea:	9a04      	ldr	r2, [sp, #16]
 80052ec:	68a1      	ldr	r1, [r4, #8]
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	4620      	mov	r0, r4
 80052f2:	f7ff fd2b 	bl	8004d4c <_vfiprintf_r>
 80052f6:	b002      	add	sp, #8
 80052f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052fc:	b004      	add	sp, #16
 80052fe:	4770      	bx	lr
 8005300:	20000010 	.word	0x20000010

08005304 <_puts_r>:
 8005304:	b570      	push	{r4, r5, r6, lr}
 8005306:	460e      	mov	r6, r1
 8005308:	4605      	mov	r5, r0
 800530a:	b118      	cbz	r0, 8005314 <_puts_r+0x10>
 800530c:	6983      	ldr	r3, [r0, #24]
 800530e:	b90b      	cbnz	r3, 8005314 <_puts_r+0x10>
 8005310:	f000 faae 	bl	8005870 <__sinit>
 8005314:	69ab      	ldr	r3, [r5, #24]
 8005316:	68ac      	ldr	r4, [r5, #8]
 8005318:	b913      	cbnz	r3, 8005320 <_puts_r+0x1c>
 800531a:	4628      	mov	r0, r5
 800531c:	f000 faa8 	bl	8005870 <__sinit>
 8005320:	4b2c      	ldr	r3, [pc, #176]	; (80053d4 <_puts_r+0xd0>)
 8005322:	429c      	cmp	r4, r3
 8005324:	d120      	bne.n	8005368 <_puts_r+0x64>
 8005326:	686c      	ldr	r4, [r5, #4]
 8005328:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800532a:	07db      	lsls	r3, r3, #31
 800532c:	d405      	bmi.n	800533a <_puts_r+0x36>
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	0598      	lsls	r0, r3, #22
 8005332:	d402      	bmi.n	800533a <_puts_r+0x36>
 8005334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005336:	f000 fb39 	bl	80059ac <__retarget_lock_acquire_recursive>
 800533a:	89a3      	ldrh	r3, [r4, #12]
 800533c:	0719      	lsls	r1, r3, #28
 800533e:	d51d      	bpl.n	800537c <_puts_r+0x78>
 8005340:	6923      	ldr	r3, [r4, #16]
 8005342:	b1db      	cbz	r3, 800537c <_puts_r+0x78>
 8005344:	3e01      	subs	r6, #1
 8005346:	68a3      	ldr	r3, [r4, #8]
 8005348:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800534c:	3b01      	subs	r3, #1
 800534e:	60a3      	str	r3, [r4, #8]
 8005350:	bb39      	cbnz	r1, 80053a2 <_puts_r+0x9e>
 8005352:	2b00      	cmp	r3, #0
 8005354:	da38      	bge.n	80053c8 <_puts_r+0xc4>
 8005356:	4622      	mov	r2, r4
 8005358:	210a      	movs	r1, #10
 800535a:	4628      	mov	r0, r5
 800535c:	f000 f88c 	bl	8005478 <__swbuf_r>
 8005360:	3001      	adds	r0, #1
 8005362:	d011      	beq.n	8005388 <_puts_r+0x84>
 8005364:	250a      	movs	r5, #10
 8005366:	e011      	b.n	800538c <_puts_r+0x88>
 8005368:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <_puts_r+0xd4>)
 800536a:	429c      	cmp	r4, r3
 800536c:	d101      	bne.n	8005372 <_puts_r+0x6e>
 800536e:	68ac      	ldr	r4, [r5, #8]
 8005370:	e7da      	b.n	8005328 <_puts_r+0x24>
 8005372:	4b1a      	ldr	r3, [pc, #104]	; (80053dc <_puts_r+0xd8>)
 8005374:	429c      	cmp	r4, r3
 8005376:	bf08      	it	eq
 8005378:	68ec      	ldreq	r4, [r5, #12]
 800537a:	e7d5      	b.n	8005328 <_puts_r+0x24>
 800537c:	4621      	mov	r1, r4
 800537e:	4628      	mov	r0, r5
 8005380:	f000 f8de 	bl	8005540 <__swsetup_r>
 8005384:	2800      	cmp	r0, #0
 8005386:	d0dd      	beq.n	8005344 <_puts_r+0x40>
 8005388:	f04f 35ff 	mov.w	r5, #4294967295
 800538c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800538e:	07da      	lsls	r2, r3, #31
 8005390:	d405      	bmi.n	800539e <_puts_r+0x9a>
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	059b      	lsls	r3, r3, #22
 8005396:	d402      	bmi.n	800539e <_puts_r+0x9a>
 8005398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800539a:	f000 fb08 	bl	80059ae <__retarget_lock_release_recursive>
 800539e:	4628      	mov	r0, r5
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	da04      	bge.n	80053b0 <_puts_r+0xac>
 80053a6:	69a2      	ldr	r2, [r4, #24]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	dc06      	bgt.n	80053ba <_puts_r+0xb6>
 80053ac:	290a      	cmp	r1, #10
 80053ae:	d004      	beq.n	80053ba <_puts_r+0xb6>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	6022      	str	r2, [r4, #0]
 80053b6:	7019      	strb	r1, [r3, #0]
 80053b8:	e7c5      	b.n	8005346 <_puts_r+0x42>
 80053ba:	4622      	mov	r2, r4
 80053bc:	4628      	mov	r0, r5
 80053be:	f000 f85b 	bl	8005478 <__swbuf_r>
 80053c2:	3001      	adds	r0, #1
 80053c4:	d1bf      	bne.n	8005346 <_puts_r+0x42>
 80053c6:	e7df      	b.n	8005388 <_puts_r+0x84>
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	250a      	movs	r5, #10
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	6022      	str	r2, [r4, #0]
 80053d0:	701d      	strb	r5, [r3, #0]
 80053d2:	e7db      	b.n	800538c <_puts_r+0x88>
 80053d4:	08005e30 	.word	0x08005e30
 80053d8:	08005e50 	.word	0x08005e50
 80053dc:	08005e10 	.word	0x08005e10

080053e0 <puts>:
 80053e0:	4b02      	ldr	r3, [pc, #8]	; (80053ec <puts+0xc>)
 80053e2:	4601      	mov	r1, r0
 80053e4:	6818      	ldr	r0, [r3, #0]
 80053e6:	f7ff bf8d 	b.w	8005304 <_puts_r>
 80053ea:	bf00      	nop
 80053ec:	20000010 	.word	0x20000010

080053f0 <__sread>:
 80053f0:	b510      	push	{r4, lr}
 80053f2:	460c      	mov	r4, r1
 80053f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f8:	f000 fc32 	bl	8005c60 <_read_r>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	bfab      	itete	ge
 8005400:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005402:	89a3      	ldrhlt	r3, [r4, #12]
 8005404:	181b      	addge	r3, r3, r0
 8005406:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800540a:	bfac      	ite	ge
 800540c:	6563      	strge	r3, [r4, #84]	; 0x54
 800540e:	81a3      	strhlt	r3, [r4, #12]
 8005410:	bd10      	pop	{r4, pc}

08005412 <__swrite>:
 8005412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005416:	461f      	mov	r7, r3
 8005418:	898b      	ldrh	r3, [r1, #12]
 800541a:	05db      	lsls	r3, r3, #23
 800541c:	4605      	mov	r5, r0
 800541e:	460c      	mov	r4, r1
 8005420:	4616      	mov	r6, r2
 8005422:	d505      	bpl.n	8005430 <__swrite+0x1e>
 8005424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005428:	2302      	movs	r3, #2
 800542a:	2200      	movs	r2, #0
 800542c:	f000 fac0 	bl	80059b0 <_lseek_r>
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800543a:	81a3      	strh	r3, [r4, #12]
 800543c:	4632      	mov	r2, r6
 800543e:	463b      	mov	r3, r7
 8005440:	4628      	mov	r0, r5
 8005442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005446:	f000 b869 	b.w	800551c <_write_r>

0800544a <__sseek>:
 800544a:	b510      	push	{r4, lr}
 800544c:	460c      	mov	r4, r1
 800544e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005452:	f000 faad 	bl	80059b0 <_lseek_r>
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	bf15      	itete	ne
 800545c:	6560      	strne	r0, [r4, #84]	; 0x54
 800545e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005462:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005466:	81a3      	strheq	r3, [r4, #12]
 8005468:	bf18      	it	ne
 800546a:	81a3      	strhne	r3, [r4, #12]
 800546c:	bd10      	pop	{r4, pc}

0800546e <__sclose>:
 800546e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005472:	f000 b8d3 	b.w	800561c <_close_r>
	...

08005478 <__swbuf_r>:
 8005478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547a:	460e      	mov	r6, r1
 800547c:	4614      	mov	r4, r2
 800547e:	4605      	mov	r5, r0
 8005480:	b118      	cbz	r0, 800548a <__swbuf_r+0x12>
 8005482:	6983      	ldr	r3, [r0, #24]
 8005484:	b90b      	cbnz	r3, 800548a <__swbuf_r+0x12>
 8005486:	f000 f9f3 	bl	8005870 <__sinit>
 800548a:	4b21      	ldr	r3, [pc, #132]	; (8005510 <__swbuf_r+0x98>)
 800548c:	429c      	cmp	r4, r3
 800548e:	d12b      	bne.n	80054e8 <__swbuf_r+0x70>
 8005490:	686c      	ldr	r4, [r5, #4]
 8005492:	69a3      	ldr	r3, [r4, #24]
 8005494:	60a3      	str	r3, [r4, #8]
 8005496:	89a3      	ldrh	r3, [r4, #12]
 8005498:	071a      	lsls	r2, r3, #28
 800549a:	d52f      	bpl.n	80054fc <__swbuf_r+0x84>
 800549c:	6923      	ldr	r3, [r4, #16]
 800549e:	b36b      	cbz	r3, 80054fc <__swbuf_r+0x84>
 80054a0:	6923      	ldr	r3, [r4, #16]
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	1ac0      	subs	r0, r0, r3
 80054a6:	6963      	ldr	r3, [r4, #20]
 80054a8:	b2f6      	uxtb	r6, r6
 80054aa:	4283      	cmp	r3, r0
 80054ac:	4637      	mov	r7, r6
 80054ae:	dc04      	bgt.n	80054ba <__swbuf_r+0x42>
 80054b0:	4621      	mov	r1, r4
 80054b2:	4628      	mov	r0, r5
 80054b4:	f000 f948 	bl	8005748 <_fflush_r>
 80054b8:	bb30      	cbnz	r0, 8005508 <__swbuf_r+0x90>
 80054ba:	68a3      	ldr	r3, [r4, #8]
 80054bc:	3b01      	subs	r3, #1
 80054be:	60a3      	str	r3, [r4, #8]
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	6022      	str	r2, [r4, #0]
 80054c6:	701e      	strb	r6, [r3, #0]
 80054c8:	6963      	ldr	r3, [r4, #20]
 80054ca:	3001      	adds	r0, #1
 80054cc:	4283      	cmp	r3, r0
 80054ce:	d004      	beq.n	80054da <__swbuf_r+0x62>
 80054d0:	89a3      	ldrh	r3, [r4, #12]
 80054d2:	07db      	lsls	r3, r3, #31
 80054d4:	d506      	bpl.n	80054e4 <__swbuf_r+0x6c>
 80054d6:	2e0a      	cmp	r6, #10
 80054d8:	d104      	bne.n	80054e4 <__swbuf_r+0x6c>
 80054da:	4621      	mov	r1, r4
 80054dc:	4628      	mov	r0, r5
 80054de:	f000 f933 	bl	8005748 <_fflush_r>
 80054e2:	b988      	cbnz	r0, 8005508 <__swbuf_r+0x90>
 80054e4:	4638      	mov	r0, r7
 80054e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054e8:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <__swbuf_r+0x9c>)
 80054ea:	429c      	cmp	r4, r3
 80054ec:	d101      	bne.n	80054f2 <__swbuf_r+0x7a>
 80054ee:	68ac      	ldr	r4, [r5, #8]
 80054f0:	e7cf      	b.n	8005492 <__swbuf_r+0x1a>
 80054f2:	4b09      	ldr	r3, [pc, #36]	; (8005518 <__swbuf_r+0xa0>)
 80054f4:	429c      	cmp	r4, r3
 80054f6:	bf08      	it	eq
 80054f8:	68ec      	ldreq	r4, [r5, #12]
 80054fa:	e7ca      	b.n	8005492 <__swbuf_r+0x1a>
 80054fc:	4621      	mov	r1, r4
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 f81e 	bl	8005540 <__swsetup_r>
 8005504:	2800      	cmp	r0, #0
 8005506:	d0cb      	beq.n	80054a0 <__swbuf_r+0x28>
 8005508:	f04f 37ff 	mov.w	r7, #4294967295
 800550c:	e7ea      	b.n	80054e4 <__swbuf_r+0x6c>
 800550e:	bf00      	nop
 8005510:	08005e30 	.word	0x08005e30
 8005514:	08005e50 	.word	0x08005e50
 8005518:	08005e10 	.word	0x08005e10

0800551c <_write_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d07      	ldr	r5, [pc, #28]	; (800553c <_write_r+0x20>)
 8005520:	4604      	mov	r4, r0
 8005522:	4608      	mov	r0, r1
 8005524:	4611      	mov	r1, r2
 8005526:	2200      	movs	r2, #0
 8005528:	602a      	str	r2, [r5, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	f7fb fbab 	bl	8000c86 <_write>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_write_r+0x1e>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_write_r+0x1e>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	2000a574 	.word	0x2000a574

08005540 <__swsetup_r>:
 8005540:	4b32      	ldr	r3, [pc, #200]	; (800560c <__swsetup_r+0xcc>)
 8005542:	b570      	push	{r4, r5, r6, lr}
 8005544:	681d      	ldr	r5, [r3, #0]
 8005546:	4606      	mov	r6, r0
 8005548:	460c      	mov	r4, r1
 800554a:	b125      	cbz	r5, 8005556 <__swsetup_r+0x16>
 800554c:	69ab      	ldr	r3, [r5, #24]
 800554e:	b913      	cbnz	r3, 8005556 <__swsetup_r+0x16>
 8005550:	4628      	mov	r0, r5
 8005552:	f000 f98d 	bl	8005870 <__sinit>
 8005556:	4b2e      	ldr	r3, [pc, #184]	; (8005610 <__swsetup_r+0xd0>)
 8005558:	429c      	cmp	r4, r3
 800555a:	d10f      	bne.n	800557c <__swsetup_r+0x3c>
 800555c:	686c      	ldr	r4, [r5, #4]
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005564:	0719      	lsls	r1, r3, #28
 8005566:	d42c      	bmi.n	80055c2 <__swsetup_r+0x82>
 8005568:	06dd      	lsls	r5, r3, #27
 800556a:	d411      	bmi.n	8005590 <__swsetup_r+0x50>
 800556c:	2309      	movs	r3, #9
 800556e:	6033      	str	r3, [r6, #0]
 8005570:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005574:	81a3      	strh	r3, [r4, #12]
 8005576:	f04f 30ff 	mov.w	r0, #4294967295
 800557a:	e03e      	b.n	80055fa <__swsetup_r+0xba>
 800557c:	4b25      	ldr	r3, [pc, #148]	; (8005614 <__swsetup_r+0xd4>)
 800557e:	429c      	cmp	r4, r3
 8005580:	d101      	bne.n	8005586 <__swsetup_r+0x46>
 8005582:	68ac      	ldr	r4, [r5, #8]
 8005584:	e7eb      	b.n	800555e <__swsetup_r+0x1e>
 8005586:	4b24      	ldr	r3, [pc, #144]	; (8005618 <__swsetup_r+0xd8>)
 8005588:	429c      	cmp	r4, r3
 800558a:	bf08      	it	eq
 800558c:	68ec      	ldreq	r4, [r5, #12]
 800558e:	e7e6      	b.n	800555e <__swsetup_r+0x1e>
 8005590:	0758      	lsls	r0, r3, #29
 8005592:	d512      	bpl.n	80055ba <__swsetup_r+0x7a>
 8005594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005596:	b141      	cbz	r1, 80055aa <__swsetup_r+0x6a>
 8005598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800559c:	4299      	cmp	r1, r3
 800559e:	d002      	beq.n	80055a6 <__swsetup_r+0x66>
 80055a0:	4630      	mov	r0, r6
 80055a2:	f000 fa7d 	bl	8005aa0 <_free_r>
 80055a6:	2300      	movs	r3, #0
 80055a8:	6363      	str	r3, [r4, #52]	; 0x34
 80055aa:	89a3      	ldrh	r3, [r4, #12]
 80055ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055b0:	81a3      	strh	r3, [r4, #12]
 80055b2:	2300      	movs	r3, #0
 80055b4:	6063      	str	r3, [r4, #4]
 80055b6:	6923      	ldr	r3, [r4, #16]
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	f043 0308 	orr.w	r3, r3, #8
 80055c0:	81a3      	strh	r3, [r4, #12]
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	b94b      	cbnz	r3, 80055da <__swsetup_r+0x9a>
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d0:	d003      	beq.n	80055da <__swsetup_r+0x9a>
 80055d2:	4621      	mov	r1, r4
 80055d4:	4630      	mov	r0, r6
 80055d6:	f000 fa23 	bl	8005a20 <__smakebuf_r>
 80055da:	89a0      	ldrh	r0, [r4, #12]
 80055dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055e0:	f010 0301 	ands.w	r3, r0, #1
 80055e4:	d00a      	beq.n	80055fc <__swsetup_r+0xbc>
 80055e6:	2300      	movs	r3, #0
 80055e8:	60a3      	str	r3, [r4, #8]
 80055ea:	6963      	ldr	r3, [r4, #20]
 80055ec:	425b      	negs	r3, r3
 80055ee:	61a3      	str	r3, [r4, #24]
 80055f0:	6923      	ldr	r3, [r4, #16]
 80055f2:	b943      	cbnz	r3, 8005606 <__swsetup_r+0xc6>
 80055f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055f8:	d1ba      	bne.n	8005570 <__swsetup_r+0x30>
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	0781      	lsls	r1, r0, #30
 80055fe:	bf58      	it	pl
 8005600:	6963      	ldrpl	r3, [r4, #20]
 8005602:	60a3      	str	r3, [r4, #8]
 8005604:	e7f4      	b.n	80055f0 <__swsetup_r+0xb0>
 8005606:	2000      	movs	r0, #0
 8005608:	e7f7      	b.n	80055fa <__swsetup_r+0xba>
 800560a:	bf00      	nop
 800560c:	20000010 	.word	0x20000010
 8005610:	08005e30 	.word	0x08005e30
 8005614:	08005e50 	.word	0x08005e50
 8005618:	08005e10 	.word	0x08005e10

0800561c <_close_r>:
 800561c:	b538      	push	{r3, r4, r5, lr}
 800561e:	4d06      	ldr	r5, [pc, #24]	; (8005638 <_close_r+0x1c>)
 8005620:	2300      	movs	r3, #0
 8005622:	4604      	mov	r4, r0
 8005624:	4608      	mov	r0, r1
 8005626:	602b      	str	r3, [r5, #0]
 8005628:	f7fb fb49 	bl	8000cbe <_close>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_close_r+0x1a>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_close_r+0x1a>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	2000a574 	.word	0x2000a574

0800563c <__sflush_r>:
 800563c:	898a      	ldrh	r2, [r1, #12]
 800563e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005642:	4605      	mov	r5, r0
 8005644:	0710      	lsls	r0, r2, #28
 8005646:	460c      	mov	r4, r1
 8005648:	d458      	bmi.n	80056fc <__sflush_r+0xc0>
 800564a:	684b      	ldr	r3, [r1, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	dc05      	bgt.n	800565c <__sflush_r+0x20>
 8005650:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	dc02      	bgt.n	800565c <__sflush_r+0x20>
 8005656:	2000      	movs	r0, #0
 8005658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800565c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800565e:	2e00      	cmp	r6, #0
 8005660:	d0f9      	beq.n	8005656 <__sflush_r+0x1a>
 8005662:	2300      	movs	r3, #0
 8005664:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005668:	682f      	ldr	r7, [r5, #0]
 800566a:	602b      	str	r3, [r5, #0]
 800566c:	d032      	beq.n	80056d4 <__sflush_r+0x98>
 800566e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	075a      	lsls	r2, r3, #29
 8005674:	d505      	bpl.n	8005682 <__sflush_r+0x46>
 8005676:	6863      	ldr	r3, [r4, #4]
 8005678:	1ac0      	subs	r0, r0, r3
 800567a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800567c:	b10b      	cbz	r3, 8005682 <__sflush_r+0x46>
 800567e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005680:	1ac0      	subs	r0, r0, r3
 8005682:	2300      	movs	r3, #0
 8005684:	4602      	mov	r2, r0
 8005686:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005688:	6a21      	ldr	r1, [r4, #32]
 800568a:	4628      	mov	r0, r5
 800568c:	47b0      	blx	r6
 800568e:	1c43      	adds	r3, r0, #1
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	d106      	bne.n	80056a2 <__sflush_r+0x66>
 8005694:	6829      	ldr	r1, [r5, #0]
 8005696:	291d      	cmp	r1, #29
 8005698:	d82c      	bhi.n	80056f4 <__sflush_r+0xb8>
 800569a:	4a2a      	ldr	r2, [pc, #168]	; (8005744 <__sflush_r+0x108>)
 800569c:	40ca      	lsrs	r2, r1
 800569e:	07d6      	lsls	r6, r2, #31
 80056a0:	d528      	bpl.n	80056f4 <__sflush_r+0xb8>
 80056a2:	2200      	movs	r2, #0
 80056a4:	6062      	str	r2, [r4, #4]
 80056a6:	04d9      	lsls	r1, r3, #19
 80056a8:	6922      	ldr	r2, [r4, #16]
 80056aa:	6022      	str	r2, [r4, #0]
 80056ac:	d504      	bpl.n	80056b8 <__sflush_r+0x7c>
 80056ae:	1c42      	adds	r2, r0, #1
 80056b0:	d101      	bne.n	80056b6 <__sflush_r+0x7a>
 80056b2:	682b      	ldr	r3, [r5, #0]
 80056b4:	b903      	cbnz	r3, 80056b8 <__sflush_r+0x7c>
 80056b6:	6560      	str	r0, [r4, #84]	; 0x54
 80056b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056ba:	602f      	str	r7, [r5, #0]
 80056bc:	2900      	cmp	r1, #0
 80056be:	d0ca      	beq.n	8005656 <__sflush_r+0x1a>
 80056c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056c4:	4299      	cmp	r1, r3
 80056c6:	d002      	beq.n	80056ce <__sflush_r+0x92>
 80056c8:	4628      	mov	r0, r5
 80056ca:	f000 f9e9 	bl	8005aa0 <_free_r>
 80056ce:	2000      	movs	r0, #0
 80056d0:	6360      	str	r0, [r4, #52]	; 0x34
 80056d2:	e7c1      	b.n	8005658 <__sflush_r+0x1c>
 80056d4:	6a21      	ldr	r1, [r4, #32]
 80056d6:	2301      	movs	r3, #1
 80056d8:	4628      	mov	r0, r5
 80056da:	47b0      	blx	r6
 80056dc:	1c41      	adds	r1, r0, #1
 80056de:	d1c7      	bne.n	8005670 <__sflush_r+0x34>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0c4      	beq.n	8005670 <__sflush_r+0x34>
 80056e6:	2b1d      	cmp	r3, #29
 80056e8:	d001      	beq.n	80056ee <__sflush_r+0xb2>
 80056ea:	2b16      	cmp	r3, #22
 80056ec:	d101      	bne.n	80056f2 <__sflush_r+0xb6>
 80056ee:	602f      	str	r7, [r5, #0]
 80056f0:	e7b1      	b.n	8005656 <__sflush_r+0x1a>
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f8:	81a3      	strh	r3, [r4, #12]
 80056fa:	e7ad      	b.n	8005658 <__sflush_r+0x1c>
 80056fc:	690f      	ldr	r7, [r1, #16]
 80056fe:	2f00      	cmp	r7, #0
 8005700:	d0a9      	beq.n	8005656 <__sflush_r+0x1a>
 8005702:	0793      	lsls	r3, r2, #30
 8005704:	680e      	ldr	r6, [r1, #0]
 8005706:	bf08      	it	eq
 8005708:	694b      	ldreq	r3, [r1, #20]
 800570a:	600f      	str	r7, [r1, #0]
 800570c:	bf18      	it	ne
 800570e:	2300      	movne	r3, #0
 8005710:	eba6 0807 	sub.w	r8, r6, r7
 8005714:	608b      	str	r3, [r1, #8]
 8005716:	f1b8 0f00 	cmp.w	r8, #0
 800571a:	dd9c      	ble.n	8005656 <__sflush_r+0x1a>
 800571c:	6a21      	ldr	r1, [r4, #32]
 800571e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005720:	4643      	mov	r3, r8
 8005722:	463a      	mov	r2, r7
 8005724:	4628      	mov	r0, r5
 8005726:	47b0      	blx	r6
 8005728:	2800      	cmp	r0, #0
 800572a:	dc06      	bgt.n	800573a <__sflush_r+0xfe>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	e78e      	b.n	8005658 <__sflush_r+0x1c>
 800573a:	4407      	add	r7, r0
 800573c:	eba8 0800 	sub.w	r8, r8, r0
 8005740:	e7e9      	b.n	8005716 <__sflush_r+0xda>
 8005742:	bf00      	nop
 8005744:	20400001 	.word	0x20400001

08005748 <_fflush_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	690b      	ldr	r3, [r1, #16]
 800574c:	4605      	mov	r5, r0
 800574e:	460c      	mov	r4, r1
 8005750:	b913      	cbnz	r3, 8005758 <_fflush_r+0x10>
 8005752:	2500      	movs	r5, #0
 8005754:	4628      	mov	r0, r5
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	b118      	cbz	r0, 8005762 <_fflush_r+0x1a>
 800575a:	6983      	ldr	r3, [r0, #24]
 800575c:	b90b      	cbnz	r3, 8005762 <_fflush_r+0x1a>
 800575e:	f000 f887 	bl	8005870 <__sinit>
 8005762:	4b14      	ldr	r3, [pc, #80]	; (80057b4 <_fflush_r+0x6c>)
 8005764:	429c      	cmp	r4, r3
 8005766:	d11b      	bne.n	80057a0 <_fflush_r+0x58>
 8005768:	686c      	ldr	r4, [r5, #4]
 800576a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0ef      	beq.n	8005752 <_fflush_r+0xa>
 8005772:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005774:	07d0      	lsls	r0, r2, #31
 8005776:	d404      	bmi.n	8005782 <_fflush_r+0x3a>
 8005778:	0599      	lsls	r1, r3, #22
 800577a:	d402      	bmi.n	8005782 <_fflush_r+0x3a>
 800577c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800577e:	f000 f915 	bl	80059ac <__retarget_lock_acquire_recursive>
 8005782:	4628      	mov	r0, r5
 8005784:	4621      	mov	r1, r4
 8005786:	f7ff ff59 	bl	800563c <__sflush_r>
 800578a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800578c:	07da      	lsls	r2, r3, #31
 800578e:	4605      	mov	r5, r0
 8005790:	d4e0      	bmi.n	8005754 <_fflush_r+0xc>
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	059b      	lsls	r3, r3, #22
 8005796:	d4dd      	bmi.n	8005754 <_fflush_r+0xc>
 8005798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800579a:	f000 f908 	bl	80059ae <__retarget_lock_release_recursive>
 800579e:	e7d9      	b.n	8005754 <_fflush_r+0xc>
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <_fflush_r+0x70>)
 80057a2:	429c      	cmp	r4, r3
 80057a4:	d101      	bne.n	80057aa <_fflush_r+0x62>
 80057a6:	68ac      	ldr	r4, [r5, #8]
 80057a8:	e7df      	b.n	800576a <_fflush_r+0x22>
 80057aa:	4b04      	ldr	r3, [pc, #16]	; (80057bc <_fflush_r+0x74>)
 80057ac:	429c      	cmp	r4, r3
 80057ae:	bf08      	it	eq
 80057b0:	68ec      	ldreq	r4, [r5, #12]
 80057b2:	e7da      	b.n	800576a <_fflush_r+0x22>
 80057b4:	08005e30 	.word	0x08005e30
 80057b8:	08005e50 	.word	0x08005e50
 80057bc:	08005e10 	.word	0x08005e10

080057c0 <std>:
 80057c0:	2300      	movs	r3, #0
 80057c2:	b510      	push	{r4, lr}
 80057c4:	4604      	mov	r4, r0
 80057c6:	e9c0 3300 	strd	r3, r3, [r0]
 80057ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057ce:	6083      	str	r3, [r0, #8]
 80057d0:	8181      	strh	r1, [r0, #12]
 80057d2:	6643      	str	r3, [r0, #100]	; 0x64
 80057d4:	81c2      	strh	r2, [r0, #14]
 80057d6:	6183      	str	r3, [r0, #24]
 80057d8:	4619      	mov	r1, r3
 80057da:	2208      	movs	r2, #8
 80057dc:	305c      	adds	r0, #92	; 0x5c
 80057de:	f7ff fa83 	bl	8004ce8 <memset>
 80057e2:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <std+0x38>)
 80057e4:	6263      	str	r3, [r4, #36]	; 0x24
 80057e6:	4b05      	ldr	r3, [pc, #20]	; (80057fc <std+0x3c>)
 80057e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <std+0x40>)
 80057ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <std+0x44>)
 80057f0:	6224      	str	r4, [r4, #32]
 80057f2:	6323      	str	r3, [r4, #48]	; 0x30
 80057f4:	bd10      	pop	{r4, pc}
 80057f6:	bf00      	nop
 80057f8:	080053f1 	.word	0x080053f1
 80057fc:	08005413 	.word	0x08005413
 8005800:	0800544b 	.word	0x0800544b
 8005804:	0800546f 	.word	0x0800546f

08005808 <_cleanup_r>:
 8005808:	4901      	ldr	r1, [pc, #4]	; (8005810 <_cleanup_r+0x8>)
 800580a:	f000 b8af 	b.w	800596c <_fwalk_reent>
 800580e:	bf00      	nop
 8005810:	08005749 	.word	0x08005749

08005814 <__sfmoreglue>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	2268      	movs	r2, #104	; 0x68
 8005818:	1e4d      	subs	r5, r1, #1
 800581a:	4355      	muls	r5, r2
 800581c:	460e      	mov	r6, r1
 800581e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005822:	f000 f9a9 	bl	8005b78 <_malloc_r>
 8005826:	4604      	mov	r4, r0
 8005828:	b140      	cbz	r0, 800583c <__sfmoreglue+0x28>
 800582a:	2100      	movs	r1, #0
 800582c:	e9c0 1600 	strd	r1, r6, [r0]
 8005830:	300c      	adds	r0, #12
 8005832:	60a0      	str	r0, [r4, #8]
 8005834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005838:	f7ff fa56 	bl	8004ce8 <memset>
 800583c:	4620      	mov	r0, r4
 800583e:	bd70      	pop	{r4, r5, r6, pc}

08005840 <__sfp_lock_acquire>:
 8005840:	4801      	ldr	r0, [pc, #4]	; (8005848 <__sfp_lock_acquire+0x8>)
 8005842:	f000 b8b3 	b.w	80059ac <__retarget_lock_acquire_recursive>
 8005846:	bf00      	nop
 8005848:	2000a579 	.word	0x2000a579

0800584c <__sfp_lock_release>:
 800584c:	4801      	ldr	r0, [pc, #4]	; (8005854 <__sfp_lock_release+0x8>)
 800584e:	f000 b8ae 	b.w	80059ae <__retarget_lock_release_recursive>
 8005852:	bf00      	nop
 8005854:	2000a579 	.word	0x2000a579

08005858 <__sinit_lock_acquire>:
 8005858:	4801      	ldr	r0, [pc, #4]	; (8005860 <__sinit_lock_acquire+0x8>)
 800585a:	f000 b8a7 	b.w	80059ac <__retarget_lock_acquire_recursive>
 800585e:	bf00      	nop
 8005860:	2000a57a 	.word	0x2000a57a

08005864 <__sinit_lock_release>:
 8005864:	4801      	ldr	r0, [pc, #4]	; (800586c <__sinit_lock_release+0x8>)
 8005866:	f000 b8a2 	b.w	80059ae <__retarget_lock_release_recursive>
 800586a:	bf00      	nop
 800586c:	2000a57a 	.word	0x2000a57a

08005870 <__sinit>:
 8005870:	b510      	push	{r4, lr}
 8005872:	4604      	mov	r4, r0
 8005874:	f7ff fff0 	bl	8005858 <__sinit_lock_acquire>
 8005878:	69a3      	ldr	r3, [r4, #24]
 800587a:	b11b      	cbz	r3, 8005884 <__sinit+0x14>
 800587c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005880:	f7ff bff0 	b.w	8005864 <__sinit_lock_release>
 8005884:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005888:	6523      	str	r3, [r4, #80]	; 0x50
 800588a:	4b13      	ldr	r3, [pc, #76]	; (80058d8 <__sinit+0x68>)
 800588c:	4a13      	ldr	r2, [pc, #76]	; (80058dc <__sinit+0x6c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	62a2      	str	r2, [r4, #40]	; 0x28
 8005892:	42a3      	cmp	r3, r4
 8005894:	bf04      	itt	eq
 8005896:	2301      	moveq	r3, #1
 8005898:	61a3      	streq	r3, [r4, #24]
 800589a:	4620      	mov	r0, r4
 800589c:	f000 f820 	bl	80058e0 <__sfp>
 80058a0:	6060      	str	r0, [r4, #4]
 80058a2:	4620      	mov	r0, r4
 80058a4:	f000 f81c 	bl	80058e0 <__sfp>
 80058a8:	60a0      	str	r0, [r4, #8]
 80058aa:	4620      	mov	r0, r4
 80058ac:	f000 f818 	bl	80058e0 <__sfp>
 80058b0:	2200      	movs	r2, #0
 80058b2:	60e0      	str	r0, [r4, #12]
 80058b4:	2104      	movs	r1, #4
 80058b6:	6860      	ldr	r0, [r4, #4]
 80058b8:	f7ff ff82 	bl	80057c0 <std>
 80058bc:	68a0      	ldr	r0, [r4, #8]
 80058be:	2201      	movs	r2, #1
 80058c0:	2109      	movs	r1, #9
 80058c2:	f7ff ff7d 	bl	80057c0 <std>
 80058c6:	68e0      	ldr	r0, [r4, #12]
 80058c8:	2202      	movs	r2, #2
 80058ca:	2112      	movs	r1, #18
 80058cc:	f7ff ff78 	bl	80057c0 <std>
 80058d0:	2301      	movs	r3, #1
 80058d2:	61a3      	str	r3, [r4, #24]
 80058d4:	e7d2      	b.n	800587c <__sinit+0xc>
 80058d6:	bf00      	nop
 80058d8:	08005dd8 	.word	0x08005dd8
 80058dc:	08005809 	.word	0x08005809

080058e0 <__sfp>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	4607      	mov	r7, r0
 80058e4:	f7ff ffac 	bl	8005840 <__sfp_lock_acquire>
 80058e8:	4b1e      	ldr	r3, [pc, #120]	; (8005964 <__sfp+0x84>)
 80058ea:	681e      	ldr	r6, [r3, #0]
 80058ec:	69b3      	ldr	r3, [r6, #24]
 80058ee:	b913      	cbnz	r3, 80058f6 <__sfp+0x16>
 80058f0:	4630      	mov	r0, r6
 80058f2:	f7ff ffbd 	bl	8005870 <__sinit>
 80058f6:	3648      	adds	r6, #72	; 0x48
 80058f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058fc:	3b01      	subs	r3, #1
 80058fe:	d503      	bpl.n	8005908 <__sfp+0x28>
 8005900:	6833      	ldr	r3, [r6, #0]
 8005902:	b30b      	cbz	r3, 8005948 <__sfp+0x68>
 8005904:	6836      	ldr	r6, [r6, #0]
 8005906:	e7f7      	b.n	80058f8 <__sfp+0x18>
 8005908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800590c:	b9d5      	cbnz	r5, 8005944 <__sfp+0x64>
 800590e:	4b16      	ldr	r3, [pc, #88]	; (8005968 <__sfp+0x88>)
 8005910:	60e3      	str	r3, [r4, #12]
 8005912:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005916:	6665      	str	r5, [r4, #100]	; 0x64
 8005918:	f000 f847 	bl	80059aa <__retarget_lock_init_recursive>
 800591c:	f7ff ff96 	bl	800584c <__sfp_lock_release>
 8005920:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005924:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005928:	6025      	str	r5, [r4, #0]
 800592a:	61a5      	str	r5, [r4, #24]
 800592c:	2208      	movs	r2, #8
 800592e:	4629      	mov	r1, r5
 8005930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005934:	f7ff f9d8 	bl	8004ce8 <memset>
 8005938:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800593c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005940:	4620      	mov	r0, r4
 8005942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005944:	3468      	adds	r4, #104	; 0x68
 8005946:	e7d9      	b.n	80058fc <__sfp+0x1c>
 8005948:	2104      	movs	r1, #4
 800594a:	4638      	mov	r0, r7
 800594c:	f7ff ff62 	bl	8005814 <__sfmoreglue>
 8005950:	4604      	mov	r4, r0
 8005952:	6030      	str	r0, [r6, #0]
 8005954:	2800      	cmp	r0, #0
 8005956:	d1d5      	bne.n	8005904 <__sfp+0x24>
 8005958:	f7ff ff78 	bl	800584c <__sfp_lock_release>
 800595c:	230c      	movs	r3, #12
 800595e:	603b      	str	r3, [r7, #0]
 8005960:	e7ee      	b.n	8005940 <__sfp+0x60>
 8005962:	bf00      	nop
 8005964:	08005dd8 	.word	0x08005dd8
 8005968:	ffff0001 	.word	0xffff0001

0800596c <_fwalk_reent>:
 800596c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005970:	4606      	mov	r6, r0
 8005972:	4688      	mov	r8, r1
 8005974:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005978:	2700      	movs	r7, #0
 800597a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800597e:	f1b9 0901 	subs.w	r9, r9, #1
 8005982:	d505      	bpl.n	8005990 <_fwalk_reent+0x24>
 8005984:	6824      	ldr	r4, [r4, #0]
 8005986:	2c00      	cmp	r4, #0
 8005988:	d1f7      	bne.n	800597a <_fwalk_reent+0xe>
 800598a:	4638      	mov	r0, r7
 800598c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005990:	89ab      	ldrh	r3, [r5, #12]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d907      	bls.n	80059a6 <_fwalk_reent+0x3a>
 8005996:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800599a:	3301      	adds	r3, #1
 800599c:	d003      	beq.n	80059a6 <_fwalk_reent+0x3a>
 800599e:	4629      	mov	r1, r5
 80059a0:	4630      	mov	r0, r6
 80059a2:	47c0      	blx	r8
 80059a4:	4307      	orrs	r7, r0
 80059a6:	3568      	adds	r5, #104	; 0x68
 80059a8:	e7e9      	b.n	800597e <_fwalk_reent+0x12>

080059aa <__retarget_lock_init_recursive>:
 80059aa:	4770      	bx	lr

080059ac <__retarget_lock_acquire_recursive>:
 80059ac:	4770      	bx	lr

080059ae <__retarget_lock_release_recursive>:
 80059ae:	4770      	bx	lr

080059b0 <_lseek_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4d07      	ldr	r5, [pc, #28]	; (80059d0 <_lseek_r+0x20>)
 80059b4:	4604      	mov	r4, r0
 80059b6:	4608      	mov	r0, r1
 80059b8:	4611      	mov	r1, r2
 80059ba:	2200      	movs	r2, #0
 80059bc:	602a      	str	r2, [r5, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	f7fb f9a4 	bl	8000d0c <_lseek>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d102      	bne.n	80059ce <_lseek_r+0x1e>
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	b103      	cbz	r3, 80059ce <_lseek_r+0x1e>
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	2000a574 	.word	0x2000a574

080059d4 <__swhatbuf_r>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	460e      	mov	r6, r1
 80059d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059dc:	2900      	cmp	r1, #0
 80059de:	b096      	sub	sp, #88	; 0x58
 80059e0:	4614      	mov	r4, r2
 80059e2:	461d      	mov	r5, r3
 80059e4:	da08      	bge.n	80059f8 <__swhatbuf_r+0x24>
 80059e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	602a      	str	r2, [r5, #0]
 80059ee:	061a      	lsls	r2, r3, #24
 80059f0:	d410      	bmi.n	8005a14 <__swhatbuf_r+0x40>
 80059f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059f6:	e00e      	b.n	8005a16 <__swhatbuf_r+0x42>
 80059f8:	466a      	mov	r2, sp
 80059fa:	f000 f953 	bl	8005ca4 <_fstat_r>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	dbf1      	blt.n	80059e6 <__swhatbuf_r+0x12>
 8005a02:	9a01      	ldr	r2, [sp, #4]
 8005a04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a0c:	425a      	negs	r2, r3
 8005a0e:	415a      	adcs	r2, r3
 8005a10:	602a      	str	r2, [r5, #0]
 8005a12:	e7ee      	b.n	80059f2 <__swhatbuf_r+0x1e>
 8005a14:	2340      	movs	r3, #64	; 0x40
 8005a16:	2000      	movs	r0, #0
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	b016      	add	sp, #88	; 0x58
 8005a1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a20 <__smakebuf_r>:
 8005a20:	898b      	ldrh	r3, [r1, #12]
 8005a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a24:	079d      	lsls	r5, r3, #30
 8005a26:	4606      	mov	r6, r0
 8005a28:	460c      	mov	r4, r1
 8005a2a:	d507      	bpl.n	8005a3c <__smakebuf_r+0x1c>
 8005a2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	6123      	str	r3, [r4, #16]
 8005a34:	2301      	movs	r3, #1
 8005a36:	6163      	str	r3, [r4, #20]
 8005a38:	b002      	add	sp, #8
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}
 8005a3c:	ab01      	add	r3, sp, #4
 8005a3e:	466a      	mov	r2, sp
 8005a40:	f7ff ffc8 	bl	80059d4 <__swhatbuf_r>
 8005a44:	9900      	ldr	r1, [sp, #0]
 8005a46:	4605      	mov	r5, r0
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f000 f895 	bl	8005b78 <_malloc_r>
 8005a4e:	b948      	cbnz	r0, 8005a64 <__smakebuf_r+0x44>
 8005a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a54:	059a      	lsls	r2, r3, #22
 8005a56:	d4ef      	bmi.n	8005a38 <__smakebuf_r+0x18>
 8005a58:	f023 0303 	bic.w	r3, r3, #3
 8005a5c:	f043 0302 	orr.w	r3, r3, #2
 8005a60:	81a3      	strh	r3, [r4, #12]
 8005a62:	e7e3      	b.n	8005a2c <__smakebuf_r+0xc>
 8005a64:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <__smakebuf_r+0x7c>)
 8005a66:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a68:	89a3      	ldrh	r3, [r4, #12]
 8005a6a:	6020      	str	r0, [r4, #0]
 8005a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a70:	81a3      	strh	r3, [r4, #12]
 8005a72:	9b00      	ldr	r3, [sp, #0]
 8005a74:	6163      	str	r3, [r4, #20]
 8005a76:	9b01      	ldr	r3, [sp, #4]
 8005a78:	6120      	str	r0, [r4, #16]
 8005a7a:	b15b      	cbz	r3, 8005a94 <__smakebuf_r+0x74>
 8005a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a80:	4630      	mov	r0, r6
 8005a82:	f000 f921 	bl	8005cc8 <_isatty_r>
 8005a86:	b128      	cbz	r0, 8005a94 <__smakebuf_r+0x74>
 8005a88:	89a3      	ldrh	r3, [r4, #12]
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	f043 0301 	orr.w	r3, r3, #1
 8005a92:	81a3      	strh	r3, [r4, #12]
 8005a94:	89a0      	ldrh	r0, [r4, #12]
 8005a96:	4305      	orrs	r5, r0
 8005a98:	81a5      	strh	r5, [r4, #12]
 8005a9a:	e7cd      	b.n	8005a38 <__smakebuf_r+0x18>
 8005a9c:	08005809 	.word	0x08005809

08005aa0 <_free_r>:
 8005aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005aa2:	2900      	cmp	r1, #0
 8005aa4:	d044      	beq.n	8005b30 <_free_r+0x90>
 8005aa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005aaa:	9001      	str	r0, [sp, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f1a1 0404 	sub.w	r4, r1, #4
 8005ab2:	bfb8      	it	lt
 8005ab4:	18e4      	addlt	r4, r4, r3
 8005ab6:	f000 f917 	bl	8005ce8 <__malloc_lock>
 8005aba:	4a1e      	ldr	r2, [pc, #120]	; (8005b34 <_free_r+0x94>)
 8005abc:	9801      	ldr	r0, [sp, #4]
 8005abe:	6813      	ldr	r3, [r2, #0]
 8005ac0:	b933      	cbnz	r3, 8005ad0 <_free_r+0x30>
 8005ac2:	6063      	str	r3, [r4, #4]
 8005ac4:	6014      	str	r4, [r2, #0]
 8005ac6:	b003      	add	sp, #12
 8005ac8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005acc:	f000 b912 	b.w	8005cf4 <__malloc_unlock>
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	d908      	bls.n	8005ae6 <_free_r+0x46>
 8005ad4:	6825      	ldr	r5, [r4, #0]
 8005ad6:	1961      	adds	r1, r4, r5
 8005ad8:	428b      	cmp	r3, r1
 8005ada:	bf01      	itttt	eq
 8005adc:	6819      	ldreq	r1, [r3, #0]
 8005ade:	685b      	ldreq	r3, [r3, #4]
 8005ae0:	1949      	addeq	r1, r1, r5
 8005ae2:	6021      	streq	r1, [r4, #0]
 8005ae4:	e7ed      	b.n	8005ac2 <_free_r+0x22>
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	b10b      	cbz	r3, 8005af0 <_free_r+0x50>
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	d9fa      	bls.n	8005ae6 <_free_r+0x46>
 8005af0:	6811      	ldr	r1, [r2, #0]
 8005af2:	1855      	adds	r5, r2, r1
 8005af4:	42a5      	cmp	r5, r4
 8005af6:	d10b      	bne.n	8005b10 <_free_r+0x70>
 8005af8:	6824      	ldr	r4, [r4, #0]
 8005afa:	4421      	add	r1, r4
 8005afc:	1854      	adds	r4, r2, r1
 8005afe:	42a3      	cmp	r3, r4
 8005b00:	6011      	str	r1, [r2, #0]
 8005b02:	d1e0      	bne.n	8005ac6 <_free_r+0x26>
 8005b04:	681c      	ldr	r4, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	6053      	str	r3, [r2, #4]
 8005b0a:	4421      	add	r1, r4
 8005b0c:	6011      	str	r1, [r2, #0]
 8005b0e:	e7da      	b.n	8005ac6 <_free_r+0x26>
 8005b10:	d902      	bls.n	8005b18 <_free_r+0x78>
 8005b12:	230c      	movs	r3, #12
 8005b14:	6003      	str	r3, [r0, #0]
 8005b16:	e7d6      	b.n	8005ac6 <_free_r+0x26>
 8005b18:	6825      	ldr	r5, [r4, #0]
 8005b1a:	1961      	adds	r1, r4, r5
 8005b1c:	428b      	cmp	r3, r1
 8005b1e:	bf04      	itt	eq
 8005b20:	6819      	ldreq	r1, [r3, #0]
 8005b22:	685b      	ldreq	r3, [r3, #4]
 8005b24:	6063      	str	r3, [r4, #4]
 8005b26:	bf04      	itt	eq
 8005b28:	1949      	addeq	r1, r1, r5
 8005b2a:	6021      	streq	r1, [r4, #0]
 8005b2c:	6054      	str	r4, [r2, #4]
 8005b2e:	e7ca      	b.n	8005ac6 <_free_r+0x26>
 8005b30:	b003      	add	sp, #12
 8005b32:	bd30      	pop	{r4, r5, pc}
 8005b34:	2000a57c 	.word	0x2000a57c

08005b38 <sbrk_aligned>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	4e0e      	ldr	r6, [pc, #56]	; (8005b74 <sbrk_aligned+0x3c>)
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	6831      	ldr	r1, [r6, #0]
 8005b40:	4605      	mov	r5, r0
 8005b42:	b911      	cbnz	r1, 8005b4a <sbrk_aligned+0x12>
 8005b44:	f000 f89e 	bl	8005c84 <_sbrk_r>
 8005b48:	6030      	str	r0, [r6, #0]
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4628      	mov	r0, r5
 8005b4e:	f000 f899 	bl	8005c84 <_sbrk_r>
 8005b52:	1c43      	adds	r3, r0, #1
 8005b54:	d00a      	beq.n	8005b6c <sbrk_aligned+0x34>
 8005b56:	1cc4      	adds	r4, r0, #3
 8005b58:	f024 0403 	bic.w	r4, r4, #3
 8005b5c:	42a0      	cmp	r0, r4
 8005b5e:	d007      	beq.n	8005b70 <sbrk_aligned+0x38>
 8005b60:	1a21      	subs	r1, r4, r0
 8005b62:	4628      	mov	r0, r5
 8005b64:	f000 f88e 	bl	8005c84 <_sbrk_r>
 8005b68:	3001      	adds	r0, #1
 8005b6a:	d101      	bne.n	8005b70 <sbrk_aligned+0x38>
 8005b6c:	f04f 34ff 	mov.w	r4, #4294967295
 8005b70:	4620      	mov	r0, r4
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
 8005b74:	2000a580 	.word	0x2000a580

08005b78 <_malloc_r>:
 8005b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b7c:	1ccd      	adds	r5, r1, #3
 8005b7e:	f025 0503 	bic.w	r5, r5, #3
 8005b82:	3508      	adds	r5, #8
 8005b84:	2d0c      	cmp	r5, #12
 8005b86:	bf38      	it	cc
 8005b88:	250c      	movcc	r5, #12
 8005b8a:	2d00      	cmp	r5, #0
 8005b8c:	4607      	mov	r7, r0
 8005b8e:	db01      	blt.n	8005b94 <_malloc_r+0x1c>
 8005b90:	42a9      	cmp	r1, r5
 8005b92:	d905      	bls.n	8005ba0 <_malloc_r+0x28>
 8005b94:	230c      	movs	r3, #12
 8005b96:	603b      	str	r3, [r7, #0]
 8005b98:	2600      	movs	r6, #0
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba0:	4e2e      	ldr	r6, [pc, #184]	; (8005c5c <_malloc_r+0xe4>)
 8005ba2:	f000 f8a1 	bl	8005ce8 <__malloc_lock>
 8005ba6:	6833      	ldr	r3, [r6, #0]
 8005ba8:	461c      	mov	r4, r3
 8005baa:	bb34      	cbnz	r4, 8005bfa <_malloc_r+0x82>
 8005bac:	4629      	mov	r1, r5
 8005bae:	4638      	mov	r0, r7
 8005bb0:	f7ff ffc2 	bl	8005b38 <sbrk_aligned>
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	d14d      	bne.n	8005c56 <_malloc_r+0xde>
 8005bba:	6834      	ldr	r4, [r6, #0]
 8005bbc:	4626      	mov	r6, r4
 8005bbe:	2e00      	cmp	r6, #0
 8005bc0:	d140      	bne.n	8005c44 <_malloc_r+0xcc>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	eb04 0803 	add.w	r8, r4, r3
 8005bcc:	f000 f85a 	bl	8005c84 <_sbrk_r>
 8005bd0:	4580      	cmp	r8, r0
 8005bd2:	d13a      	bne.n	8005c4a <_malloc_r+0xd2>
 8005bd4:	6821      	ldr	r1, [r4, #0]
 8005bd6:	3503      	adds	r5, #3
 8005bd8:	1a6d      	subs	r5, r5, r1
 8005bda:	f025 0503 	bic.w	r5, r5, #3
 8005bde:	3508      	adds	r5, #8
 8005be0:	2d0c      	cmp	r5, #12
 8005be2:	bf38      	it	cc
 8005be4:	250c      	movcc	r5, #12
 8005be6:	4629      	mov	r1, r5
 8005be8:	4638      	mov	r0, r7
 8005bea:	f7ff ffa5 	bl	8005b38 <sbrk_aligned>
 8005bee:	3001      	adds	r0, #1
 8005bf0:	d02b      	beq.n	8005c4a <_malloc_r+0xd2>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	442b      	add	r3, r5
 8005bf6:	6023      	str	r3, [r4, #0]
 8005bf8:	e00e      	b.n	8005c18 <_malloc_r+0xa0>
 8005bfa:	6822      	ldr	r2, [r4, #0]
 8005bfc:	1b52      	subs	r2, r2, r5
 8005bfe:	d41e      	bmi.n	8005c3e <_malloc_r+0xc6>
 8005c00:	2a0b      	cmp	r2, #11
 8005c02:	d916      	bls.n	8005c32 <_malloc_r+0xba>
 8005c04:	1961      	adds	r1, r4, r5
 8005c06:	42a3      	cmp	r3, r4
 8005c08:	6025      	str	r5, [r4, #0]
 8005c0a:	bf18      	it	ne
 8005c0c:	6059      	strne	r1, [r3, #4]
 8005c0e:	6863      	ldr	r3, [r4, #4]
 8005c10:	bf08      	it	eq
 8005c12:	6031      	streq	r1, [r6, #0]
 8005c14:	5162      	str	r2, [r4, r5]
 8005c16:	604b      	str	r3, [r1, #4]
 8005c18:	4638      	mov	r0, r7
 8005c1a:	f104 060b 	add.w	r6, r4, #11
 8005c1e:	f000 f869 	bl	8005cf4 <__malloc_unlock>
 8005c22:	f026 0607 	bic.w	r6, r6, #7
 8005c26:	1d23      	adds	r3, r4, #4
 8005c28:	1af2      	subs	r2, r6, r3
 8005c2a:	d0b6      	beq.n	8005b9a <_malloc_r+0x22>
 8005c2c:	1b9b      	subs	r3, r3, r6
 8005c2e:	50a3      	str	r3, [r4, r2]
 8005c30:	e7b3      	b.n	8005b9a <_malloc_r+0x22>
 8005c32:	6862      	ldr	r2, [r4, #4]
 8005c34:	42a3      	cmp	r3, r4
 8005c36:	bf0c      	ite	eq
 8005c38:	6032      	streq	r2, [r6, #0]
 8005c3a:	605a      	strne	r2, [r3, #4]
 8005c3c:	e7ec      	b.n	8005c18 <_malloc_r+0xa0>
 8005c3e:	4623      	mov	r3, r4
 8005c40:	6864      	ldr	r4, [r4, #4]
 8005c42:	e7b2      	b.n	8005baa <_malloc_r+0x32>
 8005c44:	4634      	mov	r4, r6
 8005c46:	6876      	ldr	r6, [r6, #4]
 8005c48:	e7b9      	b.n	8005bbe <_malloc_r+0x46>
 8005c4a:	230c      	movs	r3, #12
 8005c4c:	603b      	str	r3, [r7, #0]
 8005c4e:	4638      	mov	r0, r7
 8005c50:	f000 f850 	bl	8005cf4 <__malloc_unlock>
 8005c54:	e7a1      	b.n	8005b9a <_malloc_r+0x22>
 8005c56:	6025      	str	r5, [r4, #0]
 8005c58:	e7de      	b.n	8005c18 <_malloc_r+0xa0>
 8005c5a:	bf00      	nop
 8005c5c:	2000a57c 	.word	0x2000a57c

08005c60 <_read_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	4d07      	ldr	r5, [pc, #28]	; (8005c80 <_read_r+0x20>)
 8005c64:	4604      	mov	r4, r0
 8005c66:	4608      	mov	r0, r1
 8005c68:	4611      	mov	r1, r2
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	602a      	str	r2, [r5, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	f7fa ffec 	bl	8000c4c <_read>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d102      	bne.n	8005c7e <_read_r+0x1e>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	b103      	cbz	r3, 8005c7e <_read_r+0x1e>
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	2000a574 	.word	0x2000a574

08005c84 <_sbrk_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4d06      	ldr	r5, [pc, #24]	; (8005ca0 <_sbrk_r+0x1c>)
 8005c88:	2300      	movs	r3, #0
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	602b      	str	r3, [r5, #0]
 8005c90:	f7fb f84a 	bl	8000d28 <_sbrk>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d102      	bne.n	8005c9e <_sbrk_r+0x1a>
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	b103      	cbz	r3, 8005c9e <_sbrk_r+0x1a>
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	2000a574 	.word	0x2000a574

08005ca4 <_fstat_r>:
 8005ca4:	b538      	push	{r3, r4, r5, lr}
 8005ca6:	4d07      	ldr	r5, [pc, #28]	; (8005cc4 <_fstat_r+0x20>)
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4604      	mov	r4, r0
 8005cac:	4608      	mov	r0, r1
 8005cae:	4611      	mov	r1, r2
 8005cb0:	602b      	str	r3, [r5, #0]
 8005cb2:	f7fb f810 	bl	8000cd6 <_fstat>
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	d102      	bne.n	8005cc0 <_fstat_r+0x1c>
 8005cba:	682b      	ldr	r3, [r5, #0]
 8005cbc:	b103      	cbz	r3, 8005cc0 <_fstat_r+0x1c>
 8005cbe:	6023      	str	r3, [r4, #0]
 8005cc0:	bd38      	pop	{r3, r4, r5, pc}
 8005cc2:	bf00      	nop
 8005cc4:	2000a574 	.word	0x2000a574

08005cc8 <_isatty_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4d06      	ldr	r5, [pc, #24]	; (8005ce4 <_isatty_r+0x1c>)
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4604      	mov	r4, r0
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	602b      	str	r3, [r5, #0]
 8005cd4:	f7fb f80f 	bl	8000cf6 <_isatty>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d102      	bne.n	8005ce2 <_isatty_r+0x1a>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	b103      	cbz	r3, 8005ce2 <_isatty_r+0x1a>
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	2000a574 	.word	0x2000a574

08005ce8 <__malloc_lock>:
 8005ce8:	4801      	ldr	r0, [pc, #4]	; (8005cf0 <__malloc_lock+0x8>)
 8005cea:	f7ff be5f 	b.w	80059ac <__retarget_lock_acquire_recursive>
 8005cee:	bf00      	nop
 8005cf0:	2000a578 	.word	0x2000a578

08005cf4 <__malloc_unlock>:
 8005cf4:	4801      	ldr	r0, [pc, #4]	; (8005cfc <__malloc_unlock+0x8>)
 8005cf6:	f7ff be5a 	b.w	80059ae <__retarget_lock_release_recursive>
 8005cfa:	bf00      	nop
 8005cfc:	2000a578 	.word	0x2000a578

08005d00 <_init>:
 8005d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d02:	bf00      	nop
 8005d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d06:	bc08      	pop	{r3}
 8005d08:	469e      	mov	lr, r3
 8005d0a:	4770      	bx	lr

08005d0c <_fini>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	bf00      	nop
 8005d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d12:	bc08      	pop	{r3}
 8005d14:	469e      	mov	lr, r3
 8005d16:	4770      	bx	lr
