/* This harness is linked against
 * libraries/freertos_plus/standard/freertos_plus_tcp/source/portable/BufferManagement/BufferAllocation_2.goto
 */
#include <stdint.h>
#include <stdio.h>

/* FreeRTOS includes. */
#include "../../../../../../../../../External/FreeRTOS/Source/include/FreeRTOS.h"
#include "../../../../../../../../../External/FreeRTOS/Source/include/FreeRTOS_IP.h"
#include "../../../../../../../../../External/FreeRTOS/Source/include/FreeRTOS_Sockets.h"
#include "../../../../../../../../../External/FreeRTOS/Source/include/queue.h"
#include "../../../../../../../../../External/FreeRTOS/Source/include/semphr.h"
#include "../../../../../../../../../External/FreeRTOS/Source/include/task.h"
#include "../../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_ARP.h"
#include "../../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_DHCP.h"
#include "../../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h"
#include "../../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_UDP_IP.h"
#if ( ipconfigUSE_LLMNR == 1 )
    #include "../../../../../../../../../External/FreeRTOS/Source/include/FreeRTOS_DNS.h"
#endif /* ipconfigUSE_LLMNR */
#include "../../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/test/unit-test/ConfigFiles/NetworkInterface.h"
#include "../../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/test/unit-test/ConfigFiles/NetworkBufferManagement.h"

void * pvPortMalloc( size_t xWantedSize )
{
    void * ptr = malloc( xWantedSize );

    __CPROVER_assume( ptr != NULL );
    return ptr;
}


void vPortFree( void * pv )
{
    free( pv );
}

/*
 * This function function writes a buffer to the network.  We stub it
 * out here, and assume it has no side effects relevant to memory safety.
 */
BaseType_t xNetworkInterfaceOutput( NetworkBufferDescriptor_t * const pxDescriptor,
                                    BaseType_t bReleaseAfterSend )
{
    if( bReleaseAfterSend != pdFALSE )
    {
        vReleaseNetworkBufferAndDescriptor( pxDescriptor );
    }
}

void harness()
{
    BaseType_t xRes = xNetworkBuffersInitialise();

    if( xRes == pdPASS )
    {
        uint32_t ulIPAddress;
        FreeRTOS_OutputARPRequest( ulIPAddress );
    }
}
