/* Standard includes. */
#include <stdint.h>

/* FreeRTOS includes. */
#include "cbmc.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/FreeRTOS.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/FreeRTOS_DNS.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/FreeRTOS_IP.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/FreeRTOS_Sockets.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/IPTraceMacroDefaults.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/list.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/queue.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/semphr.h"
#include "../../../../../../../../External/FreeRTOS/Source/include/task.h"
#include "../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_IP_Private.h"
#include "../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/include/FreeRTOS_UDP_IP.h"
#include "../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/test/cbmc/include/cbmc.h"
#include "../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/test/unit-test/ConfigFiles/NetworkBufferManagement.h"
#include "../../../../../../../../External/FreeRTOS-Plus/Source/FreeRTOS-Plus-TCP/test/unit-test/ConfigFiles/NetworkInterface.h"

/****************************************************************
* Signature of function under test
****************************************************************/

size_t prvSkipNameField( const uint8_t * pucByte,
                         size_t uxLength );

/****************************************************************
* Proof of prvSkipNameField function contract
****************************************************************/

void harness()
{
    __CPROVER_assert( NETWORK_BUFFER_SIZE < CBMC_MAX_OBJECT_SIZE,
                      "NETWORK_BUFFER_SIZE < CBMC_MAX_OBJECT_SIZE" );

    size_t uxLength;
    uint8_t * pucByte = malloc( uxLength );

    /* Preconditions */

    __CPROVER_assume( uxLength < CBMC_MAX_OBJECT_SIZE );
    __CPROVER_assume( uxLength <= NETWORK_BUFFER_SIZE );
    __CPROVER_assume( pucByte != NULL );

    size_t index = prvSkipNameField( pucByte, uxLength );

    /* Postconditions */

    __CPROVER_assert( index <= uxLength,
                      "prvSkipNameField: index <= uxLength" );
}
