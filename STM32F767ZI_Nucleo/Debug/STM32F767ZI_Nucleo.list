
STM32F767ZI_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005500  08005500  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005508  08005508  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005508  08005508  00015508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800550c  0800550c  0001550c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aa04  20000010  08005520  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000aa14  08005520  0002aa14  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a223  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038d3  00000000  00000000  0003a261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0003db38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003eeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000046d4  00000000  00000000  000400e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017012  00000000  00000000  000447b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d1cf  00000000  00000000  0005b7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168995  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d4  00000000  00000000  001689e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	080054b8 	.word	0x080054b8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	080054b8 	.word	0x080054b8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	4a07      	ldr	r2, [pc, #28]	; (8000570 <vApplicationGetIdleTaskMemory+0x2c>)
 8000554:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	4a06      	ldr	r2, [pc, #24]	; (8000574 <vApplicationGetIdleTaskMemory+0x30>)
 800055a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	2000002c 	.word	0x2000002c
 8000574:	20000080 	.word	0x20000080

08000578 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800057c:	f3bf 8f4f 	dsb	sy
}
 8000580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000582:	f3bf 8f6f 	isb	sy
}
 8000586:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <SCB_EnableICache+0x48>)
 800058a:	2200      	movs	r2, #0
 800058c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000590:	f3bf 8f4f 	dsb	sy
}
 8000594:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000596:	f3bf 8f6f 	isb	sy
}
 800059a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <SCB_EnableICache+0x48>)
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <SCB_EnableICache+0x48>)
 80005a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005a8:	f3bf 8f4f 	dsb	sy
}
 80005ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ae:	f3bf 8f6f 	isb	sy
}
 80005b2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005ca:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <SCB_EnableDCache+0x84>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80005d2:	f3bf 8f4f 	dsb	sy
}
 80005d6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <SCB_EnableDCache+0x84>)
 80005da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005de:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	0b5b      	lsrs	r3, r3, #13
 80005e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005e8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	08db      	lsrs	r3, r3, #3
 80005ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005f2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	015a      	lsls	r2, r3, #5
 80005f8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005fc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000602:	4911      	ldr	r1, [pc, #68]	; (8000648 <SCB_EnableDCache+0x84>)
 8000604:	4313      	orrs	r3, r2
 8000606:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	1e5a      	subs	r2, r3, #1
 800060e:	60ba      	str	r2, [r7, #8]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d1ef      	bne.n	80005f4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	1e5a      	subs	r2, r3, #1
 8000618:	60fa      	str	r2, [r7, #12]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1e5      	bne.n	80005ea <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800061e:	f3bf 8f4f 	dsb	sy
}
 8000622:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <SCB_EnableDCache+0x84>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a07      	ldr	r2, [pc, #28]	; (8000648 <SCB_EnableDCache+0x84>)
 800062a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800062e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000630:	f3bf 8f4f 	dsb	sy
}
 8000634:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000636:	f3bf 8f6f 	isb	sy
}
 800063a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
 /* Perform any hardware initialization that does not require the RTOS to be
	 * running.  */
	//MX_GPIO_Init();

	MX_USART3_UART_Init();
 8000650:	f000 f8f2 	bl	8000838 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000654:	f000 f920 	bl	8000898 <MX_USB_OTG_FS_PCD_Init>

	prvMiscInitialization();
 8000658:	f000 f805 	bl	8000666 <prvMiscInitialization>

    /* Start the scheduler.  Initialization that requires the OS to be running,
     * including the WiFi initialization, is performed in the RTOS daemon task
     * startup hook. */
    vTaskStartScheduler();
 800065c:	f003 fee4 	bl	8004428 <vTaskStartScheduler>
  /*osKernelStart();*/

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    return 0;
 8000660:	2300      	movs	r3, #0
  }
 8000662:	4618      	mov	r0, r3
 8000664:	bd80      	pop	{r7, pc}

08000666 <prvMiscInitialization>:

/**
 * @brief Initializes the board.
 */
static void prvMiscInitialization( void )
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* MPU Configuration--------------------------------------------------------*/
    MPU_Config();
 800066a:	f000 f82b 	bl	80006c4 <MPU_Config>

    /* Enable I-Cache---------------------------------------------------------*/
    SCB_EnableICache();
 800066e:	f7ff ff83 	bl	8000578 <SCB_EnableICache>

    /* Enable D-Cache---------------------------------------------------------*/
    SCB_EnableDCache();
 8000672:	f7ff ffa7 	bl	80005c4 <SCB_EnableDCache>

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Add core if want to wait for CPU2 boots */

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000676:	f000 fb50 	bl	8000d1a <HAL_Init>

    /* Configure the system clock. */
    SystemClock_Config();
 800067a:	f000 f86b 	bl	8000754 <SystemClock_Config>

    MX_GPIO_Init();
 800067e:	f000 f939 	bl	80008f4 <MX_GPIO_Init>
    MX_RNG_Init();
 8000682:	f000 f817 	bl	80006b4 <MX_RNG_Init>
    MX_USART3_UART_Init();
 8000686:	f000 f8d7 	bl	8000838 <MX_USART3_UART_Init>

    /* Heap_5 is being used because the RAM is not contiguous in memory, so the
     * heap must be initialized. */
    prvInitializeHeap();
 800068a:	f000 f803 	bl	8000694 <prvInitializeHeap>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <prvInitializeHeap>:

static void prvInitializeHeap( void )
{
 8000694:	b490      	push	{r4, r7}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
    static uint8_t ucHeap1[ configTOTAL_HEAP_SIZE + 25 * 1024 ];

    HeapRegion_t xHeapRegions[] =
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <prvInitializeHeap+0x1c>)
 800069c:	463c      	mov	r4, r7
 800069e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        { ( unsigned char * ) ucHeap1, sizeof( ucHeap1 ) },
        { NULL,                        0                 }
    };

  // vPortDefineHeapRegions( xHeapRegions );
}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc90      	pop	{r4, r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	080054d0 	.word	0x080054d0

080006b4 <MX_RNG_Init>:
 * @brief RNG Initialization Function
 * @param None
 * @retval None
 */
static void MX_RNG_Init( void )
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
    }*/

    /* USER CODE BEGIN RNG_Init 2 */

    /* USER CODE END RNG_Init 2 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <MPU_Config>:

/*-----------------------------------------------------------*/

static void MPU_Config( void )
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 80006ca:	463b      	mov	r3, r7
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]

    /* Disables the MPU */
    HAL_MPU_Disable();
 80006d6:	f000 fc87 	bl	8000fe8 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80006da:	2301      	movs	r3, #1
 80006dc:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80006de:	2300      	movs	r3, #0
 80006e0:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x30040000;
 80006e2:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MPU_Config+0x8c>)
 80006e4:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80006e6:	230e      	movs	r3, #14
 80006e8:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80006f2:	2303      	movs	r3, #3
 80006f4:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006f6:	2301      	movs	r3, #1
 80006f8:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion( &MPU_InitStruct );
 8000706:	463b      	mov	r3, r7
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fca5 	bl	8001058 <HAL_MPU_ConfigRegion>

    /** Initializes and configures the Region and the memory to be protected
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800070e:	2301      	movs	r3, #1
 8000710:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000712:	2301      	movs	r3, #1
 8000714:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x30040000;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MPU_Config+0x8c>)
 8000718:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800071a:	2307      	movs	r3, #7
 800071c:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x0;
 800071e:	2300      	movs	r3, #0
 8000720:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000722:	2300      	movs	r3, #0
 8000724:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000726:	2303      	movs	r3, #3
 8000728:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800072a:	2301      	movs	r3, #1
 800072c:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion( &MPU_InitStruct );
 800073a:	463b      	mov	r3, r7
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fc8b 	bl	8001058 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable( MPU_PRIVILEGED_DEFAULT );
 8000742:	2004      	movs	r0, #4
 8000744:	f000 fc68 	bl	8001018 <HAL_MPU_Enable>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	30040000 	.word	0x30040000

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b094      	sub	sp, #80	; 0x50
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2234      	movs	r2, #52	; 0x34
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f004 fea0 	bl	80054a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000778:	f001 f8a4 	bl	80018c4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <SystemClock_Config+0xdc>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a2b      	ldr	r2, [pc, #172]	; (8000830 <SystemClock_Config+0xdc>)
 8000782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <SystemClock_Config+0xdc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <SystemClock_Config+0xe0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800079c:	4a25      	ldr	r2, [pc, #148]	; (8000834 <SystemClock_Config+0xe0>)
 800079e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <SystemClock_Config+0xe0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007c8:	2360      	movs	r3, #96	; 0x60
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007d0:	2304      	movs	r3, #4
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007d4:	2302      	movs	r3, #2
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4618      	mov	r0, r3
 80007de:	f001 f8d1 	bl	8001984 <HAL_RCC_OscConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007e8:	f000 f926 	bl	8000a38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007ec:	f001 f87a 	bl	80018e4 <HAL_PWREx_EnableOverDrive>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007f6:	f000 f91f 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fe:	2302      	movs	r3, #2
 8000800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	2103      	movs	r1, #3
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fb62 	bl	8001ee0 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000822:	f000 f909 	bl	8000a38 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	; 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_USART3_UART_Init+0x58>)
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <MX_USART3_UART_Init+0x5c>)
 8000840:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_USART3_UART_Init+0x58>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_USART3_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_USART3_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_USART3_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USART3_UART_Init+0x58>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_USART3_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_USART3_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_USART3_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_USART3_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_USART3_UART_Init+0x58>)
 800087c:	f002 f97e 	bl	8002b7c <HAL_UART_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000886:	f000 f8d7 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000280 	.word	0x20000280
 8000894:	40004800 	.word	0x40004800

08000898 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	2206      	movs	r2, #6
 80008a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b8:	2202      	movs	r2, #2
 80008ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	2201      	movs	r2, #1
 80008c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008dc:	f000 fea9 	bl	8001632 <HAL_PCD_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008e6:	f000 f8a7 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000308 	.word	0x20000308

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	4b47      	ldr	r3, [pc, #284]	; (8000a28 <MX_GPIO_Init+0x134>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a46      	ldr	r2, [pc, #280]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b44      	ldr	r3, [pc, #272]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000922:	4b41      	ldr	r3, [pc, #260]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a40      	ldr	r2, [pc, #256]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b3e      	ldr	r3, [pc, #248]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b3b      	ldr	r3, [pc, #236]	; (8000a28 <MX_GPIO_Init+0x134>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a3a      	ldr	r2, [pc, #232]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b38      	ldr	r3, [pc, #224]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b35      	ldr	r3, [pc, #212]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a34      	ldr	r2, [pc, #208]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <MX_GPIO_Init+0x134>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a2e      	ldr	r2, [pc, #184]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0308 	and.w	r3, r3, #8
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000982:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a28      	ldr	r2, [pc, #160]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_GPIO_Init+0x134>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a0:	4822      	ldr	r0, [pc, #136]	; (8000a2c <MX_GPIO_Init+0x138>)
 80009a2:	f000 fe2d 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2140      	movs	r1, #64	; 0x40
 80009aa:	4821      	ldr	r0, [pc, #132]	; (8000a30 <MX_GPIO_Init+0x13c>)
 80009ac:	f000 fe28 	bl	8001600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	481b      	ldr	r0, [pc, #108]	; (8000a34 <MX_GPIO_Init+0x140>)
 80009c8:	f000 fc6e 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4811      	ldr	r0, [pc, #68]	; (8000a2c <MX_GPIO_Init+0x138>)
 80009e6:	f000 fc5f 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ea:	2340      	movs	r3, #64	; 0x40
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <MX_GPIO_Init+0x13c>)
 8000a02:	f000 fc51 	bl	80012a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_GPIO_Init+0x13c>)
 8000a1a:	f000 fc45 	bl	80012a8 <HAL_GPIO_Init>

}
 8000a1e:	bf00      	nop
 8000a20:	3730      	adds	r7, #48	; 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	40021800 	.word	0x40021800
 8000a34:	40020800 	.word	0x40020800

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <Error_Handler+0x8>
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	f06f 0001 	mvn.w	r0, #1
 8000a82:	f000 fa88 	bl	8000f96 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b0ae      	sub	sp, #184	; 0xb8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2290      	movs	r2, #144	; 0x90
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f004 fcf7 	bl	80054a8 <memset>
  if(huart->Instance==USART3)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <HAL_UART_MspInit+0xb4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d13c      	bne.n	8000b3e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 fc2a 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ade:	f7ff ffab 	bl	8000a38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_UART_MspInit+0xb8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b32:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <HAL_UART_MspInit+0xbc>)
 8000b3a:	f000 fbb5 	bl	80012a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b3e:	bf00      	nop
 8000b40:	37b8      	adds	r7, #184	; 0xb8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40004800 	.word	0x40004800
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020c00 	.word	0x40020c00

08000b54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0ae      	sub	sp, #184	; 0xb8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2290      	movs	r2, #144	; 0x90
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f004 fc97 	bl	80054a8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b82:	d159      	bne.n	8000c38 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000b88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 fbc9 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ba0:	f7ff ff4a 	bl	8000a38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a25      	ldr	r2, [pc, #148]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bbc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bd6:	230a      	movs	r3, #10
 8000bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4818      	ldr	r0, [pc, #96]	; (8000c44 <HAL_PCD_MspInit+0xf0>)
 8000be4:	f000 fb60 	bl	80012a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4810      	ldr	r0, [pc, #64]	; (8000c44 <HAL_PCD_MspInit+0xf0>)
 8000c04:	f000 fb50 	bl	80012a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c12:	6353      	str	r3, [r2, #52]	; 0x34
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <HAL_PCD_MspInit+0xec>)
 8000c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c38:	bf00      	nop
 8000c3a:	37b8      	adds	r7, #184	; 0xb8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c78:	f000 f88c 	bl	8000d94 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c7c:	f003 ffe6 	bl	8004c4c <xTaskGetSchedulerState>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d001      	beq.n	8000c8a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c86:	f004 fa8f 	bl	80051a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <ETH_IRQHandler+0x10>)
 8000c96:	f000 fa23 	bl	80010e0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000a81c 	.word	0x2000a81c

08000ca4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cce:	490e      	ldr	r1, [pc, #56]	; (8000d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd0:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce4:	4c0b      	ldr	r4, [pc, #44]	; (8000d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cf2:	f7ff ffd7 	bl	8000ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f004 fba5 	bl	8005444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fca7 	bl	800064c <main>
  bx  lr    
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d00:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d0c:	08005510 	.word	0x08005510
  ldr r2, =_sbss
 8000d10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d14:	2000aa14 	.word	0x2000aa14

08000d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC_IRQHandler>

08000d1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1e:	2003      	movs	r0, #3
 8000d20:	f000 f92e 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d24:	200f      	movs	r0, #15
 8000d26:	f000 f805 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2a:	f7ff fe8b 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x54>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x58>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	4619      	mov	r1, r3
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f93b 	bl	8000fce <HAL_SYSTICK_Config>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00e      	b.n	8000d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d80a      	bhi.n	8000d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f000 f911 	bl	8000f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <HAL_InitTick+0x5c>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e000      	b.n	8000d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	2000a810 	.word	0x2000a810

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	2000a810 	.word	0x2000a810

08000dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff ffee 	bl	8000dbc <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dec:	d005      	beq.n	8000dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_Delay+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4413      	add	r3, r2
 8000df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfa:	bf00      	nop
 8000dfc:	f7ff ffde 	bl	8000dbc <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d8f7      	bhi.n	8000dfc <HAL_Delay+0x28>
  {
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000008 	.word	0x20000008

08000e1c <__NVIC_SetPriorityGrouping>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <__NVIC_SetPriorityGrouping+0x40>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	4313      	orrs	r3, r2
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x40>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00
 8000e60:	05fa0000 	.word	0x05fa0000

08000e64 <__NVIC_GetPriorityGrouping>:
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_SetPriority>:
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	db0a      	blt.n	8000eaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	490c      	ldr	r1, [pc, #48]	; (8000ecc <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	0112      	lsls	r2, r2, #4
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ea8:	e00a      	b.n	8000ec0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	0112      	lsls	r2, r2, #4
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	440b      	add	r3, r1
 8000ebe:	761a      	strb	r2, [r3, #24]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_EncodePriority>:
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f1c3 0307 	rsb	r3, r3, #7
 8000eee:	2b04      	cmp	r3, #4
 8000ef0:	bf28      	it	cs
 8000ef2:	2304      	movcs	r3, #4
 8000ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	2b06      	cmp	r3, #6
 8000efc:	d902      	bls.n	8000f04 <NVIC_EncodePriority+0x30>
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3b03      	subs	r3, #3
 8000f02:	e000      	b.n	8000f06 <NVIC_EncodePriority+0x32>
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	401a      	ands	r2, r3
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	43d9      	mvns	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f4c:	d301      	bcc.n	8000f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00f      	b.n	8000f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <SysTick_Config+0x40>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f7ff ff8e 	bl	8000e80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SysTick_Config+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <SysTick_Config+0x40>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff47 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa8:	f7ff ff5c 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff ff8e 	bl	8000ed4 <NVIC_EncodePriority>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff5d 	bl	8000e80 <__NVIC_SetPriority>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ffb0 	bl	8000f3c <SysTick_Config>
 8000fdc:	4603      	mov	r3, r0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000fec:	f3bf 8f5f 	dmb	sy
}
 8000ff0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <HAL_MPU_Disable+0x28>)
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	4a06      	ldr	r2, [pc, #24]	; (8001010 <HAL_MPU_Disable+0x28>)
 8000ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffc:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000ffe:	4b05      	ldr	r3, [pc, #20]	; (8001014 <HAL_MPU_Disable+0x2c>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00
 8001014:	e000ed90 	.word	0xe000ed90

08001018 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001020:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <HAL_MPU_Enable+0x38>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_MPU_Enable+0x3c>)
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <HAL_MPU_Enable+0x3c>)
 8001030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001034:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001036:	f3bf 8f4f 	dsb	sy
}
 800103a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800103c:	f3bf 8f6f 	isb	sy
}
 8001040:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed90 	.word	0xe000ed90
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	785a      	ldrb	r2, [r3, #1]
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_MPU_ConfigRegion+0x84>)
 8001066:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d029      	beq.n	80010c4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001070:	4a1a      	ldr	r2, [pc, #104]	; (80010dc <HAL_MPU_ConfigRegion+0x84>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7b1b      	ldrb	r3, [r3, #12]
 800107c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7adb      	ldrb	r3, [r3, #11]
 8001082:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001084:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	7a9b      	ldrb	r3, [r3, #10]
 800108a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800108c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	7b5b      	ldrb	r3, [r3, #13]
 8001092:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001094:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	7b9b      	ldrb	r3, [r3, #14]
 800109a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800109c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7bdb      	ldrb	r3, [r3, #15]
 80010a2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80010a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7a5b      	ldrb	r3, [r3, #9]
 80010aa:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80010ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	7a1b      	ldrb	r3, [r3, #8]
 80010b2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80010b4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80010be:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80010c0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80010c2:	e005      	b.n	80010d0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_MPU_ConfigRegion+0x84>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <HAL_MPU_ConfigRegion+0x84>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed90 	.word	0xe000ed90

080010e0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010f6:	2b40      	cmp	r3, #64	; 0x40
 80010f8:	d112      	bne.n	8001120 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001108:	2b40      	cmp	r3, #64	; 0x40
 800110a:	d109      	bne.n	8001120 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001114:	461a      	mov	r2, r3
 8001116:	4b50      	ldr	r3, [pc, #320]	; (8001258 <HAL_ETH_IRQHandler+0x178>)
 8001118:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f002 fc8a 	bl	8003a34 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b01      	cmp	r3, #1
 8001130:	d113      	bne.n	800115a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b01      	cmp	r3, #1
 8001142:	d10a      	bne.n	800115a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800114c:	461a      	mov	r2, r3
 800114e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001152:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f002 fc7d 	bl	8003a54 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800116c:	d14c      	bne.n	8001208 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800117c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001180:	d142      	bne.n	8001208 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001188:	f043 0208 	orr.w	r2, r3, #8
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a4:	d11a      	bne.n	80011dc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ae:	695a      	ldr	r2, [r3, #20]
 80011b0:	4b2a      	ldr	r3, [pc, #168]	; (800125c <HAL_ETH_IRQHandler+0x17c>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80011cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80011d0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	22e0      	movs	r2, #224	; 0xe0
 80011d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80011da:	e012      	b.n	8001202 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	f248 6380 	movw	r3, #34432	; 0x8680
 80011ea:	4013      	ands	r3, r2
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011fa:	461a      	mov	r2, r3
 80011fc:	f248 6380 	movw	r3, #34432	; 0x8680
 8001200:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f002 fc36 	bl	8003a74 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	2b08      	cmp	r3, #8
 8001214:	d10e      	bne.n	8001234 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f81c 	bl	8001264 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_ETH_IRQHandler+0x180>)
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <HAL_ETH_IRQHandler+0x180>)
 8001242:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001246:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 f815 	bl	8001278 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	00010040 	.word	0x00010040
 800125c:	007e2000 	.word	0x007e2000
 8001260:	40013c00 	.word	0x40013c00

08001264 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	e175      	b.n	80015b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	f040 8164 	bne.w	80015ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d005      	beq.n	80012fe <HAL_GPIO_Init+0x56>
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d130      	bne.n	8001360 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001334:	2201      	movs	r2, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f003 0201 	and.w	r2, r3, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b03      	cmp	r3, #3
 800136a:	d017      	beq.n	800139c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d123      	bne.n	80013f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80be 	beq.w	80015ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	4b66      	ldr	r3, [pc, #408]	; (80015cc <HAL_GPIO_Init+0x324>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a65      	ldr	r2, [pc, #404]	; (80015cc <HAL_GPIO_Init+0x324>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b63      	ldr	r3, [pc, #396]	; (80015cc <HAL_GPIO_Init+0x324>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800144a:	4a61      	ldr	r2, [pc, #388]	; (80015d0 <HAL_GPIO_Init+0x328>)
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3302      	adds	r3, #2
 8001452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	220f      	movs	r2, #15
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a58      	ldr	r2, [pc, #352]	; (80015d4 <HAL_GPIO_Init+0x32c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d037      	beq.n	80014e6 <HAL_GPIO_Init+0x23e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a57      	ldr	r2, [pc, #348]	; (80015d8 <HAL_GPIO_Init+0x330>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d031      	beq.n	80014e2 <HAL_GPIO_Init+0x23a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a56      	ldr	r2, [pc, #344]	; (80015dc <HAL_GPIO_Init+0x334>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d02b      	beq.n	80014de <HAL_GPIO_Init+0x236>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a55      	ldr	r2, [pc, #340]	; (80015e0 <HAL_GPIO_Init+0x338>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d025      	beq.n	80014da <HAL_GPIO_Init+0x232>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a54      	ldr	r2, [pc, #336]	; (80015e4 <HAL_GPIO_Init+0x33c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d01f      	beq.n	80014d6 <HAL_GPIO_Init+0x22e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a53      	ldr	r2, [pc, #332]	; (80015e8 <HAL_GPIO_Init+0x340>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d019      	beq.n	80014d2 <HAL_GPIO_Init+0x22a>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a52      	ldr	r2, [pc, #328]	; (80015ec <HAL_GPIO_Init+0x344>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d013      	beq.n	80014ce <HAL_GPIO_Init+0x226>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a51      	ldr	r2, [pc, #324]	; (80015f0 <HAL_GPIO_Init+0x348>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d00d      	beq.n	80014ca <HAL_GPIO_Init+0x222>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a50      	ldr	r2, [pc, #320]	; (80015f4 <HAL_GPIO_Init+0x34c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d007      	beq.n	80014c6 <HAL_GPIO_Init+0x21e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4f      	ldr	r2, [pc, #316]	; (80015f8 <HAL_GPIO_Init+0x350>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d101      	bne.n	80014c2 <HAL_GPIO_Init+0x21a>
 80014be:	2309      	movs	r3, #9
 80014c0:	e012      	b.n	80014e8 <HAL_GPIO_Init+0x240>
 80014c2:	230a      	movs	r3, #10
 80014c4:	e010      	b.n	80014e8 <HAL_GPIO_Init+0x240>
 80014c6:	2308      	movs	r3, #8
 80014c8:	e00e      	b.n	80014e8 <HAL_GPIO_Init+0x240>
 80014ca:	2307      	movs	r3, #7
 80014cc:	e00c      	b.n	80014e8 <HAL_GPIO_Init+0x240>
 80014ce:	2306      	movs	r3, #6
 80014d0:	e00a      	b.n	80014e8 <HAL_GPIO_Init+0x240>
 80014d2:	2305      	movs	r3, #5
 80014d4:	e008      	b.n	80014e8 <HAL_GPIO_Init+0x240>
 80014d6:	2304      	movs	r3, #4
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x240>
 80014da:	2303      	movs	r3, #3
 80014dc:	e004      	b.n	80014e8 <HAL_GPIO_Init+0x240>
 80014de:	2302      	movs	r3, #2
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_Init+0x240>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_GPIO_Init+0x240>
 80014e6:	2300      	movs	r3, #0
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	f002 0203 	and.w	r2, r2, #3
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	4093      	lsls	r3, r2
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014f8:	4935      	ldr	r1, [pc, #212]	; (80015d0 <HAL_GPIO_Init+0x328>)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	3302      	adds	r3, #2
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <HAL_GPIO_Init+0x354>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152a:	4a34      	ldr	r2, [pc, #208]	; (80015fc <HAL_GPIO_Init+0x354>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <HAL_GPIO_Init+0x354>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001554:	4a29      	ldr	r2, [pc, #164]	; (80015fc <HAL_GPIO_Init+0x354>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800155a:	4b28      	ldr	r3, [pc, #160]	; (80015fc <HAL_GPIO_Init+0x354>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	43db      	mvns	r3, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4013      	ands	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800157e:	4a1f      	ldr	r2, [pc, #124]	; (80015fc <HAL_GPIO_Init+0x354>)
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <HAL_GPIO_Init+0x354>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a8:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_GPIO_Init+0x354>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3301      	adds	r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2b0f      	cmp	r3, #15
 80015b8:	f67f ae86 	bls.w	80012c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40013800 	.word	0x40013800
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020400 	.word	0x40020400
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020c00 	.word	0x40020c00
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40021400 	.word	0x40021400
 80015ec:	40021800 	.word	0x40021800
 80015f0:	40021c00 	.word	0x40021c00
 80015f4:	40022000 	.word	0x40022000
 80015f8:	40022400 	.word	0x40022400
 80015fc:	40013c00 	.word	0x40013c00

08001600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
 800160c:	4613      	mov	r3, r2
 800160e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001610:	787b      	ldrb	r3, [r7, #1]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800161c:	e003      	b.n	8001626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	041a      	lsls	r2, r3, #16
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	619a      	str	r2, [r3, #24]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001632:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001634:	b08f      	sub	sp, #60	; 0x3c
 8001636:	af0a      	add	r7, sp, #40	; 0x28
 8001638:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e116      	b.n	8001872 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fa78 	bl	8000b54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2203      	movs	r2, #3
 8001668:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f001 ff3a 	bl	80034fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	687e      	ldr	r6, [r7, #4]
 8001690:	466d      	mov	r5, sp
 8001692:	f106 0410 	add.w	r4, r6, #16
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80016a6:	1d33      	adds	r3, r6, #4
 80016a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016aa:	6838      	ldr	r0, [r7, #0]
 80016ac:	f001 fece 	bl	800344c <USB_CoreInit>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2202      	movs	r2, #2
 80016ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0d7      	b.n	8001872 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 ff28 	bl	800351e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	e04a      	b.n	800176a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	333d      	adds	r3, #61	; 0x3d
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4413      	add	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	333c      	adds	r3, #60	; 0x3c
 80016f8:	7bfa      	ldrb	r2, [r7, #15]
 80016fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016fc:	7bfa      	ldrb	r2, [r7, #15]
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	b298      	uxth	r0, r3
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	3344      	adds	r3, #68	; 0x44
 8001710:	4602      	mov	r2, r0
 8001712:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001714:	7bfa      	ldrb	r2, [r7, #15]
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	3340      	adds	r3, #64	; 0x40
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	3348      	adds	r3, #72	; 0x48
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	334c      	adds	r3, #76	; 0x4c
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	3354      	adds	r3, #84	; 0x54
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	3301      	adds	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	d3af      	bcc.n	80016d4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e044      	b.n	8001804 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001790:	7bfa      	ldrb	r2, [r7, #15]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80017a2:	7bfa      	ldrb	r2, [r7, #15]
 80017a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017d2:	7bfa      	ldrb	r2, [r7, #15]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4413      	add	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	3301      	adds	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	429a      	cmp	r2, r3
 800180c:	d3b5      	bcc.n	800177a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	687e      	ldr	r6, [r7, #4]
 8001816:	466d      	mov	r5, sp
 8001818:	f106 0410 	add.w	r4, r6, #16
 800181c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800181e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001820:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001822:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001824:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001828:	e885 0003 	stmia.w	r5, {r0, r1}
 800182c:	1d33      	adds	r3, r6, #4
 800182e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001830:	6838      	ldr	r0, [r7, #0]
 8001832:	f001 fec1 	bl	80035b8 <USB_DevInit>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e014      	b.n	8001872 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	2b01      	cmp	r3, #1
 800185e:	d102      	bne.n	8001866 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f80b 	bl	800187c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f002 f87f 	bl	800396e <USB_DevDisconnect>

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800187c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	10000003 	.word	0x10000003

080018c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40007000 	.word	0x40007000

080018e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	4b23      	ldr	r3, [pc, #140]	; (800197c <HAL_PWREx_EnableOverDrive+0x98>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a22      	ldr	r2, [pc, #136]	; (800197c <HAL_PWREx_EnableOverDrive+0x98>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <HAL_PWREx_EnableOverDrive+0x98>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001906:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <HAL_PWREx_EnableOverDrive+0x9c>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001912:	f7ff fa53 	bl	8000dbc <HAL_GetTick>
 8001916:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001918:	e009      	b.n	800192e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800191a:	f7ff fa4f 	bl	8000dbc <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001928:	d901      	bls.n	800192e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e022      	b.n	8001974 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193a:	d1ee      	bne.n	800191a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800193c:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_PWREx_EnableOverDrive+0x9c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001946:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001948:	f7ff fa38 	bl	8000dbc <HAL_GetTick>
 800194c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800194e:	e009      	b.n	8001964 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001950:	f7ff fa34 	bl	8000dbc <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800195e:	d901      	bls.n	8001964 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e007      	b.n	8001974 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001970:	d1ee      	bne.n	8001950 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	40007000 	.word	0x40007000

08001984 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e29b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8087 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a8:	4b96      	ldr	r3, [pc, #600]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d00c      	beq.n	80019ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019b4:	4b93      	ldr	r3, [pc, #588]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d112      	bne.n	80019e6 <HAL_RCC_OscConfig+0x62>
 80019c0:	4b90      	ldr	r3, [pc, #576]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019cc:	d10b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ce:	4b8d      	ldr	r3, [pc, #564]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d06c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x130>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d168      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e275      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x7a>
 80019f0:	4b84      	ldr	r3, [pc, #528]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a83      	ldr	r2, [pc, #524]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e02e      	b.n	8001a5c <HAL_RCC_OscConfig+0xd8>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x9c>
 8001a06:	4b7f      	ldr	r3, [pc, #508]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a7e      	ldr	r2, [pc, #504]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b7c      	ldr	r3, [pc, #496]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a7b      	ldr	r2, [pc, #492]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01d      	b.n	8001a5c <HAL_RCC_OscConfig+0xd8>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0xc0>
 8001a2a:	4b76      	ldr	r3, [pc, #472]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a75      	ldr	r2, [pc, #468]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b73      	ldr	r3, [pc, #460]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a72      	ldr	r2, [pc, #456]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xd8>
 8001a44:	4b6f      	ldr	r3, [pc, #444]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6e      	ldr	r2, [pc, #440]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b6c      	ldr	r3, [pc, #432]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a6b      	ldr	r2, [pc, #428]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f9aa 	bl	8000dbc <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f9a6 	bl	8000dbc <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e229      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b61      	ldr	r3, [pc, #388]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe8>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f996 	bl	8000dbc <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff f992 	bl	8000dbc <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e215      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	4b57      	ldr	r3, [pc, #348]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x110>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d069      	beq.n	8001b96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ac2:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ace:	4b4d      	ldr	r3, [pc, #308]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d11c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x190>
 8001ada:	4b4a      	ldr	r3, [pc, #296]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d116      	bne.n	8001b14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x17a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e1e9      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	493d      	ldr	r1, [pc, #244]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e040      	b.n	8001b96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d023      	beq.n	8001b64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a38      	ldr	r2, [pc, #224]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff f948 	bl	8000dbc <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b30:	f7ff f944 	bl	8000dbc <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e1c7      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4929      	ldr	r1, [pc, #164]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
 8001b62:	e018      	b.n	8001b96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a26      	ldr	r2, [pc, #152]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b70:	f7ff f924 	bl	8000dbc <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b78:	f7ff f920 	bl	8000dbc <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e1a3      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f0      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d038      	beq.n	8001c14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d019      	beq.n	8001bde <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bae:	4a15      	ldr	r2, [pc, #84]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f901 	bl	8000dbc <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7ff f8fd 	bl	8000dbc <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e180      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x23a>
 8001bdc:	e01a      	b.n	8001c14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be2:	4a08      	ldr	r2, [pc, #32]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7ff f8e7 	bl	8000dbc <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf2:	f7ff f8e3 	bl	8000dbc <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d903      	bls.n	8001c08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e166      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
 8001c04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c08:	4b92      	ldr	r3, [pc, #584]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1ee      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80a4 	beq.w	8001d6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c22:	4b8c      	ldr	r3, [pc, #560]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10d      	bne.n	8001c4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b89      	ldr	r3, [pc, #548]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a88      	ldr	r2, [pc, #544]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b86      	ldr	r3, [pc, #536]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c46:	2301      	movs	r3, #1
 8001c48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4a:	4b83      	ldr	r3, [pc, #524]	; (8001e58 <HAL_RCC_OscConfig+0x4d4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d118      	bne.n	8001c88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c56:	4b80      	ldr	r3, [pc, #512]	; (8001e58 <HAL_RCC_OscConfig+0x4d4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a7f      	ldr	r2, [pc, #508]	; (8001e58 <HAL_RCC_OscConfig+0x4d4>)
 8001c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c62:	f7ff f8ab 	bl	8000dbc <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c6a:	f7ff f8a7 	bl	8000dbc <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b64      	cmp	r3, #100	; 0x64
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e12a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7c:	4b76      	ldr	r3, [pc, #472]	; (8001e58 <HAL_RCC_OscConfig+0x4d4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d106      	bne.n	8001c9e <HAL_RCC_OscConfig+0x31a>
 8001c90:	4b70      	ldr	r3, [pc, #448]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	4a6f      	ldr	r2, [pc, #444]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9c:	e02d      	b.n	8001cfa <HAL_RCC_OscConfig+0x376>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x33c>
 8001ca6:	4b6b      	ldr	r3, [pc, #428]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	4a6a      	ldr	r2, [pc, #424]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb2:	4b68      	ldr	r3, [pc, #416]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb6:	4a67      	ldr	r2, [pc, #412]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001cb8:	f023 0304 	bic.w	r3, r3, #4
 8001cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cbe:	e01c      	b.n	8001cfa <HAL_RCC_OscConfig+0x376>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d10c      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x35e>
 8001cc8:	4b62      	ldr	r3, [pc, #392]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	4a61      	ldr	r2, [pc, #388]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001cce:	f043 0304 	orr.w	r3, r3, #4
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd4:	4b5f      	ldr	r3, [pc, #380]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd8:	4a5e      	ldr	r2, [pc, #376]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce0:	e00b      	b.n	8001cfa <HAL_RCC_OscConfig+0x376>
 8001ce2:	4b5c      	ldr	r3, [pc, #368]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce6:	4a5b      	ldr	r2, [pc, #364]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	6713      	str	r3, [r2, #112]	; 0x70
 8001cee:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	4a58      	ldr	r2, [pc, #352]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d015      	beq.n	8001d2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d02:	f7ff f85b 	bl	8000dbc <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7ff f857 	bl	8000dbc <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e0d8      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d20:	4b4c      	ldr	r3, [pc, #304]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0ee      	beq.n	8001d0a <HAL_RCC_OscConfig+0x386>
 8001d2c:	e014      	b.n	8001d58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2e:	f7ff f845 	bl	8000dbc <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d36:	f7ff f841 	bl	8000dbc <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e0c2      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4c:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1ee      	bne.n	8001d36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d58:	7dfb      	ldrb	r3, [r7, #23]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d105      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	4a3c      	ldr	r2, [pc, #240]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80ae 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d74:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d06d      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d14b      	bne.n	8001e20 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d88:	4b32      	ldr	r3, [pc, #200]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a31      	ldr	r2, [pc, #196]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff f812 	bl	8000dbc <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff f80e 	bl	8000dbc <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e091      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69da      	ldr	r2, [r3, #28]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	041b      	lsls	r3, r3, #16
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	061b      	lsls	r3, r3, #24
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	071b      	lsls	r3, r3, #28
 8001de6:	491b      	ldr	r1, [pc, #108]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7fe ffe0 	bl	8000dbc <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e00:	f7fe ffdc 	bl	8000dbc <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e05f      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x47c>
 8001e1e:	e057      	b.n	8001ed0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7fe ffc6 	bl	8000dbc <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7fe ffc2 	bl	8000dbc <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e045      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e46:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_RCC_OscConfig+0x4d0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x4b0>
 8001e52:	e03d      	b.n	8001ed0 <HAL_RCC_OscConfig+0x54c>
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <HAL_RCC_OscConfig+0x558>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d030      	beq.n	8001ecc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d129      	bne.n	8001ecc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d122      	bne.n	8001ecc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d119      	bne.n	8001ecc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	085b      	lsrs	r3, r3, #1
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d10f      	bne.n	8001ecc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d107      	bne.n	8001ecc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800

08001ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0d0      	b.n	800209a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 030f 	and.w	r3, r3, #15
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d910      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 020f 	bic.w	r2, r3, #15
 8001f0e:	4965      	ldr	r1, [pc, #404]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0b8      	b.n	800209a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f40:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a58      	ldr	r2, [pc, #352]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	494d      	ldr	r1, [pc, #308]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d040      	beq.n	8002004 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d115      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e07f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa2:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d109      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e073      	b.n	800209a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e06b      	b.n	800209a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc2:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f023 0203 	bic.w	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4936      	ldr	r1, [pc, #216]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd4:	f7fe fef2 	bl	8000dbc <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fdc:	f7fe feee 	bl	8000dbc <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e053      	b.n	800209a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 020c 	and.w	r2, r3, #12
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	429a      	cmp	r2, r3
 8002002:	d1eb      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002004:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d210      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 020f 	bic.w	r2, r3, #15
 800201a:	4922      	ldr	r1, [pc, #136]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e032      	b.n	800209a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4916      	ldr	r1, [pc, #88]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	490e      	ldr	r1, [pc, #56]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002072:	f000 f821 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002076:	4602      	mov	r2, r0
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	490a      	ldr	r1, [pc, #40]	; (80020ac <HAL_RCC_ClockConfig+0x1cc>)
 8002084:	5ccb      	ldrb	r3, [r1, r3]
 8002086:	fa22 f303 	lsr.w	r3, r2, r3
 800208a:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1d0>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_ClockConfig+0x1d4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fe4e 	bl	8000d34 <HAL_InitTick>

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023c00 	.word	0x40023c00
 80020a8:	40023800 	.word	0x40023800
 80020ac:	080054e8 	.word	0x080054e8
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000004 	.word	0x20000004

080020b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020bc:	b094      	sub	sp, #80	; 0x50
 80020be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	647b      	str	r3, [r7, #68]	; 0x44
 80020c4:	2300      	movs	r3, #0
 80020c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020c8:	2300      	movs	r3, #0
 80020ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020d0:	4b79      	ldr	r3, [pc, #484]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d00d      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x40>
 80020dc:	2b08      	cmp	r3, #8
 80020de:	f200 80e1 	bhi.w	80022a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0x34>
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d003      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ea:	e0db      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020ec:	4b73      	ldr	r3, [pc, #460]	; (80022bc <HAL_RCC_GetSysClockFreq+0x204>)
 80020ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020f0:	e0db      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020f2:	4b73      	ldr	r3, [pc, #460]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80020f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020f6:	e0d8      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f8:	4b6f      	ldr	r3, [pc, #444]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002100:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002102:	4b6d      	ldr	r3, [pc, #436]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d063      	beq.n	80021d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210e:	4b6a      	ldr	r3, [pc, #424]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	099b      	lsrs	r3, r3, #6
 8002114:	2200      	movs	r2, #0
 8002116:	63bb      	str	r3, [r7, #56]	; 0x38
 8002118:	63fa      	str	r2, [r7, #60]	; 0x3c
 800211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
 8002122:	2300      	movs	r3, #0
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
 8002126:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800212a:	4622      	mov	r2, r4
 800212c:	462b      	mov	r3, r5
 800212e:	f04f 0000 	mov.w	r0, #0
 8002132:	f04f 0100 	mov.w	r1, #0
 8002136:	0159      	lsls	r1, r3, #5
 8002138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800213c:	0150      	lsls	r0, r2, #5
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4621      	mov	r1, r4
 8002144:	1a51      	subs	r1, r2, r1
 8002146:	6139      	str	r1, [r7, #16]
 8002148:	4629      	mov	r1, r5
 800214a:	eb63 0301 	sbc.w	r3, r3, r1
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800215c:	4659      	mov	r1, fp
 800215e:	018b      	lsls	r3, r1, #6
 8002160:	4651      	mov	r1, sl
 8002162:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002166:	4651      	mov	r1, sl
 8002168:	018a      	lsls	r2, r1, #6
 800216a:	4651      	mov	r1, sl
 800216c:	ebb2 0801 	subs.w	r8, r2, r1
 8002170:	4659      	mov	r1, fp
 8002172:	eb63 0901 	sbc.w	r9, r3, r1
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800218a:	4690      	mov	r8, r2
 800218c:	4699      	mov	r9, r3
 800218e:	4623      	mov	r3, r4
 8002190:	eb18 0303 	adds.w	r3, r8, r3
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	462b      	mov	r3, r5
 8002198:	eb49 0303 	adc.w	r3, r9, r3
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021aa:	4629      	mov	r1, r5
 80021ac:	024b      	lsls	r3, r1, #9
 80021ae:	4621      	mov	r1, r4
 80021b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021b4:	4621      	mov	r1, r4
 80021b6:	024a      	lsls	r2, r1, #9
 80021b8:	4610      	mov	r0, r2
 80021ba:	4619      	mov	r1, r3
 80021bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021be:	2200      	movs	r2, #0
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80021c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021c8:	f7fe f83a 	bl	8000240 <__aeabi_uldivmod>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4613      	mov	r3, r2
 80021d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021d4:	e058      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d6:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	099b      	lsrs	r3, r3, #6
 80021dc:	2200      	movs	r2, #0
 80021de:	4618      	mov	r0, r3
 80021e0:	4611      	mov	r1, r2
 80021e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021e6:	623b      	str	r3, [r7, #32]
 80021e8:	2300      	movs	r3, #0
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
 80021ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021f0:	4642      	mov	r2, r8
 80021f2:	464b      	mov	r3, r9
 80021f4:	f04f 0000 	mov.w	r0, #0
 80021f8:	f04f 0100 	mov.w	r1, #0
 80021fc:	0159      	lsls	r1, r3, #5
 80021fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002202:	0150      	lsls	r0, r2, #5
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4641      	mov	r1, r8
 800220a:	ebb2 0a01 	subs.w	sl, r2, r1
 800220e:	4649      	mov	r1, r9
 8002210:	eb63 0b01 	sbc.w	fp, r3, r1
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002220:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002224:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002228:	ebb2 040a 	subs.w	r4, r2, sl
 800222c:	eb63 050b 	sbc.w	r5, r3, fp
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	00eb      	lsls	r3, r5, #3
 800223a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800223e:	00e2      	lsls	r2, r4, #3
 8002240:	4614      	mov	r4, r2
 8002242:	461d      	mov	r5, r3
 8002244:	4643      	mov	r3, r8
 8002246:	18e3      	adds	r3, r4, r3
 8002248:	603b      	str	r3, [r7, #0]
 800224a:	464b      	mov	r3, r9
 800224c:	eb45 0303 	adc.w	r3, r5, r3
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800225e:	4629      	mov	r1, r5
 8002260:	028b      	lsls	r3, r1, #10
 8002262:	4621      	mov	r1, r4
 8002264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002268:	4621      	mov	r1, r4
 800226a:	028a      	lsls	r2, r1, #10
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002272:	2200      	movs	r2, #0
 8002274:	61bb      	str	r3, [r7, #24]
 8002276:	61fa      	str	r2, [r7, #28]
 8002278:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800227c:	f7fd ffe0 	bl	8000240 <__aeabi_uldivmod>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4613      	mov	r3, r2
 8002286:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	0c1b      	lsrs	r3, r3, #16
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	3301      	adds	r3, #1
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002298:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800229a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022a2:	e002      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_RCC_GetSysClockFreq+0x204>)
 80022a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3750      	adds	r7, #80	; 0x50
 80022b0:	46bd      	mov	sp, r7
 80022b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	00f42400 	.word	0x00f42400
 80022c0:	007a1200 	.word	0x007a1200

080022c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000000 	.word	0x20000000

080022dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022e0:	f7ff fff0 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	0a9b      	lsrs	r3, r3, #10
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	4903      	ldr	r1, [pc, #12]	; (8002300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	080054f8 	.word	0x080054f8

08002304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002308:	f7ff ffdc 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	0b5b      	lsrs	r3, r3, #13
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4903      	ldr	r1, [pc, #12]	; (8002328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40023800 	.word	0x40023800
 8002328:	080054f8 	.word	0x080054f8

0800232c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d012      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002354:	4b69      	ldr	r3, [pc, #420]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a68      	ldr	r2, [pc, #416]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800235e:	6093      	str	r3, [r2, #8]
 8002360:	4b66      	ldr	r3, [pc, #408]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002368:	4964      	ldr	r1, [pc, #400]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002376:	2301      	movs	r3, #1
 8002378:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d017      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002386:	4b5d      	ldr	r3, [pc, #372]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800238c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002394:	4959      	ldr	r1, [pc, #356]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a4:	d101      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023b2:	2301      	movs	r3, #1
 80023b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d017      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023c2:	4b4e      	ldr	r3, [pc, #312]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	494a      	ldr	r1, [pc, #296]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e0:	d101      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80023e2:	2301      	movs	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80023ee:	2301      	movs	r3, #1
 80023f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0320 	and.w	r3, r3, #32
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 808b 	beq.w	8002526 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002410:	4b3a      	ldr	r3, [pc, #232]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	4a39      	ldr	r2, [pc, #228]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241a:	6413      	str	r3, [r2, #64]	; 0x40
 800241c:	4b37      	ldr	r3, [pc, #220]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002428:	4b35      	ldr	r3, [pc, #212]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a34      	ldr	r2, [pc, #208]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800242e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002434:	f7fe fcc2 	bl	8000dbc <HAL_GetTick>
 8002438:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800243a:	e008      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243c:	f7fe fcbe 	bl	8000dbc <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e38f      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800244e:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800245a:	4b28      	ldr	r3, [pc, #160]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002462:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d035      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	429a      	cmp	r2, r3
 8002476:	d02e      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002478:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002480:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002482:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800248e:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	4a1a      	ldr	r2, [pc, #104]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002498:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800249a:	4a18      	ldr	r2, [pc, #96]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024a0:	4b16      	ldr	r3, [pc, #88]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d114      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fc86 	bl	8000dbc <HAL_GetTick>
 80024b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7fe fc82 	bl	8000dbc <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e351      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0ee      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024e2:	d111      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80024f2:	400b      	ands	r3, r1
 80024f4:	4901      	ldr	r1, [pc, #4]	; (80024fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
 80024fa:	e00b      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80024fc:	40023800 	.word	0x40023800
 8002500:	40007000 	.word	0x40007000
 8002504:	0ffffcff 	.word	0x0ffffcff
 8002508:	4bac      	ldr	r3, [pc, #688]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4aab      	ldr	r2, [pc, #684]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800250e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002512:	6093      	str	r3, [r2, #8]
 8002514:	4ba9      	ldr	r3, [pc, #676]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002516:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	49a6      	ldr	r1, [pc, #664]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002522:	4313      	orrs	r3, r2
 8002524:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	d010      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002532:	4ba2      	ldr	r3, [pc, #648]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002538:	4aa0      	ldr	r2, [pc, #640]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800253a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800253e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002542:	4b9e      	ldr	r3, [pc, #632]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002544:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254c:	499b      	ldr	r1, [pc, #620]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00a      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002560:	4b96      	ldr	r3, [pc, #600]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002566:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800256e:	4993      	ldr	r1, [pc, #588]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002582:	4b8e      	ldr	r3, [pc, #568]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002588:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002590:	498a      	ldr	r1, [pc, #552]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025a4:	4b85      	ldr	r3, [pc, #532]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025b2:	4982      	ldr	r1, [pc, #520]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025c6:	4b7d      	ldr	r3, [pc, #500]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	4979      	ldr	r1, [pc, #484]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025e8:	4b74      	ldr	r3, [pc, #464]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	4971      	ldr	r1, [pc, #452]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800260a:	4b6c      	ldr	r3, [pc, #432]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002610:	f023 020c 	bic.w	r2, r3, #12
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002618:	4968      	ldr	r1, [pc, #416]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800262c:	4b63      	ldr	r3, [pc, #396]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	4960      	ldr	r1, [pc, #384]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800264e:	4b5b      	ldr	r3, [pc, #364]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002654:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265c:	4957      	ldr	r1, [pc, #348]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002670:	4b52      	ldr	r3, [pc, #328]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002676:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	494f      	ldr	r1, [pc, #316]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002692:	4b4a      	ldr	r3, [pc, #296]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002698:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	4946      	ldr	r1, [pc, #280]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026b4:	4b41      	ldr	r3, [pc, #260]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c2:	493e      	ldr	r1, [pc, #248]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80026d6:	4b39      	ldr	r3, [pc, #228]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e4:	4935      	ldr	r1, [pc, #212]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026f8:	4b30      	ldr	r3, [pc, #192]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002706:	492d      	ldr	r1, [pc, #180]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d011      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800271a:	4b28      	ldr	r3, [pc, #160]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002720:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002728:	4924      	ldr	r1, [pc, #144]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002734:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002738:	d101      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800273a:	2301      	movs	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002768:	4914      	ldr	r1, [pc, #80]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00b      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002782:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800278c:	490b      	ldr	r1, [pc, #44]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00f      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b0:	4902      	ldr	r1, [pc, #8]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027b8:	e002      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00b      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027cc:	4b8a      	ldr	r3, [pc, #552]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027dc:	4986      	ldr	r1, [pc, #536]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00b      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80027f0:	4b81      	ldr	r3, [pc, #516]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002800:	497d      	ldr	r1, [pc, #500]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d006      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80d6 	beq.w	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800281c:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a75      	ldr	r2, [pc, #468]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002822:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002828:	f7fe fac8 	bl	8000dbc <HAL_GetTick>
 800282c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002830:	f7fe fac4 	bl	8000dbc <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	; 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e195      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002842:	4b6d      	ldr	r3, [pc, #436]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d021      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	2b00      	cmp	r3, #0
 8002860:	d11d      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002862:	4b65      	ldr	r3, [pc, #404]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002870:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002876:	0e1b      	lsrs	r3, r3, #24
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	019a      	lsls	r2, r3, #6
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	041b      	lsls	r3, r3, #16
 8002888:	431a      	orrs	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	061b      	lsls	r3, r3, #24
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	071b      	lsls	r3, r3, #28
 8002896:	4958      	ldr	r1, [pc, #352]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d02e      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c8:	d129      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028ca:	4b4b      	ldr	r3, [pc, #300]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028d8:	4b47      	ldr	r3, [pc, #284]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028de:	0f1b      	lsrs	r3, r3, #28
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	019a      	lsls	r2, r3, #6
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	041b      	lsls	r3, r3, #16
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	061b      	lsls	r3, r3, #24
 80028f8:	431a      	orrs	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	071b      	lsls	r3, r3, #28
 80028fe:	493e      	ldr	r1, [pc, #248]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002906:	4b3c      	ldr	r3, [pc, #240]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800290c:	f023 021f 	bic.w	r2, r3, #31
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	3b01      	subs	r3, #1
 8002916:	4938      	ldr	r1, [pc, #224]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d01d      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800292a:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800292c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002930:	0e1b      	lsrs	r3, r3, #24
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002938:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800293a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800293e:	0f1b      	lsrs	r3, r3, #28
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	019a      	lsls	r2, r3, #6
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	431a      	orrs	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	061b      	lsls	r3, r3, #24
 8002958:	431a      	orrs	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	071b      	lsls	r3, r3, #28
 800295e:	4926      	ldr	r1, [pc, #152]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d011      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	019a      	lsls	r2, r3, #6
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	071b      	lsls	r3, r3, #28
 800298e:	491a      	ldr	r1, [pc, #104]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002996:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800299c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a2:	f7fe fa0b 	bl	8000dbc <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029aa:	f7fe fa07 	bl	8000dbc <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b64      	cmp	r3, #100	; 0x64
 80029b6:	d901      	bls.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e0d8      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	f040 80ce 	bne.w	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a08      	ldr	r2, [pc, #32]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029dc:	f7fe f9ee 	bl	8000dbc <HAL_GetTick>
 80029e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029e2:	e00b      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029e4:	f7fe f9ea 	bl	8000dbc <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d904      	bls.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e0bb      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80029f6:	bf00      	nop
 80029f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029fc:	4b5e      	ldr	r3, [pc, #376]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a08:	d0ec      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d009      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d02e      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d12a      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a32:	4b51      	ldr	r3, [pc, #324]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a40:	4b4d      	ldr	r3, [pc, #308]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	0f1b      	lsrs	r3, r3, #28
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	019a      	lsls	r2, r3, #6
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	061b      	lsls	r3, r3, #24
 8002a60:	431a      	orrs	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	071b      	lsls	r3, r3, #28
 8002a66:	4944      	ldr	r1, [pc, #272]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a6e:	4b42      	ldr	r3, [pc, #264]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	493d      	ldr	r1, [pc, #244]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d022      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a9c:	d11d      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a9e:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	0e1b      	lsrs	r3, r3, #24
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002aac:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	0f1b      	lsrs	r3, r3, #28
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	019a      	lsls	r2, r3, #6
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	041b      	lsls	r3, r3, #16
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	061b      	lsls	r3, r3, #24
 8002acc:	431a      	orrs	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	071b      	lsls	r3, r3, #28
 8002ad2:	4929      	ldr	r1, [pc, #164]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d028      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ae6:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aec:	0e1b      	lsrs	r3, r3, #24
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002af4:	4b20      	ldr	r3, [pc, #128]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	0c1b      	lsrs	r3, r3, #16
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	019a      	lsls	r2, r3, #6
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	041b      	lsls	r3, r3, #16
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	061b      	lsls	r3, r3, #24
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	071b      	lsls	r3, r3, #28
 8002b1a:	4917      	ldr	r1, [pc, #92]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	4911      	ldr	r1, [pc, #68]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b38:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b44:	f7fe f93a 	bl	8000dbc <HAL_GetTick>
 8002b48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b4c:	f7fe f936 	bl	8000dbc <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e007      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b6a:	d1ef      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3720      	adds	r7, #32
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800

08002b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e040      	b.n	8002c10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fd ff78 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2224      	movs	r2, #36	; 0x24
 8002ba8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f82c 	bl	8002c18 <UART_SetConfig>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e022      	b.n	8002c10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fa84 	bl	80030e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fb0b 	bl	8003224 <UART_CheckIdleState>
 8002c0e:	4603      	mov	r3, r0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4ba6      	ldr	r3, [pc, #664]	; (8002edc <UART_SetConfig+0x2c4>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	6979      	ldr	r1, [r7, #20]
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a94      	ldr	r2, [pc, #592]	; (8002ee0 <UART_SetConfig+0x2c8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d120      	bne.n	8002cd6 <UART_SetConfig+0xbe>
 8002c94:	4b93      	ldr	r3, [pc, #588]	; (8002ee4 <UART_SetConfig+0x2cc>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d816      	bhi.n	8002cd0 <UART_SetConfig+0xb8>
 8002ca2:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <UART_SetConfig+0x90>)
 8002ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca8:	08002cb9 	.word	0x08002cb9
 8002cac:	08002cc5 	.word	0x08002cc5
 8002cb0:	08002cbf 	.word	0x08002cbf
 8002cb4:	08002ccb 	.word	0x08002ccb
 8002cb8:	2301      	movs	r3, #1
 8002cba:	77fb      	strb	r3, [r7, #31]
 8002cbc:	e150      	b.n	8002f60 <UART_SetConfig+0x348>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	77fb      	strb	r3, [r7, #31]
 8002cc2:	e14d      	b.n	8002f60 <UART_SetConfig+0x348>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	77fb      	strb	r3, [r7, #31]
 8002cc8:	e14a      	b.n	8002f60 <UART_SetConfig+0x348>
 8002cca:	2308      	movs	r3, #8
 8002ccc:	77fb      	strb	r3, [r7, #31]
 8002cce:	e147      	b.n	8002f60 <UART_SetConfig+0x348>
 8002cd0:	2310      	movs	r3, #16
 8002cd2:	77fb      	strb	r3, [r7, #31]
 8002cd4:	e144      	b.n	8002f60 <UART_SetConfig+0x348>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a83      	ldr	r2, [pc, #524]	; (8002ee8 <UART_SetConfig+0x2d0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d132      	bne.n	8002d46 <UART_SetConfig+0x12e>
 8002ce0:	4b80      	ldr	r3, [pc, #512]	; (8002ee4 <UART_SetConfig+0x2cc>)
 8002ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d828      	bhi.n	8002d40 <UART_SetConfig+0x128>
 8002cee:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <UART_SetConfig+0xdc>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002d29 	.word	0x08002d29
 8002cf8:	08002d41 	.word	0x08002d41
 8002cfc:	08002d41 	.word	0x08002d41
 8002d00:	08002d41 	.word	0x08002d41
 8002d04:	08002d35 	.word	0x08002d35
 8002d08:	08002d41 	.word	0x08002d41
 8002d0c:	08002d41 	.word	0x08002d41
 8002d10:	08002d41 	.word	0x08002d41
 8002d14:	08002d2f 	.word	0x08002d2f
 8002d18:	08002d41 	.word	0x08002d41
 8002d1c:	08002d41 	.word	0x08002d41
 8002d20:	08002d41 	.word	0x08002d41
 8002d24:	08002d3b 	.word	0x08002d3b
 8002d28:	2300      	movs	r3, #0
 8002d2a:	77fb      	strb	r3, [r7, #31]
 8002d2c:	e118      	b.n	8002f60 <UART_SetConfig+0x348>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	77fb      	strb	r3, [r7, #31]
 8002d32:	e115      	b.n	8002f60 <UART_SetConfig+0x348>
 8002d34:	2304      	movs	r3, #4
 8002d36:	77fb      	strb	r3, [r7, #31]
 8002d38:	e112      	b.n	8002f60 <UART_SetConfig+0x348>
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	77fb      	strb	r3, [r7, #31]
 8002d3e:	e10f      	b.n	8002f60 <UART_SetConfig+0x348>
 8002d40:	2310      	movs	r3, #16
 8002d42:	77fb      	strb	r3, [r7, #31]
 8002d44:	e10c      	b.n	8002f60 <UART_SetConfig+0x348>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a68      	ldr	r2, [pc, #416]	; (8002eec <UART_SetConfig+0x2d4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d120      	bne.n	8002d92 <UART_SetConfig+0x17a>
 8002d50:	4b64      	ldr	r3, [pc, #400]	; (8002ee4 <UART_SetConfig+0x2cc>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d5a:	2b30      	cmp	r3, #48	; 0x30
 8002d5c:	d013      	beq.n	8002d86 <UART_SetConfig+0x16e>
 8002d5e:	2b30      	cmp	r3, #48	; 0x30
 8002d60:	d814      	bhi.n	8002d8c <UART_SetConfig+0x174>
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	d009      	beq.n	8002d7a <UART_SetConfig+0x162>
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d810      	bhi.n	8002d8c <UART_SetConfig+0x174>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <UART_SetConfig+0x15c>
 8002d6e:	2b10      	cmp	r3, #16
 8002d70:	d006      	beq.n	8002d80 <UART_SetConfig+0x168>
 8002d72:	e00b      	b.n	8002d8c <UART_SetConfig+0x174>
 8002d74:	2300      	movs	r3, #0
 8002d76:	77fb      	strb	r3, [r7, #31]
 8002d78:	e0f2      	b.n	8002f60 <UART_SetConfig+0x348>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	77fb      	strb	r3, [r7, #31]
 8002d7e:	e0ef      	b.n	8002f60 <UART_SetConfig+0x348>
 8002d80:	2304      	movs	r3, #4
 8002d82:	77fb      	strb	r3, [r7, #31]
 8002d84:	e0ec      	b.n	8002f60 <UART_SetConfig+0x348>
 8002d86:	2308      	movs	r3, #8
 8002d88:	77fb      	strb	r3, [r7, #31]
 8002d8a:	e0e9      	b.n	8002f60 <UART_SetConfig+0x348>
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	77fb      	strb	r3, [r7, #31]
 8002d90:	e0e6      	b.n	8002f60 <UART_SetConfig+0x348>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a56      	ldr	r2, [pc, #344]	; (8002ef0 <UART_SetConfig+0x2d8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d120      	bne.n	8002dde <UART_SetConfig+0x1c6>
 8002d9c:	4b51      	ldr	r3, [pc, #324]	; (8002ee4 <UART_SetConfig+0x2cc>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002da6:	2bc0      	cmp	r3, #192	; 0xc0
 8002da8:	d013      	beq.n	8002dd2 <UART_SetConfig+0x1ba>
 8002daa:	2bc0      	cmp	r3, #192	; 0xc0
 8002dac:	d814      	bhi.n	8002dd8 <UART_SetConfig+0x1c0>
 8002dae:	2b80      	cmp	r3, #128	; 0x80
 8002db0:	d009      	beq.n	8002dc6 <UART_SetConfig+0x1ae>
 8002db2:	2b80      	cmp	r3, #128	; 0x80
 8002db4:	d810      	bhi.n	8002dd8 <UART_SetConfig+0x1c0>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <UART_SetConfig+0x1a8>
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d006      	beq.n	8002dcc <UART_SetConfig+0x1b4>
 8002dbe:	e00b      	b.n	8002dd8 <UART_SetConfig+0x1c0>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	77fb      	strb	r3, [r7, #31]
 8002dc4:	e0cc      	b.n	8002f60 <UART_SetConfig+0x348>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	77fb      	strb	r3, [r7, #31]
 8002dca:	e0c9      	b.n	8002f60 <UART_SetConfig+0x348>
 8002dcc:	2304      	movs	r3, #4
 8002dce:	77fb      	strb	r3, [r7, #31]
 8002dd0:	e0c6      	b.n	8002f60 <UART_SetConfig+0x348>
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	77fb      	strb	r3, [r7, #31]
 8002dd6:	e0c3      	b.n	8002f60 <UART_SetConfig+0x348>
 8002dd8:	2310      	movs	r3, #16
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	e0c0      	b.n	8002f60 <UART_SetConfig+0x348>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a44      	ldr	r2, [pc, #272]	; (8002ef4 <UART_SetConfig+0x2dc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d125      	bne.n	8002e34 <UART_SetConfig+0x21c>
 8002de8:	4b3e      	ldr	r3, [pc, #248]	; (8002ee4 <UART_SetConfig+0x2cc>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002df6:	d017      	beq.n	8002e28 <UART_SetConfig+0x210>
 8002df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dfc:	d817      	bhi.n	8002e2e <UART_SetConfig+0x216>
 8002dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e02:	d00b      	beq.n	8002e1c <UART_SetConfig+0x204>
 8002e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e08:	d811      	bhi.n	8002e2e <UART_SetConfig+0x216>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <UART_SetConfig+0x1fe>
 8002e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e12:	d006      	beq.n	8002e22 <UART_SetConfig+0x20a>
 8002e14:	e00b      	b.n	8002e2e <UART_SetConfig+0x216>
 8002e16:	2300      	movs	r3, #0
 8002e18:	77fb      	strb	r3, [r7, #31]
 8002e1a:	e0a1      	b.n	8002f60 <UART_SetConfig+0x348>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	77fb      	strb	r3, [r7, #31]
 8002e20:	e09e      	b.n	8002f60 <UART_SetConfig+0x348>
 8002e22:	2304      	movs	r3, #4
 8002e24:	77fb      	strb	r3, [r7, #31]
 8002e26:	e09b      	b.n	8002f60 <UART_SetConfig+0x348>
 8002e28:	2308      	movs	r3, #8
 8002e2a:	77fb      	strb	r3, [r7, #31]
 8002e2c:	e098      	b.n	8002f60 <UART_SetConfig+0x348>
 8002e2e:	2310      	movs	r3, #16
 8002e30:	77fb      	strb	r3, [r7, #31]
 8002e32:	e095      	b.n	8002f60 <UART_SetConfig+0x348>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a2f      	ldr	r2, [pc, #188]	; (8002ef8 <UART_SetConfig+0x2e0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d125      	bne.n	8002e8a <UART_SetConfig+0x272>
 8002e3e:	4b29      	ldr	r3, [pc, #164]	; (8002ee4 <UART_SetConfig+0x2cc>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e4c:	d017      	beq.n	8002e7e <UART_SetConfig+0x266>
 8002e4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e52:	d817      	bhi.n	8002e84 <UART_SetConfig+0x26c>
 8002e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e58:	d00b      	beq.n	8002e72 <UART_SetConfig+0x25a>
 8002e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5e:	d811      	bhi.n	8002e84 <UART_SetConfig+0x26c>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <UART_SetConfig+0x254>
 8002e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e68:	d006      	beq.n	8002e78 <UART_SetConfig+0x260>
 8002e6a:	e00b      	b.n	8002e84 <UART_SetConfig+0x26c>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	77fb      	strb	r3, [r7, #31]
 8002e70:	e076      	b.n	8002f60 <UART_SetConfig+0x348>
 8002e72:	2302      	movs	r3, #2
 8002e74:	77fb      	strb	r3, [r7, #31]
 8002e76:	e073      	b.n	8002f60 <UART_SetConfig+0x348>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	e070      	b.n	8002f60 <UART_SetConfig+0x348>
 8002e7e:	2308      	movs	r3, #8
 8002e80:	77fb      	strb	r3, [r7, #31]
 8002e82:	e06d      	b.n	8002f60 <UART_SetConfig+0x348>
 8002e84:	2310      	movs	r3, #16
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e06a      	b.n	8002f60 <UART_SetConfig+0x348>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <UART_SetConfig+0x2e4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d138      	bne.n	8002f06 <UART_SetConfig+0x2ee>
 8002e94:	4b13      	ldr	r3, [pc, #76]	; (8002ee4 <UART_SetConfig+0x2cc>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002e9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ea2:	d017      	beq.n	8002ed4 <UART_SetConfig+0x2bc>
 8002ea4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ea8:	d82a      	bhi.n	8002f00 <UART_SetConfig+0x2e8>
 8002eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eae:	d00b      	beq.n	8002ec8 <UART_SetConfig+0x2b0>
 8002eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb4:	d824      	bhi.n	8002f00 <UART_SetConfig+0x2e8>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <UART_SetConfig+0x2aa>
 8002eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebe:	d006      	beq.n	8002ece <UART_SetConfig+0x2b6>
 8002ec0:	e01e      	b.n	8002f00 <UART_SetConfig+0x2e8>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	77fb      	strb	r3, [r7, #31]
 8002ec6:	e04b      	b.n	8002f60 <UART_SetConfig+0x348>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	77fb      	strb	r3, [r7, #31]
 8002ecc:	e048      	b.n	8002f60 <UART_SetConfig+0x348>
 8002ece:	2304      	movs	r3, #4
 8002ed0:	77fb      	strb	r3, [r7, #31]
 8002ed2:	e045      	b.n	8002f60 <UART_SetConfig+0x348>
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	77fb      	strb	r3, [r7, #31]
 8002ed8:	e042      	b.n	8002f60 <UART_SetConfig+0x348>
 8002eda:	bf00      	nop
 8002edc:	efff69f3 	.word	0xefff69f3
 8002ee0:	40011000 	.word	0x40011000
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40004400 	.word	0x40004400
 8002eec:	40004800 	.word	0x40004800
 8002ef0:	40004c00 	.word	0x40004c00
 8002ef4:	40005000 	.word	0x40005000
 8002ef8:	40011400 	.word	0x40011400
 8002efc:	40007800 	.word	0x40007800
 8002f00:	2310      	movs	r3, #16
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e02c      	b.n	8002f60 <UART_SetConfig+0x348>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a72      	ldr	r2, [pc, #456]	; (80030d4 <UART_SetConfig+0x4bc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d125      	bne.n	8002f5c <UART_SetConfig+0x344>
 8002f10:	4b71      	ldr	r3, [pc, #452]	; (80030d8 <UART_SetConfig+0x4c0>)
 8002f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f1e:	d017      	beq.n	8002f50 <UART_SetConfig+0x338>
 8002f20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f24:	d817      	bhi.n	8002f56 <UART_SetConfig+0x33e>
 8002f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f2a:	d00b      	beq.n	8002f44 <UART_SetConfig+0x32c>
 8002f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f30:	d811      	bhi.n	8002f56 <UART_SetConfig+0x33e>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <UART_SetConfig+0x326>
 8002f36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f3a:	d006      	beq.n	8002f4a <UART_SetConfig+0x332>
 8002f3c:	e00b      	b.n	8002f56 <UART_SetConfig+0x33e>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	77fb      	strb	r3, [r7, #31]
 8002f42:	e00d      	b.n	8002f60 <UART_SetConfig+0x348>
 8002f44:	2302      	movs	r3, #2
 8002f46:	77fb      	strb	r3, [r7, #31]
 8002f48:	e00a      	b.n	8002f60 <UART_SetConfig+0x348>
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	77fb      	strb	r3, [r7, #31]
 8002f4e:	e007      	b.n	8002f60 <UART_SetConfig+0x348>
 8002f50:	2308      	movs	r3, #8
 8002f52:	77fb      	strb	r3, [r7, #31]
 8002f54:	e004      	b.n	8002f60 <UART_SetConfig+0x348>
 8002f56:	2310      	movs	r3, #16
 8002f58:	77fb      	strb	r3, [r7, #31]
 8002f5a:	e001      	b.n	8002f60 <UART_SetConfig+0x348>
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f68:	d15b      	bne.n	8003022 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002f6a:	7ffb      	ldrb	r3, [r7, #31]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d828      	bhi.n	8002fc2 <UART_SetConfig+0x3aa>
 8002f70:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <UART_SetConfig+0x360>)
 8002f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f76:	bf00      	nop
 8002f78:	08002f9d 	.word	0x08002f9d
 8002f7c:	08002fa5 	.word	0x08002fa5
 8002f80:	08002fad 	.word	0x08002fad
 8002f84:	08002fc3 	.word	0x08002fc3
 8002f88:	08002fb3 	.word	0x08002fb3
 8002f8c:	08002fc3 	.word	0x08002fc3
 8002f90:	08002fc3 	.word	0x08002fc3
 8002f94:	08002fc3 	.word	0x08002fc3
 8002f98:	08002fbb 	.word	0x08002fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f9c:	f7ff f99e 	bl	80022dc <HAL_RCC_GetPCLK1Freq>
 8002fa0:	61b8      	str	r0, [r7, #24]
        break;
 8002fa2:	e013      	b.n	8002fcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fa4:	f7ff f9ae 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 8002fa8:	61b8      	str	r0, [r7, #24]
        break;
 8002faa:	e00f      	b.n	8002fcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fac:	4b4b      	ldr	r3, [pc, #300]	; (80030dc <UART_SetConfig+0x4c4>)
 8002fae:	61bb      	str	r3, [r7, #24]
        break;
 8002fb0:	e00c      	b.n	8002fcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fb2:	f7ff f881 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002fb6:	61b8      	str	r0, [r7, #24]
        break;
 8002fb8:	e008      	b.n	8002fcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fbe:	61bb      	str	r3, [r7, #24]
        break;
 8002fc0:	e004      	b.n	8002fcc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	77bb      	strb	r3, [r7, #30]
        break;
 8002fca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d074      	beq.n	80030bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	005a      	lsls	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	085b      	lsrs	r3, r3, #1
 8002fdc:	441a      	add	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b0f      	cmp	r3, #15
 8002fec:	d916      	bls.n	800301c <UART_SetConfig+0x404>
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff4:	d212      	bcs.n	800301c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f023 030f 	bic.w	r3, r3, #15
 8002ffe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	b29b      	uxth	r3, r3
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	b29a      	uxth	r2, r3
 800300c:	89fb      	ldrh	r3, [r7, #14]
 800300e:	4313      	orrs	r3, r2
 8003010:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	89fa      	ldrh	r2, [r7, #14]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	e04f      	b.n	80030bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	77bb      	strb	r3, [r7, #30]
 8003020:	e04c      	b.n	80030bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003022:	7ffb      	ldrb	r3, [r7, #31]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d828      	bhi.n	800307a <UART_SetConfig+0x462>
 8003028:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <UART_SetConfig+0x418>)
 800302a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302e:	bf00      	nop
 8003030:	08003055 	.word	0x08003055
 8003034:	0800305d 	.word	0x0800305d
 8003038:	08003065 	.word	0x08003065
 800303c:	0800307b 	.word	0x0800307b
 8003040:	0800306b 	.word	0x0800306b
 8003044:	0800307b 	.word	0x0800307b
 8003048:	0800307b 	.word	0x0800307b
 800304c:	0800307b 	.word	0x0800307b
 8003050:	08003073 	.word	0x08003073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003054:	f7ff f942 	bl	80022dc <HAL_RCC_GetPCLK1Freq>
 8003058:	61b8      	str	r0, [r7, #24]
        break;
 800305a:	e013      	b.n	8003084 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800305c:	f7ff f952 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 8003060:	61b8      	str	r0, [r7, #24]
        break;
 8003062:	e00f      	b.n	8003084 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003064:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <UART_SetConfig+0x4c4>)
 8003066:	61bb      	str	r3, [r7, #24]
        break;
 8003068:	e00c      	b.n	8003084 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800306a:	f7ff f825 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 800306e:	61b8      	str	r0, [r7, #24]
        break;
 8003070:	e008      	b.n	8003084 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003076:	61bb      	str	r3, [r7, #24]
        break;
 8003078:	e004      	b.n	8003084 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	77bb      	strb	r3, [r7, #30]
        break;
 8003082:	bf00      	nop
    }

    if (pclk != 0U)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d018      	beq.n	80030bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	085a      	lsrs	r2, r3, #1
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	441a      	add	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	fbb2 f3f3 	udiv	r3, r2, r3
 800309c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b0f      	cmp	r3, #15
 80030a2:	d909      	bls.n	80030b8 <UART_SetConfig+0x4a0>
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030aa:	d205      	bcs.n	80030b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	e001      	b.n	80030bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80030c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40007c00 	.word	0x40007c00
 80030d8:	40023800 	.word	0x40023800
 80030dc:	00f42400 	.word	0x00f42400

080030e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d01a      	beq.n	80031f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031de:	d10a      	bne.n	80031f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]
  }
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af02      	add	r7, sp, #8
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003234:	f7fd fdc2 	bl	8000dbc <HAL_GetTick>
 8003238:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b08      	cmp	r3, #8
 8003246:	d10e      	bne.n	8003266 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f831 	bl	80032be <UART_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e027      	b.n	80032b6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b04      	cmp	r3, #4
 8003272:	d10e      	bne.n	8003292 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f81b 	bl	80032be <UART_WaitOnFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e011      	b.n	80032b6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b09c      	sub	sp, #112	; 0x70
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	4613      	mov	r3, r2
 80032cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ce:	e0a7      	b.n	8003420 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	f000 80a3 	beq.w	8003420 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032da:	f7fd fd6f 	bl	8000dbc <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80032ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d13f      	bne.n	8003370 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80032fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003300:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003304:	667b      	str	r3, [r7, #100]	; 0x64
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800330e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003310:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003312:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003314:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800331c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e6      	bne.n	80032f0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	3308      	adds	r3, #8
 8003328:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332c:	e853 3f00 	ldrex	r3, [r3]
 8003330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	663b      	str	r3, [r7, #96]	; 0x60
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3308      	adds	r3, #8
 8003340:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003342:	64ba      	str	r2, [r7, #72]	; 0x48
 8003344:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003346:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800334a:	e841 2300 	strex	r3, r2, [r1]
 800334e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e5      	bne.n	8003322 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e068      	b.n	8003442 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d050      	beq.n	8003420 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338c:	d148      	bne.n	8003420 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003396:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b6:	637b      	str	r3, [r7, #52]	; 0x34
 80033b8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e6      	bne.n	8003398 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3308      	adds	r3, #8
 80033d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	613b      	str	r3, [r7, #16]
   return(result);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3308      	adds	r3, #8
 80033e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80033ea:	623a      	str	r2, [r7, #32]
 80033ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ee:	69f9      	ldr	r1, [r7, #28]
 80033f0:	6a3a      	ldr	r2, [r7, #32]
 80033f2:	e841 2300 	strex	r3, r2, [r1]
 80033f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e5      	bne.n	80033ca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2220      	movs	r2, #32
 8003408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e010      	b.n	8003442 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4013      	ands	r3, r2
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	429a      	cmp	r2, r3
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	429a      	cmp	r2, r3
 800343c:	f43f af48 	beq.w	80032d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3770      	adds	r7, #112	; 0x70
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800344c:	b084      	sub	sp, #16
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	f107 001c 	add.w	r0, r7, #28
 800345a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	2b01      	cmp	r3, #1
 8003462:	d120      	bne.n	80034a6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <USB_CoreInit+0xac>)
 8003476:	4013      	ands	r3, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800348a:	2b01      	cmp	r3, #1
 800348c:	d105      	bne.n	800349a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fa96 	bl	80039cc <USB_CoreReset>
 80034a0:	4603      	mov	r3, r0
 80034a2:	73fb      	strb	r3, [r7, #15]
 80034a4:	e010      	b.n	80034c8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fa8a 	bl	80039cc <USB_CoreReset>
 80034b8:	4603      	mov	r3, r0
 80034ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10b      	bne.n	80034e6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f043 0206 	orr.w	r2, r3, #6
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034f2:	b004      	add	sp, #16
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	ffbdffbf 	.word	0xffbdffbf

080034fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f023 0201 	bic.w	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d115      	bne.n	800356c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800354c:	2001      	movs	r0, #1
 800354e:	f7fd fc41 	bl	8000dd4 <HAL_Delay>
      ms++;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3301      	adds	r3, #1
 8003556:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fa29 	bl	80039b0 <USB_GetMode>
 800355e:	4603      	mov	r3, r0
 8003560:	2b01      	cmp	r3, #1
 8003562:	d01e      	beq.n	80035a2 <USB_SetCurrentMode+0x84>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b31      	cmp	r3, #49	; 0x31
 8003568:	d9f0      	bls.n	800354c <USB_SetCurrentMode+0x2e>
 800356a:	e01a      	b.n	80035a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d115      	bne.n	800359e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800357e:	2001      	movs	r0, #1
 8003580:	f7fd fc28 	bl	8000dd4 <HAL_Delay>
      ms++;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	3301      	adds	r3, #1
 8003588:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fa10 	bl	80039b0 <USB_GetMode>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <USB_SetCurrentMode+0x84>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b31      	cmp	r3, #49	; 0x31
 800359a:	d9f0      	bls.n	800357e <USB_SetCurrentMode+0x60>
 800359c:	e001      	b.n	80035a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e005      	b.n	80035ae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b32      	cmp	r3, #50	; 0x32
 80035a6:	d101      	bne.n	80035ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035b8:	b084      	sub	sp, #16
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	e009      	b.n	80035ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	3340      	adds	r3, #64	; 0x40
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	2200      	movs	r2, #0
 80035e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	3301      	adds	r3, #1
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	2b0e      	cmp	r3, #14
 80035f0:	d9f2      	bls.n	80035d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80035f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d11c      	bne.n	8003632 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003606:	f043 0302 	orr.w	r3, r3, #2
 800360a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e005      	b.n	800363e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003644:	461a      	mov	r2, r3
 8003646:	2300      	movs	r3, #0
 8003648:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003650:	4619      	mov	r1, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003658:	461a      	mov	r2, r3
 800365a:	680b      	ldr	r3, [r1, #0]
 800365c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	2b01      	cmp	r3, #1
 8003662:	d10c      	bne.n	800367e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	2b00      	cmp	r3, #0
 8003668:	d104      	bne.n	8003674 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800366a:	2100      	movs	r1, #0
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f965 	bl	800393c <USB_SetDevSpeed>
 8003672:	e008      	b.n	8003686 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003674:	2101      	movs	r1, #1
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f960 	bl	800393c <USB_SetDevSpeed>
 800367c:	e003      	b.n	8003686 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800367e:	2103      	movs	r1, #3
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f95b 	bl	800393c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003686:	2110      	movs	r1, #16
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f8f3 	bl	8003874 <USB_FlushTxFifo>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f91f 	bl	80038dc <USB_FlushRxFifo>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ae:	461a      	mov	r2, r3
 80036b0:	2300      	movs	r3, #0
 80036b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ba:	461a      	mov	r2, r3
 80036bc:	2300      	movs	r3, #0
 80036be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c6:	461a      	mov	r2, r3
 80036c8:	2300      	movs	r3, #0
 80036ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	e043      	b.n	800375a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036e8:	d118      	bne.n	800371c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036fc:	461a      	mov	r2, r3
 80036fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	e013      	b.n	800372e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003712:	461a      	mov	r2, r3
 8003714:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e008      	b.n	800372e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003728:	461a      	mov	r2, r3
 800372a:	2300      	movs	r3, #0
 800372c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4413      	add	r3, r2
 8003736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373a:	461a      	mov	r2, r3
 800373c:	2300      	movs	r3, #0
 800373e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374c:	461a      	mov	r2, r3
 800374e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003752:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	3301      	adds	r3, #1
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	429a      	cmp	r2, r3
 8003760:	d3b7      	bcc.n	80036d2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	e043      	b.n	80037f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800377a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800377e:	d118      	bne.n	80037b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003792:	461a      	mov	r2, r3
 8003794:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e013      	b.n	80037c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a8:	461a      	mov	r2, r3
 80037aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	e008      	b.n	80037c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037be:	461a      	mov	r2, r3
 80037c0:	2300      	movs	r3, #0
 80037c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d0:	461a      	mov	r2, r3
 80037d2:	2300      	movs	r3, #0
 80037d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e2:	461a      	mov	r2, r3
 80037e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	3301      	adds	r3, #1
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d3b7      	bcc.n	8003768 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003806:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800380a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003818:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	2b00      	cmp	r3, #0
 800381e:	d105      	bne.n	800382c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	f043 0210 	orr.w	r2, r3, #16
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	699a      	ldr	r2, [r3, #24]
 8003830:	4b0e      	ldr	r3, [pc, #56]	; (800386c <USB_DevInit+0x2b4>)
 8003832:	4313      	orrs	r3, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f043 0208 	orr.w	r2, r3, #8
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800384a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800384c:	2b01      	cmp	r3, #1
 800384e:	d105      	bne.n	800385c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699a      	ldr	r2, [r3, #24]
 8003854:	4b06      	ldr	r3, [pc, #24]	; (8003870 <USB_DevInit+0x2b8>)
 8003856:	4313      	orrs	r3, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800385c:	7dfb      	ldrb	r3, [r7, #23]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003868:	b004      	add	sp, #16
 800386a:	4770      	bx	lr
 800386c:	803c3800 	.word	0x803c3800
 8003870:	40000004 	.word	0x40000004

08003874 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3301      	adds	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <USB_FlushTxFifo+0x64>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e01b      	b.n	80038cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	daf2      	bge.n	8003882 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	019b      	lsls	r3, r3, #6
 80038a4:	f043 0220 	orr.w	r2, r3, #32
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3301      	adds	r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <USB_FlushTxFifo+0x64>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e006      	b.n	80038cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d0f0      	beq.n	80038ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3714      	adds	r7, #20
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	00030d40 	.word	0x00030d40

080038dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3301      	adds	r3, #1
 80038ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a11      	ldr	r2, [pc, #68]	; (8003938 <USB_FlushRxFifo+0x5c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e018      	b.n	800392c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	daf2      	bge.n	80038e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2210      	movs	r2, #16
 800390a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3301      	adds	r3, #1
 8003910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4a08      	ldr	r2, [pc, #32]	; (8003938 <USB_FlushRxFifo+0x5c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e006      	b.n	800392c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b10      	cmp	r3, #16
 8003928:	d0f0      	beq.n	800390c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	00030d40 	.word	0x00030d40

0800393c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	68f9      	ldr	r1, [r7, #12]
 8003958:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800396e:	b480      	push	{r7}
 8003970:	b085      	sub	sp, #20
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003988:	f023 0303 	bic.w	r3, r3, #3
 800398c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800399c:	f043 0302 	orr.w	r3, r3, #2
 80039a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	f003 0301 	and.w	r3, r3, #1
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3301      	adds	r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <USB_CoreReset+0x64>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e01b      	b.n	8003a22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	daf2      	bge.n	80039d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f043 0201 	orr.w	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3301      	adds	r3, #1
 8003a06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <USB_CoreReset+0x64>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e006      	b.n	8003a22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d0f0      	beq.n	8003a02 <USB_CoreReset+0x36>

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	00030d40 	.word	0x00030d40

08003a34 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003a3c:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <HAL_ETH_RxCpltCallback+0x1c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 f841 	bl	8003ac8 <osSemaphoreRelease>
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	2000a814 	.word	0x2000a814

08003a54 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003a5c:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <HAL_ETH_TxCpltCallback+0x1c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 f831 	bl	8003ac8 <osSemaphoreRelease>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	2000a818 	.word	0x2000a818

08003a74 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7fd fc05 	bl	800128c <HAL_ETH_GetDMAError>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a88:	2b80      	cmp	r3, #128	; 0x80
 8003a8a:	d104      	bne.n	8003a96 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003a8c:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <HAL_ETH_ErrorCallback+0x2c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 f819 	bl	8003ac8 <osSemaphoreRelease>
  }
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	2000a814 	.word	0x2000a814

08003aa4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aaa:	f3ef 8305 	mrs	r3, IPSR
 8003aae:	607b      	str	r3, [r7, #4]
  return(result);
 8003ab0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bf14      	ite	ne
 8003ab6:	2301      	movne	r3, #1
 8003ab8:	2300      	moveq	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003ad8:	f7ff ffe4 	bl	8003aa4 <inHandlerMode>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d016      	beq.n	8003b10 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003ae2:	f107 0308 	add.w	r3, r7, #8
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f9dd 	bl	8003ea8 <xQueueGiveFromISR>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d001      	beq.n	8003af8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003af4:	23ff      	movs	r3, #255	; 0xff
 8003af6:	e017      	b.n	8003b28 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d013      	beq.n	8003b26 <osSemaphoreRelease+0x5e>
 8003afe:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <osSemaphoreRelease+0x68>)
 8003b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	e00a      	b.n	8003b26 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003b10:	2300      	movs	r3, #0
 8003b12:	2200      	movs	r2, #0
 8003b14:	2100      	movs	r1, #0
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f8c0 	bl	8003c9c <xQueueGenericSend>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d001      	beq.n	8003b26 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003b22:	23ff      	movs	r3, #255	; 0xff
 8003b24:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003b26:	68fb      	ldr	r3, [r7, #12]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	e000ed04 	.word	0xe000ed04

08003b34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f103 0208 	add.w	r2, r3, #8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f103 0208 	add.w	r2, r3, #8
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f103 0208 	add.w	r2, r3, #8
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
 8003b96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	601a      	str	r2, [r3, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b085      	sub	sp, #20
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bec:	d103      	bne.n	8003bf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	e00c      	b.n	8003c10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	e002      	b.n	8003c04 <vListInsert+0x2e>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d2f6      	bcs.n	8003bfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	601a      	str	r2, [r3, #0]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6892      	ldr	r2, [r2, #8]
 8003c5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6852      	ldr	r2, [r2, #4]
 8003c68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d103      	bne.n	8003c7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	1e5a      	subs	r2, r3, #1
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08e      	sub	sp, #56	; 0x38
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003caa:	2300      	movs	r3, #0
 8003cac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10c      	bne.n	8003cd2 <xQueueGenericSend+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	b672      	cpsid	i
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	b662      	cpsie	i
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d103      	bne.n	8003ce0 <xQueueGenericSend+0x44>
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <xQueueGenericSend+0x48>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <xQueueGenericSend+0x4a>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10c      	bne.n	8003d04 <xQueueGenericSend+0x68>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	b672      	cpsid	i
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	b662      	cpsie	i
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d00:	bf00      	nop
 8003d02:	e7fe      	b.n	8003d02 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d103      	bne.n	8003d12 <xQueueGenericSend+0x76>
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <xQueueGenericSend+0x7a>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <xQueueGenericSend+0x7c>
 8003d16:	2300      	movs	r3, #0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10c      	bne.n	8003d36 <xQueueGenericSend+0x9a>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	b672      	cpsid	i
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	b662      	cpsie	i
 8003d30:	623b      	str	r3, [r7, #32]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d36:	f000 ff89 	bl	8004c4c <xTaskGetSchedulerState>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d102      	bne.n	8003d46 <xQueueGenericSend+0xaa>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <xQueueGenericSend+0xae>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <xQueueGenericSend+0xb0>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10c      	bne.n	8003d6a <xQueueGenericSend+0xce>
	__asm volatile
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	b672      	cpsid	i
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	b662      	cpsie	i
 8003d64:	61fb      	str	r3, [r7, #28]
}
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d6a:	f001 f987 	bl	800507c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d302      	bcc.n	8003d80 <xQueueGenericSend+0xe4>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d129      	bne.n	8003dd4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d86:	f000 f924 	bl	8003fd2 <prvCopyDataToQueue>
 8003d8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d010      	beq.n	8003db6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	3324      	adds	r3, #36	; 0x24
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fd93 	bl	80048c4 <xTaskRemoveFromEventList>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d013      	beq.n	8003dcc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003da4:	4b3f      	ldr	r3, [pc, #252]	; (8003ea4 <xQueueGenericSend+0x208>)
 8003da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	e00a      	b.n	8003dcc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003dbc:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <xQueueGenericSend+0x208>)
 8003dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003dcc:	f001 f98a 	bl	80050e4 <vPortExitCritical>
				return pdPASS;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e063      	b.n	8003e9c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dda:	f001 f983 	bl	80050e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e05c      	b.n	8003e9c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003de8:	f107 0314 	add.w	r3, r7, #20
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fdcd 	bl	800498c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003df2:	2301      	movs	r3, #1
 8003df4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003df6:	f001 f975 	bl	80050e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dfa:	f000 fb79 	bl	80044f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dfe:	f001 f93d 	bl	800507c <vPortEnterCritical>
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e08:	b25b      	sxtb	r3, r3
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d103      	bne.n	8003e18 <xQueueGenericSend+0x17c>
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e1e:	b25b      	sxtb	r3, r3
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d103      	bne.n	8003e2e <xQueueGenericSend+0x192>
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e2e:	f001 f959 	bl	80050e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e32:	1d3a      	adds	r2, r7, #4
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fdbc 	bl	80049b8 <xTaskCheckForTimeOut>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d124      	bne.n	8003e90 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e48:	f000 f97f 	bl	800414a <prvIsQueueFull>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d018      	beq.n	8003e84 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e54:	3310      	adds	r3, #16
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fd0c 	bl	8004878 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e62:	f000 f920 	bl	80040a6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e66:	f000 fb51 	bl	800450c <xTaskResumeAll>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f47f af7c 	bne.w	8003d6a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8003e72:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <xQueueGenericSend+0x208>)
 8003e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	e772      	b.n	8003d6a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e86:	f000 f90e 	bl	80040a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e8a:	f000 fb3f 	bl	800450c <xTaskResumeAll>
 8003e8e:	e76c      	b.n	8003d6a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e92:	f000 f908 	bl	80040a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e96:	f000 fb39 	bl	800450c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3738      	adds	r7, #56	; 0x38
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	e000ed04 	.word	0xe000ed04

08003ea8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08e      	sub	sp, #56	; 0x38
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10c      	bne.n	8003ed6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	b672      	cpsid	i
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	b662      	cpsie	i
 8003ed0:	623b      	str	r3, [r7, #32]
}
 8003ed2:	bf00      	nop
 8003ed4:	e7fe      	b.n	8003ed4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <xQueueGiveFromISR+0x50>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee2:	b672      	cpsid	i
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	b662      	cpsie	i
 8003ef2:	61fb      	str	r3, [r7, #28]
}
 8003ef4:	bf00      	nop
 8003ef6:	e7fe      	b.n	8003ef6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d103      	bne.n	8003f08 <xQueueGiveFromISR+0x60>
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <xQueueGiveFromISR+0x64>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <xQueueGiveFromISR+0x66>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10c      	bne.n	8003f2c <xQueueGiveFromISR+0x84>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	b672      	cpsid	i
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	b662      	cpsie	i
 8003f26:	61bb      	str	r3, [r7, #24]
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f2c:	f001 f98e 	bl	800524c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f30:	f3ef 8211 	mrs	r2, BASEPRI
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	b672      	cpsid	i
 8003f3a:	f383 8811 	msr	BASEPRI, r3
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f3bf 8f4f 	dsb	sy
 8003f46:	b662      	cpsie	i
 8003f48:	617a      	str	r2, [r7, #20]
 8003f4a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f4c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d22b      	bcs.n	8003fb8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f70:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	d112      	bne.n	8003fa2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d016      	beq.n	8003fb2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f86:	3324      	adds	r3, #36	; 0x24
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fc9b 	bl	80048c4 <xTaskRemoveFromEventList>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00e      	beq.n	8003fb2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	e007      	b.n	8003fb2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	b25a      	sxtb	r2, r3
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb6:	e001      	b.n	8003fbc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbe:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003fc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3738      	adds	r7, #56	; 0x38
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b086      	sub	sp, #24
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10d      	bne.n	800400c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d14d      	bne.n	8004094 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fe43 	bl	8004c88 <xTaskPriorityDisinherit>
 8004002:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
 800400a:	e043      	b.n	8004094 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d119      	bne.n	8004046 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6858      	ldr	r0, [r3, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	461a      	mov	r2, r3
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	f001 fa35 	bl	800548c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	441a      	add	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	429a      	cmp	r2, r3
 800403a:	d32b      	bcc.n	8004094 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	605a      	str	r2, [r3, #4]
 8004044:	e026      	b.n	8004094 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68d8      	ldr	r0, [r3, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	461a      	mov	r2, r3
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	f001 fa1b 	bl	800548c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	425b      	negs	r3, r3
 8004060:	441a      	add	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d207      	bcs.n	8004082 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	425b      	negs	r3, r3
 800407c:	441a      	add	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b02      	cmp	r3, #2
 8004086:	d105      	bne.n	8004094 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	3b01      	subs	r3, #1
 8004092:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800409c:	697b      	ldr	r3, [r7, #20]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040ae:	f000 ffe5 	bl	800507c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040b8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040ba:	e011      	b.n	80040e0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d012      	beq.n	80040ea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3324      	adds	r3, #36	; 0x24
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fbfb 	bl	80048c4 <xTaskRemoveFromEventList>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040d4:	f000 fcd6 	bl	8004a84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	3b01      	subs	r3, #1
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	dce9      	bgt.n	80040bc <prvUnlockQueue+0x16>
 80040e8:	e000      	b.n	80040ec <prvUnlockQueue+0x46>
					break;
 80040ea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	22ff      	movs	r2, #255	; 0xff
 80040f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040f4:	f000 fff6 	bl	80050e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040f8:	f000 ffc0 	bl	800507c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004102:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004104:	e011      	b.n	800412a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d012      	beq.n	8004134 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3310      	adds	r3, #16
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fbd6 	bl	80048c4 <xTaskRemoveFromEventList>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800411e:	f000 fcb1 	bl	8004a84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004122:	7bbb      	ldrb	r3, [r7, #14]
 8004124:	3b01      	subs	r3, #1
 8004126:	b2db      	uxtb	r3, r3
 8004128:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800412a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800412e:	2b00      	cmp	r3, #0
 8004130:	dce9      	bgt.n	8004106 <prvUnlockQueue+0x60>
 8004132:	e000      	b.n	8004136 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004134:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	22ff      	movs	r2, #255	; 0xff
 800413a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800413e:	f000 ffd1 	bl	80050e4 <vPortExitCritical>
}
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004152:	f000 ff93 	bl	800507c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	429a      	cmp	r2, r3
 8004160:	d102      	bne.n	8004168 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004162:	2301      	movs	r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e001      	b.n	800416c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800416c:	f000 ffba 	bl	80050e4 <vPortExitCritical>

	return xReturn;
 8004170:	68fb      	ldr	r3, [r7, #12]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800417a:	b580      	push	{r7, lr}
 800417c:	b08e      	sub	sp, #56	; 0x38
 800417e:	af04      	add	r7, sp, #16
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10c      	bne.n	80041a8 <xTaskCreateStatic+0x2e>
	__asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	b672      	cpsid	i
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	b662      	cpsie	i
 80041a2:	623b      	str	r3, [r7, #32]
}
 80041a4:	bf00      	nop
 80041a6:	e7fe      	b.n	80041a6 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80041a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10c      	bne.n	80041c8 <xTaskCreateStatic+0x4e>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b2:	b672      	cpsid	i
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	b662      	cpsie	i
 80041c2:	61fb      	str	r3, [r7, #28]
}
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041c8:	2354      	movs	r3, #84	; 0x54
 80041ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b54      	cmp	r3, #84	; 0x54
 80041d0:	d00c      	beq.n	80041ec <xTaskCreateStatic+0x72>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d6:	b672      	cpsid	i
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	b662      	cpsie	i
 80041e6:	61bb      	str	r3, [r7, #24]
}
 80041e8:	bf00      	nop
 80041ea:	e7fe      	b.n	80041ea <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01e      	beq.n	8004232 <xTaskCreateStatic+0xb8>
 80041f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01b      	beq.n	8004232 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004202:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	2202      	movs	r2, #2
 8004208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800420c:	2300      	movs	r3, #0
 800420e:	9303      	str	r3, [sp, #12]
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	9302      	str	r3, [sp, #8]
 8004214:	f107 0314 	add.w	r3, r7, #20
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f80b 	bl	8004240 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800422a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800422c:	f000 f892 	bl	8004354 <prvAddNewTaskToReadyList>
 8004230:	e001      	b.n	8004236 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004236:	697b      	ldr	r3, [r7, #20]
	}
 8004238:	4618      	mov	r0, r3
 800423a:	3728      	adds	r7, #40	; 0x28
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004258:	440b      	add	r3, r1
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	f023 0307 	bic.w	r3, r3, #7
 8004266:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00c      	beq.n	800428c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	b672      	cpsid	i
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	b662      	cpsie	i
 8004286:	617b      	str	r3, [r7, #20]
}
 8004288:	bf00      	nop
 800428a:	e7fe      	b.n	800428a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01f      	beq.n	80042d2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004292:	2300      	movs	r3, #0
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	e012      	b.n	80042be <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	7819      	ldrb	r1, [r3, #0]
 80042a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	4413      	add	r3, r2
 80042a6:	3334      	adds	r3, #52	; 0x34
 80042a8:	460a      	mov	r2, r1
 80042aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d006      	beq.n	80042c6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	3301      	adds	r3, #1
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	2b0f      	cmp	r3, #15
 80042c2:	d9e9      	bls.n	8004298 <prvInitialiseNewTask+0x58>
 80042c4:	e000      	b.n	80042c8 <prvInitialiseNewTask+0x88>
			{
				break;
 80042c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d0:	e003      	b.n	80042da <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	2b06      	cmp	r3, #6
 80042de:	d901      	bls.n	80042e4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042e0:	2306      	movs	r3, #6
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	2200      	movs	r2, #0
 80042f4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	3304      	adds	r3, #4
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fc3a 	bl	8003b74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	3318      	adds	r3, #24
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff fc35 	bl	8003b74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	f1c3 0207 	rsb	r2, r3, #7
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	2200      	movs	r2, #0
 8004324:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	69b8      	ldr	r0, [r7, #24]
 8004334:	f000 fd98 	bl	8004e68 <pxPortInitialiseStack>
 8004338:	4602      	mov	r2, r0
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004348:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800434a:	bf00      	nop
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800435c:	f000 fe8e 	bl	800507c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004360:	4b2a      	ldr	r3, [pc, #168]	; (800440c <prvAddNewTaskToReadyList+0xb8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3301      	adds	r3, #1
 8004366:	4a29      	ldr	r2, [pc, #164]	; (800440c <prvAddNewTaskToReadyList+0xb8>)
 8004368:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800436a:	4b29      	ldr	r3, [pc, #164]	; (8004410 <prvAddNewTaskToReadyList+0xbc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004372:	4a27      	ldr	r2, [pc, #156]	; (8004410 <prvAddNewTaskToReadyList+0xbc>)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004378:	4b24      	ldr	r3, [pc, #144]	; (800440c <prvAddNewTaskToReadyList+0xb8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d110      	bne.n	80043a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004380:	f000 fba4 	bl	8004acc <prvInitialiseTaskLists>
 8004384:	e00d      	b.n	80043a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004386:	4b23      	ldr	r3, [pc, #140]	; (8004414 <prvAddNewTaskToReadyList+0xc0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800438e:	4b20      	ldr	r3, [pc, #128]	; (8004410 <prvAddNewTaskToReadyList+0xbc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	429a      	cmp	r2, r3
 800439a:	d802      	bhi.n	80043a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800439c:	4a1c      	ldr	r2, [pc, #112]	; (8004410 <prvAddNewTaskToReadyList+0xbc>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043a2:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <prvAddNewTaskToReadyList+0xc4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3301      	adds	r3, #1
 80043a8:	4a1b      	ldr	r2, [pc, #108]	; (8004418 <prvAddNewTaskToReadyList+0xc4>)
 80043aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	2201      	movs	r2, #1
 80043b2:	409a      	lsls	r2, r3
 80043b4:	4b19      	ldr	r3, [pc, #100]	; (800441c <prvAddNewTaskToReadyList+0xc8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	4a18      	ldr	r2, [pc, #96]	; (800441c <prvAddNewTaskToReadyList+0xc8>)
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4a15      	ldr	r2, [pc, #84]	; (8004420 <prvAddNewTaskToReadyList+0xcc>)
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3304      	adds	r3, #4
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f7ff fbda 	bl	8003b8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043da:	f000 fe83 	bl	80050e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <prvAddNewTaskToReadyList+0xc0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00e      	beq.n	8004404 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <prvAddNewTaskToReadyList+0xbc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d207      	bcs.n	8004404 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <prvAddNewTaskToReadyList+0xd0>)
 80043f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004404:	bf00      	nop
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	2000a9cc 	.word	0x2000a9cc
 8004410:	2000a8cc 	.word	0x2000a8cc
 8004414:	2000a9d8 	.word	0x2000a9d8
 8004418:	2000a9e8 	.word	0x2000a9e8
 800441c:	2000a9d4 	.word	0x2000a9d4
 8004420:	2000a8d0 	.word	0x2000a8d0
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b08a      	sub	sp, #40	; 0x28
 800442c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004432:	2300      	movs	r3, #0
 8004434:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004436:	463a      	mov	r2, r7
 8004438:	1d39      	adds	r1, r7, #4
 800443a:	f107 0308 	add.w	r3, r7, #8
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc f880 	bl	8000544 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004444:	6839      	ldr	r1, [r7, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	9202      	str	r2, [sp, #8]
 800444c:	9301      	str	r3, [sp, #4]
 800444e:	2300      	movs	r3, #0
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	2300      	movs	r3, #0
 8004454:	460a      	mov	r2, r1
 8004456:	4920      	ldr	r1, [pc, #128]	; (80044d8 <vTaskStartScheduler+0xb0>)
 8004458:	4820      	ldr	r0, [pc, #128]	; (80044dc <vTaskStartScheduler+0xb4>)
 800445a:	f7ff fe8e 	bl	800417a <xTaskCreateStatic>
 800445e:	4603      	mov	r3, r0
 8004460:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <vTaskStartScheduler+0xb8>)
 8004462:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004464:	4b1e      	ldr	r3, [pc, #120]	; (80044e0 <vTaskStartScheduler+0xb8>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800446c:	2301      	movs	r3, #1
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e001      	b.n	8004476 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d118      	bne.n	80044ae <vTaskStartScheduler+0x86>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	b672      	cpsid	i
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	b662      	cpsie	i
 8004490:	613b      	str	r3, [r7, #16]
}
 8004492:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004494:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <vTaskStartScheduler+0xbc>)
 8004496:	f04f 32ff 	mov.w	r2, #4294967295
 800449a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800449c:	4b12      	ldr	r3, [pc, #72]	; (80044e8 <vTaskStartScheduler+0xc0>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044a2:	4b12      	ldr	r3, [pc, #72]	; (80044ec <vTaskStartScheduler+0xc4>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044a8:	f000 fd6a 	bl	8004f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044ac:	e010      	b.n	80044d0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d10c      	bne.n	80044d0 <vTaskStartScheduler+0xa8>
	__asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ba:	b672      	cpsid	i
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	b662      	cpsie	i
 80044ca:	60fb      	str	r3, [r7, #12]
}
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <vTaskStartScheduler+0xa6>
}
 80044d0:	bf00      	nop
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	080054e0 	.word	0x080054e0
 80044dc:	08004a9d 	.word	0x08004a9d
 80044e0:	2000a9f0 	.word	0x2000a9f0
 80044e4:	2000a9ec 	.word	0x2000a9ec
 80044e8:	2000a9d8 	.word	0x2000a9d8
 80044ec:	2000a9d0 	.word	0x2000a9d0

080044f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <vTaskSuspendAll+0x18>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3301      	adds	r3, #1
 80044fa:	4a03      	ldr	r2, [pc, #12]	; (8004508 <vTaskSuspendAll+0x18>)
 80044fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80044fe:	bf00      	nop
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	2000a9f4 	.word	0x2000a9f4

0800450c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004516:	2300      	movs	r3, #0
 8004518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800451a:	4b42      	ldr	r3, [pc, #264]	; (8004624 <xTaskResumeAll+0x118>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10c      	bne.n	800453c <xTaskResumeAll+0x30>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	b672      	cpsid	i
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	b662      	cpsie	i
 8004536:	603b      	str	r3, [r7, #0]
}
 8004538:	bf00      	nop
 800453a:	e7fe      	b.n	800453a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800453c:	f000 fd9e 	bl	800507c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004540:	4b38      	ldr	r3, [pc, #224]	; (8004624 <xTaskResumeAll+0x118>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3b01      	subs	r3, #1
 8004546:	4a37      	ldr	r2, [pc, #220]	; (8004624 <xTaskResumeAll+0x118>)
 8004548:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800454a:	4b36      	ldr	r3, [pc, #216]	; (8004624 <xTaskResumeAll+0x118>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d161      	bne.n	8004616 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004552:	4b35      	ldr	r3, [pc, #212]	; (8004628 <xTaskResumeAll+0x11c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d05d      	beq.n	8004616 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800455a:	e02e      	b.n	80045ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800455c:	4b33      	ldr	r3, [pc, #204]	; (800462c <xTaskResumeAll+0x120>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3318      	adds	r3, #24
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff fb6d 	bl	8003c48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3304      	adds	r3, #4
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fb68 	bl	8003c48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	2201      	movs	r2, #1
 800457e:	409a      	lsls	r2, r3
 8004580:	4b2b      	ldr	r3, [pc, #172]	; (8004630 <xTaskResumeAll+0x124>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4313      	orrs	r3, r2
 8004586:	4a2a      	ldr	r2, [pc, #168]	; (8004630 <xTaskResumeAll+0x124>)
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4a27      	ldr	r2, [pc, #156]	; (8004634 <xTaskResumeAll+0x128>)
 8004598:	441a      	add	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3304      	adds	r3, #4
 800459e:	4619      	mov	r1, r3
 80045a0:	4610      	mov	r0, r2
 80045a2:	f7ff faf4 	bl	8003b8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045aa:	4b23      	ldr	r3, [pc, #140]	; (8004638 <xTaskResumeAll+0x12c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d302      	bcc.n	80045ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80045b4:	4b21      	ldr	r3, [pc, #132]	; (800463c <xTaskResumeAll+0x130>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ba:	4b1c      	ldr	r3, [pc, #112]	; (800462c <xTaskResumeAll+0x120>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1cc      	bne.n	800455c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045c8:	f000 fb20 	bl	8004c0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045cc:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <xTaskResumeAll+0x134>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d010      	beq.n	80045fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045d8:	f000 f836 	bl	8004648 <xTaskIncrementTick>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80045e2:	4b16      	ldr	r3, [pc, #88]	; (800463c <xTaskResumeAll+0x130>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f1      	bne.n	80045d8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <xTaskResumeAll+0x134>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <xTaskResumeAll+0x130>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004602:	2301      	movs	r3, #1
 8004604:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004606:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <xTaskResumeAll+0x138>)
 8004608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004616:	f000 fd65 	bl	80050e4 <vPortExitCritical>

	return xAlreadyYielded;
 800461a:	68bb      	ldr	r3, [r7, #8]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	2000a9f4 	.word	0x2000a9f4
 8004628:	2000a9cc 	.word	0x2000a9cc
 800462c:	2000a98c 	.word	0x2000a98c
 8004630:	2000a9d4 	.word	0x2000a9d4
 8004634:	2000a8d0 	.word	0x2000a8d0
 8004638:	2000a8cc 	.word	0x2000a8cc
 800463c:	2000a9e0 	.word	0x2000a9e0
 8004640:	2000a9dc 	.word	0x2000a9dc
 8004644:	e000ed04 	.word	0xe000ed04

08004648 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004652:	4b4f      	ldr	r3, [pc, #316]	; (8004790 <xTaskIncrementTick+0x148>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f040 808a 	bne.w	8004770 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800465c:	4b4d      	ldr	r3, [pc, #308]	; (8004794 <xTaskIncrementTick+0x14c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3301      	adds	r3, #1
 8004662:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004664:	4a4b      	ldr	r2, [pc, #300]	; (8004794 <xTaskIncrementTick+0x14c>)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d122      	bne.n	80046b6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004670:	4b49      	ldr	r3, [pc, #292]	; (8004798 <xTaskIncrementTick+0x150>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00c      	beq.n	8004694 <xTaskIncrementTick+0x4c>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	b672      	cpsid	i
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	b662      	cpsie	i
 800468e:	603b      	str	r3, [r7, #0]
}
 8004690:	bf00      	nop
 8004692:	e7fe      	b.n	8004692 <xTaskIncrementTick+0x4a>
 8004694:	4b40      	ldr	r3, [pc, #256]	; (8004798 <xTaskIncrementTick+0x150>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	4b40      	ldr	r3, [pc, #256]	; (800479c <xTaskIncrementTick+0x154>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a3e      	ldr	r2, [pc, #248]	; (8004798 <xTaskIncrementTick+0x150>)
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	4a3e      	ldr	r2, [pc, #248]	; (800479c <xTaskIncrementTick+0x154>)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	4b3d      	ldr	r3, [pc, #244]	; (80047a0 <xTaskIncrementTick+0x158>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3301      	adds	r3, #1
 80046ae:	4a3c      	ldr	r2, [pc, #240]	; (80047a0 <xTaskIncrementTick+0x158>)
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	f000 faab 	bl	8004c0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046b6:	4b3b      	ldr	r3, [pc, #236]	; (80047a4 <xTaskIncrementTick+0x15c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d348      	bcc.n	8004752 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c0:	4b35      	ldr	r3, [pc, #212]	; (8004798 <xTaskIncrementTick+0x150>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d104      	bne.n	80046d4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ca:	4b36      	ldr	r3, [pc, #216]	; (80047a4 <xTaskIncrementTick+0x15c>)
 80046cc:	f04f 32ff 	mov.w	r2, #4294967295
 80046d0:	601a      	str	r2, [r3, #0]
					break;
 80046d2:	e03e      	b.n	8004752 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d4:	4b30      	ldr	r3, [pc, #192]	; (8004798 <xTaskIncrementTick+0x150>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d203      	bcs.n	80046f4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046ec:	4a2d      	ldr	r2, [pc, #180]	; (80047a4 <xTaskIncrementTick+0x15c>)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046f2:	e02e      	b.n	8004752 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	3304      	adds	r3, #4
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff faa5 	bl	8003c48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	2b00      	cmp	r3, #0
 8004704:	d004      	beq.n	8004710 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	3318      	adds	r3, #24
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fa9c 	bl	8003c48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	2201      	movs	r2, #1
 8004716:	409a      	lsls	r2, r3
 8004718:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <xTaskIncrementTick+0x160>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4313      	orrs	r3, r2
 800471e:	4a22      	ldr	r2, [pc, #136]	; (80047a8 <xTaskIncrementTick+0x160>)
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4a1f      	ldr	r2, [pc, #124]	; (80047ac <xTaskIncrementTick+0x164>)
 8004730:	441a      	add	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	3304      	adds	r3, #4
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f7ff fa28 	bl	8003b8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004742:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <xTaskIncrementTick+0x168>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	429a      	cmp	r2, r3
 800474a:	d3b9      	bcc.n	80046c0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004750:	e7b6      	b.n	80046c0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004752:	4b17      	ldr	r3, [pc, #92]	; (80047b0 <xTaskIncrementTick+0x168>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4914      	ldr	r1, [pc, #80]	; (80047ac <xTaskIncrementTick+0x164>)
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d907      	bls.n	800477a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800476a:	2301      	movs	r3, #1
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	e004      	b.n	800477a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004770:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <xTaskIncrementTick+0x16c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3301      	adds	r3, #1
 8004776:	4a0f      	ldr	r2, [pc, #60]	; (80047b4 <xTaskIncrementTick+0x16c>)
 8004778:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800477a:	4b0f      	ldr	r3, [pc, #60]	; (80047b8 <xTaskIncrementTick+0x170>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8004782:	2301      	movs	r3, #1
 8004784:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004786:	697b      	ldr	r3, [r7, #20]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	2000a9f4 	.word	0x2000a9f4
 8004794:	2000a9d0 	.word	0x2000a9d0
 8004798:	2000a984 	.word	0x2000a984
 800479c:	2000a988 	.word	0x2000a988
 80047a0:	2000a9e4 	.word	0x2000a9e4
 80047a4:	2000a9ec 	.word	0x2000a9ec
 80047a8:	2000a9d4 	.word	0x2000a9d4
 80047ac:	2000a8d0 	.word	0x2000a8d0
 80047b0:	2000a8cc 	.word	0x2000a8cc
 80047b4:	2000a9dc 	.word	0x2000a9dc
 80047b8:	2000a9e0 	.word	0x2000a9e0

080047bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047c2:	4b28      	ldr	r3, [pc, #160]	; (8004864 <vTaskSwitchContext+0xa8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047ca:	4b27      	ldr	r3, [pc, #156]	; (8004868 <vTaskSwitchContext+0xac>)
 80047cc:	2201      	movs	r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047d0:	e041      	b.n	8004856 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80047d2:	4b25      	ldr	r3, [pc, #148]	; (8004868 <vTaskSwitchContext+0xac>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d8:	4b24      	ldr	r3, [pc, #144]	; (800486c <vTaskSwitchContext+0xb0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	fab3 f383 	clz	r3, r3
 80047e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047e6:	7afb      	ldrb	r3, [r7, #11]
 80047e8:	f1c3 031f 	rsb	r3, r3, #31
 80047ec:	617b      	str	r3, [r7, #20]
 80047ee:	4920      	ldr	r1, [pc, #128]	; (8004870 <vTaskSwitchContext+0xb4>)
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10c      	bne.n	800481c <vTaskSwitchContext+0x60>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	b672      	cpsid	i
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	b662      	cpsie	i
 8004816:	607b      	str	r3, [r7, #4]
}
 8004818:	bf00      	nop
 800481a:	e7fe      	b.n	800481a <vTaskSwitchContext+0x5e>
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4a12      	ldr	r2, [pc, #72]	; (8004870 <vTaskSwitchContext+0xb4>)
 8004828:	4413      	add	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	3308      	adds	r3, #8
 800483e:	429a      	cmp	r2, r3
 8004840:	d104      	bne.n	800484c <vTaskSwitchContext+0x90>
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	605a      	str	r2, [r3, #4]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	4a08      	ldr	r2, [pc, #32]	; (8004874 <vTaskSwitchContext+0xb8>)
 8004854:	6013      	str	r3, [r2, #0]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	2000a9f4 	.word	0x2000a9f4
 8004868:	2000a9e0 	.word	0x2000a9e0
 800486c:	2000a9d4 	.word	0x2000a9d4
 8004870:	2000a8d0 	.word	0x2000a8d0
 8004874:	2000a8cc 	.word	0x2000a8cc

08004878 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10c      	bne.n	80048a2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	b672      	cpsid	i
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	b662      	cpsie	i
 800489c:	60fb      	str	r3, [r7, #12]
}
 800489e:	bf00      	nop
 80048a0:	e7fe      	b.n	80048a0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048a2:	4b07      	ldr	r3, [pc, #28]	; (80048c0 <vTaskPlaceOnEventList+0x48>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3318      	adds	r3, #24
 80048a8:	4619      	mov	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff f993 	bl	8003bd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048b0:	2101      	movs	r1, #1
 80048b2:	6838      	ldr	r0, [r7, #0]
 80048b4:	f000 fa72 	bl	8004d9c <prvAddCurrentTaskToDelayedList>
}
 80048b8:	bf00      	nop
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	2000a8cc 	.word	0x2000a8cc

080048c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10c      	bne.n	80048f4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	b672      	cpsid	i
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	b662      	cpsie	i
 80048ee:	60fb      	str	r3, [r7, #12]
}
 80048f0:	bf00      	nop
 80048f2:	e7fe      	b.n	80048f2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	3318      	adds	r3, #24
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff f9a5 	bl	8003c48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048fe:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <xTaskRemoveFromEventList+0xb0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d11c      	bne.n	8004940 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3304      	adds	r3, #4
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff f99c 	bl	8003c48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	2201      	movs	r2, #1
 8004916:	409a      	lsls	r2, r3
 8004918:	4b17      	ldr	r3, [pc, #92]	; (8004978 <xTaskRemoveFromEventList+0xb4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4313      	orrs	r3, r2
 800491e:	4a16      	ldr	r2, [pc, #88]	; (8004978 <xTaskRemoveFromEventList+0xb4>)
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4a13      	ldr	r2, [pc, #76]	; (800497c <xTaskRemoveFromEventList+0xb8>)
 8004930:	441a      	add	r2, r3
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	3304      	adds	r3, #4
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f7ff f928 	bl	8003b8e <vListInsertEnd>
 800493e:	e005      	b.n	800494c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	3318      	adds	r3, #24
 8004944:	4619      	mov	r1, r3
 8004946:	480e      	ldr	r0, [pc, #56]	; (8004980 <xTaskRemoveFromEventList+0xbc>)
 8004948:	f7ff f921 	bl	8003b8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <xTaskRemoveFromEventList+0xc0>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004956:	429a      	cmp	r2, r3
 8004958:	d905      	bls.n	8004966 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800495a:	2301      	movs	r3, #1
 800495c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <xTaskRemoveFromEventList+0xc4>)
 8004960:	2201      	movs	r2, #1
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	e001      	b.n	800496a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800496a:	697b      	ldr	r3, [r7, #20]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	2000a9f4 	.word	0x2000a9f4
 8004978:	2000a9d4 	.word	0x2000a9d4
 800497c:	2000a8d0 	.word	0x2000a8d0
 8004980:	2000a98c 	.word	0x2000a98c
 8004984:	2000a8cc 	.word	0x2000a8cc
 8004988:	2000a9e0 	.word	0x2000a9e0

0800498c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <vTaskInternalSetTimeOutState+0x24>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800499c:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <vTaskInternalSetTimeOutState+0x28>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	605a      	str	r2, [r3, #4]
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	2000a9e4 	.word	0x2000a9e4
 80049b4:	2000a9d0 	.word	0x2000a9d0

080049b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10c      	bne.n	80049e2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	b672      	cpsid	i
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	b662      	cpsie	i
 80049dc:	613b      	str	r3, [r7, #16]
}
 80049de:	bf00      	nop
 80049e0:	e7fe      	b.n	80049e0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10c      	bne.n	8004a02 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	b672      	cpsid	i
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	b662      	cpsie	i
 80049fc:	60fb      	str	r3, [r7, #12]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8004a02:	f000 fb3b 	bl	800507c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a06:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <xTaskCheckForTimeOut+0xc4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1e:	d102      	bne.n	8004a26 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	e023      	b.n	8004a6e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <xTaskCheckForTimeOut+0xc8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d007      	beq.n	8004a42 <xTaskCheckForTimeOut+0x8a>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d302      	bcc.n	8004a42 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	61fb      	str	r3, [r7, #28]
 8004a40:	e015      	b.n	8004a6e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d20b      	bcs.n	8004a64 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	1ad2      	subs	r2, r2, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff ff97 	bl	800498c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	e004      	b.n	8004a6e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a6e:	f000 fb39 	bl	80050e4 <vPortExitCritical>

	return xReturn;
 8004a72:	69fb      	ldr	r3, [r7, #28]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3720      	adds	r7, #32
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	2000a9d0 	.word	0x2000a9d0
 8004a80:	2000a9e4 	.word	0x2000a9e4

08004a84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a88:	4b03      	ldr	r3, [pc, #12]	; (8004a98 <vTaskMissedYield+0x14>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
}
 8004a8e:	bf00      	nop
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	2000a9e0 	.word	0x2000a9e0

08004a9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004aa4:	f000 f852 	bl	8004b4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <prvIdleTask+0x28>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d9f9      	bls.n	8004aa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ab0:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <prvIdleTask+0x2c>)
 8004ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ac0:	e7f0      	b.n	8004aa4 <prvIdleTask+0x8>
 8004ac2:	bf00      	nop
 8004ac4:	2000a8d0 	.word	0x2000a8d0
 8004ac8:	e000ed04 	.word	0xe000ed04

08004acc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	e00c      	b.n	8004af2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4a12      	ldr	r2, [pc, #72]	; (8004b2c <prvInitialiseTaskLists+0x60>)
 8004ae4:	4413      	add	r3, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff f824 	bl	8003b34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3301      	adds	r3, #1
 8004af0:	607b      	str	r3, [r7, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b06      	cmp	r3, #6
 8004af6:	d9ef      	bls.n	8004ad8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004af8:	480d      	ldr	r0, [pc, #52]	; (8004b30 <prvInitialiseTaskLists+0x64>)
 8004afa:	f7ff f81b 	bl	8003b34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004afe:	480d      	ldr	r0, [pc, #52]	; (8004b34 <prvInitialiseTaskLists+0x68>)
 8004b00:	f7ff f818 	bl	8003b34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b04:	480c      	ldr	r0, [pc, #48]	; (8004b38 <prvInitialiseTaskLists+0x6c>)
 8004b06:	f7ff f815 	bl	8003b34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b0a:	480c      	ldr	r0, [pc, #48]	; (8004b3c <prvInitialiseTaskLists+0x70>)
 8004b0c:	f7ff f812 	bl	8003b34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b10:	480b      	ldr	r0, [pc, #44]	; (8004b40 <prvInitialiseTaskLists+0x74>)
 8004b12:	f7ff f80f 	bl	8003b34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <prvInitialiseTaskLists+0x78>)
 8004b18:	4a05      	ldr	r2, [pc, #20]	; (8004b30 <prvInitialiseTaskLists+0x64>)
 8004b1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <prvInitialiseTaskLists+0x7c>)
 8004b1e:	4a05      	ldr	r2, [pc, #20]	; (8004b34 <prvInitialiseTaskLists+0x68>)
 8004b20:	601a      	str	r2, [r3, #0]
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	2000a8d0 	.word	0x2000a8d0
 8004b30:	2000a95c 	.word	0x2000a95c
 8004b34:	2000a970 	.word	0x2000a970
 8004b38:	2000a98c 	.word	0x2000a98c
 8004b3c:	2000a9a0 	.word	0x2000a9a0
 8004b40:	2000a9b8 	.word	0x2000a9b8
 8004b44:	2000a984 	.word	0x2000a984
 8004b48:	2000a988 	.word	0x2000a988

08004b4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b52:	e019      	b.n	8004b88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b54:	f000 fa92 	bl	800507c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b58:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <prvCheckTasksWaitingTermination+0x50>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3304      	adds	r3, #4
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff f86f 	bl	8003c48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <prvCheckTasksWaitingTermination+0x54>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	4a0b      	ldr	r2, [pc, #44]	; (8004ba0 <prvCheckTasksWaitingTermination+0x54>)
 8004b72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b74:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <prvCheckTasksWaitingTermination+0x58>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ba4 <prvCheckTasksWaitingTermination+0x58>)
 8004b7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b7e:	f000 fab1 	bl	80050e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f810 	bl	8004ba8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b88:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <prvCheckTasksWaitingTermination+0x58>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e1      	bne.n	8004b54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b90:	bf00      	nop
 8004b92:	bf00      	nop
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	2000a9a0 	.word	0x2000a9a0
 8004ba0:	2000a9cc 	.word	0x2000a9cc
 8004ba4:	2000a9b4 	.word	0x2000a9b4

08004ba8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d108      	bne.n	8004bcc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 fb88 	bl	80052d4 <vPortFree>
				vPortFree( pxTCB );
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fb85 	bl	80052d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bca:	e01a      	b.n	8004c02 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d103      	bne.n	8004bde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fb7c 	bl	80052d4 <vPortFree>
	}
 8004bdc:	e011      	b.n	8004c02 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d00c      	beq.n	8004c02 <prvDeleteTCB+0x5a>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	b672      	cpsid	i
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	b662      	cpsie	i
 8004bfc:	60fb      	str	r3, [r7, #12]
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <prvDeleteTCB+0x58>
	}
 8004c02:	bf00      	nop
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c12:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <prvResetNextTaskUnblockTime+0x38>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d104      	bne.n	8004c26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <prvResetNextTaskUnblockTime+0x3c>)
 8004c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c24:	e008      	b.n	8004c38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c26:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <prvResetNextTaskUnblockTime+0x38>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a04      	ldr	r2, [pc, #16]	; (8004c48 <prvResetNextTaskUnblockTime+0x3c>)
 8004c36:	6013      	str	r3, [r2, #0]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	2000a984 	.word	0x2000a984
 8004c48:	2000a9ec 	.word	0x2000a9ec

08004c4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c52:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <xTaskGetSchedulerState+0x34>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	607b      	str	r3, [r7, #4]
 8004c5e:	e008      	b.n	8004c72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c60:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <xTaskGetSchedulerState+0x38>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c68:	2302      	movs	r3, #2
 8004c6a:	607b      	str	r3, [r7, #4]
 8004c6c:	e001      	b.n	8004c72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c72:	687b      	ldr	r3, [r7, #4]
	}
 8004c74:	4618      	mov	r0, r3
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	2000a9d8 	.word	0x2000a9d8
 8004c84:	2000a9f4 	.word	0x2000a9f4

08004c88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d072      	beq.n	8004d84 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c9e:	4b3c      	ldr	r3, [pc, #240]	; (8004d90 <xTaskPriorityDisinherit+0x108>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d00c      	beq.n	8004cc2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	b672      	cpsid	i
 8004cae:	f383 8811 	msr	BASEPRI, r3
 8004cb2:	f3bf 8f6f 	isb	sy
 8004cb6:	f3bf 8f4f 	dsb	sy
 8004cba:	b662      	cpsie	i
 8004cbc:	60fb      	str	r3, [r7, #12]
}
 8004cbe:	bf00      	nop
 8004cc0:	e7fe      	b.n	8004cc0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10c      	bne.n	8004ce4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	b672      	cpsid	i
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	b662      	cpsie	i
 8004cde:	60bb      	str	r3, [r7, #8]
}
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce8:	1e5a      	subs	r2, r3, #1
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d044      	beq.n	8004d84 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d140      	bne.n	8004d84 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe ff9e 	bl	8003c48 <uxListRemove>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d115      	bne.n	8004d3e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d16:	491f      	ldr	r1, [pc, #124]	; (8004d94 <xTaskPriorityDisinherit+0x10c>)
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <xTaskPriorityDisinherit+0xb6>
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43da      	mvns	r2, r3
 8004d34:	4b18      	ldr	r3, [pc, #96]	; (8004d98 <xTaskPriorityDisinherit+0x110>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <xTaskPriorityDisinherit+0x110>)
 8004d3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	f1c3 0207 	rsb	r2, r3, #7
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	2201      	movs	r2, #1
 8004d58:	409a      	lsls	r2, r3
 8004d5a:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <xTaskPriorityDisinherit+0x110>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	4a0d      	ldr	r2, [pc, #52]	; (8004d98 <xTaskPriorityDisinherit+0x110>)
 8004d62:	6013      	str	r3, [r2, #0]
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <xTaskPriorityDisinherit+0x10c>)
 8004d72:	441a      	add	r2, r3
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	3304      	adds	r3, #4
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	f7fe ff07 	bl	8003b8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d84:	697b      	ldr	r3, [r7, #20]
	}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	2000a8cc 	.word	0x2000a8cc
 8004d94:	2000a8d0 	.word	0x2000a8d0
 8004d98:	2000a9d4 	.word	0x2000a9d4

08004d9c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004da6:	4b29      	ldr	r3, [pc, #164]	; (8004e4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dac:	4b28      	ldr	r3, [pc, #160]	; (8004e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3304      	adds	r3, #4
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe ff48 	bl	8003c48 <uxListRemove>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10b      	bne.n	8004dd6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004dbe:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43da      	mvns	r2, r3
 8004dcc:	4b21      	ldr	r3, [pc, #132]	; (8004e54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	4a20      	ldr	r2, [pc, #128]	; (8004e54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004dd4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ddc:	d10a      	bne.n	8004df4 <prvAddCurrentTaskToDelayedList+0x58>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d007      	beq.n	8004df4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004de4:	4b1a      	ldr	r3, [pc, #104]	; (8004e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3304      	adds	r3, #4
 8004dea:	4619      	mov	r1, r3
 8004dec:	481a      	ldr	r0, [pc, #104]	; (8004e58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004dee:	f7fe fece 	bl	8003b8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004df2:	e026      	b.n	8004e42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4413      	add	r3, r2
 8004dfa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004dfc:	4b14      	ldr	r3, [pc, #80]	; (8004e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d209      	bcs.n	8004e20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e0c:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3304      	adds	r3, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f7fe fedc 	bl	8003bd6 <vListInsert>
}
 8004e1e:	e010      	b.n	8004e42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e20:	4b0f      	ldr	r3, [pc, #60]	; (8004e60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f7fe fed2 	bl	8003bd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e32:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d202      	bcs.n	8004e42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e3c:	4a09      	ldr	r2, [pc, #36]	; (8004e64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6013      	str	r3, [r2, #0]
}
 8004e42:	bf00      	nop
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	2000a9d0 	.word	0x2000a9d0
 8004e50:	2000a8cc 	.word	0x2000a8cc
 8004e54:	2000a9d4 	.word	0x2000a9d4
 8004e58:	2000a9b8 	.word	0x2000a9b8
 8004e5c:	2000a988 	.word	0x2000a988
 8004e60:	2000a984 	.word	0x2000a984
 8004e64:	2000a9ec 	.word	0x2000a9ec

08004e68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	3b04      	subs	r3, #4
 8004e78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3b04      	subs	r3, #4
 8004e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f023 0201 	bic.w	r2, r3, #1
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3b04      	subs	r3, #4
 8004e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e98:	4a0c      	ldr	r2, [pc, #48]	; (8004ecc <pxPortInitialiseStack+0x64>)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3b14      	subs	r3, #20
 8004ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3b04      	subs	r3, #4
 8004eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f06f 0202 	mvn.w	r2, #2
 8004eb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3b20      	subs	r3, #32
 8004ebc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	08004ed1 	.word	0x08004ed1

08004ed0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004eda:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <prvTaskExitError+0x5c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee2:	d00c      	beq.n	8004efe <prvTaskExitError+0x2e>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	b672      	cpsid	i
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	b662      	cpsie	i
 8004ef8:	60fb      	str	r3, [r7, #12]
}
 8004efa:	bf00      	nop
 8004efc:	e7fe      	b.n	8004efc <prvTaskExitError+0x2c>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	b672      	cpsid	i
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	b662      	cpsie	i
 8004f12:	60bb      	str	r3, [r7, #8]
}
 8004f14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f16:	bf00      	nop
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0fc      	beq.n	8004f18 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	2000000c 	.word	0x2000000c

08004f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f30:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <pxCurrentTCBConst2>)
 8004f32:	6819      	ldr	r1, [r3, #0]
 8004f34:	6808      	ldr	r0, [r1, #0]
 8004f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3a:	f380 8809 	msr	PSP, r0
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f04f 0000 	mov.w	r0, #0
 8004f46:	f380 8811 	msr	BASEPRI, r0
 8004f4a:	4770      	bx	lr
 8004f4c:	f3af 8000 	nop.w

08004f50 <pxCurrentTCBConst2>:
 8004f50:	2000a8cc 	.word	0x2000a8cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop

08004f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f58:	4808      	ldr	r0, [pc, #32]	; (8004f7c <prvPortStartFirstTask+0x24>)
 8004f5a:	6800      	ldr	r0, [r0, #0]
 8004f5c:	6800      	ldr	r0, [r0, #0]
 8004f5e:	f380 8808 	msr	MSP, r0
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f380 8814 	msr	CONTROL, r0
 8004f6a:	b662      	cpsie	i
 8004f6c:	b661      	cpsie	f
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	df00      	svc	0
 8004f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f7a:	bf00      	nop
 8004f7c:	e000ed08 	.word	0xe000ed08

08004f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f86:	4b37      	ldr	r3, [pc, #220]	; (8005064 <xPortStartScheduler+0xe4>)
 8004f88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	22ff      	movs	r2, #255	; 0xff
 8004f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	4b2f      	ldr	r3, [pc, #188]	; (8005068 <xPortStartScheduler+0xe8>)
 8004fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fae:	4b2f      	ldr	r3, [pc, #188]	; (800506c <xPortStartScheduler+0xec>)
 8004fb0:	2207      	movs	r2, #7
 8004fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fb4:	e009      	b.n	8004fca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004fb6:	4b2d      	ldr	r3, [pc, #180]	; (800506c <xPortStartScheduler+0xec>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	4a2b      	ldr	r2, [pc, #172]	; (800506c <xPortStartScheduler+0xec>)
 8004fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b80      	cmp	r3, #128	; 0x80
 8004fd4:	d0ef      	beq.n	8004fb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fd6:	4b25      	ldr	r3, [pc, #148]	; (800506c <xPortStartScheduler+0xec>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f1c3 0307 	rsb	r3, r3, #7
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d00c      	beq.n	8004ffc <xPortStartScheduler+0x7c>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	b672      	cpsid	i
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	b662      	cpsie	i
 8004ff6:	60bb      	str	r3, [r7, #8]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	; (800506c <xPortStartScheduler+0xec>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	021b      	lsls	r3, r3, #8
 8005002:	4a1a      	ldr	r2, [pc, #104]	; (800506c <xPortStartScheduler+0xec>)
 8005004:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005006:	4b19      	ldr	r3, [pc, #100]	; (800506c <xPortStartScheduler+0xec>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800500e:	4a17      	ldr	r2, [pc, #92]	; (800506c <xPortStartScheduler+0xec>)
 8005010:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	b2da      	uxtb	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800501a:	4b15      	ldr	r3, [pc, #84]	; (8005070 <xPortStartScheduler+0xf0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a14      	ldr	r2, [pc, #80]	; (8005070 <xPortStartScheduler+0xf0>)
 8005020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005024:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005026:	4b12      	ldr	r3, [pc, #72]	; (8005070 <xPortStartScheduler+0xf0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a11      	ldr	r2, [pc, #68]	; (8005070 <xPortStartScheduler+0xf0>)
 800502c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005030:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005032:	f000 f8dd 	bl	80051f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005036:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <xPortStartScheduler+0xf4>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800503c:	f000 f8fc 	bl	8005238 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005040:	4b0d      	ldr	r3, [pc, #52]	; (8005078 <xPortStartScheduler+0xf8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a0c      	ldr	r2, [pc, #48]	; (8005078 <xPortStartScheduler+0xf8>)
 8005046:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800504a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800504c:	f7ff ff84 	bl	8004f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005050:	f7ff fbb4 	bl	80047bc <vTaskSwitchContext>
	prvTaskExitError();
 8005054:	f7ff ff3c 	bl	8004ed0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	e000e400 	.word	0xe000e400
 8005068:	2000a9f8 	.word	0x2000a9f8
 800506c:	2000a9fc 	.word	0x2000a9fc
 8005070:	e000ed20 	.word	0xe000ed20
 8005074:	2000000c 	.word	0x2000000c
 8005078:	e000ef34 	.word	0xe000ef34

0800507c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	b672      	cpsid	i
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	b662      	cpsie	i
 8005096:	607b      	str	r3, [r7, #4]
}
 8005098:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800509a:	4b10      	ldr	r3, [pc, #64]	; (80050dc <vPortEnterCritical+0x60>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3301      	adds	r3, #1
 80050a0:	4a0e      	ldr	r2, [pc, #56]	; (80050dc <vPortEnterCritical+0x60>)
 80050a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050a4:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <vPortEnterCritical+0x60>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d111      	bne.n	80050d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050ac:	4b0c      	ldr	r3, [pc, #48]	; (80050e0 <vPortEnterCritical+0x64>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00c      	beq.n	80050d0 <vPortEnterCritical+0x54>
	__asm volatile
 80050b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ba:	b672      	cpsid	i
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	b662      	cpsie	i
 80050ca:	603b      	str	r3, [r7, #0]
}
 80050cc:	bf00      	nop
 80050ce:	e7fe      	b.n	80050ce <vPortEnterCritical+0x52>
	}
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	2000000c 	.word	0x2000000c
 80050e0:	e000ed04 	.word	0xe000ed04

080050e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050ea:	4b13      	ldr	r3, [pc, #76]	; (8005138 <vPortExitCritical+0x54>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10c      	bne.n	800510c <vPortExitCritical+0x28>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	b672      	cpsid	i
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	b662      	cpsie	i
 8005106:	607b      	str	r3, [r7, #4]
}
 8005108:	bf00      	nop
 800510a:	e7fe      	b.n	800510a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800510c:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <vPortExitCritical+0x54>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3b01      	subs	r3, #1
 8005112:	4a09      	ldr	r2, [pc, #36]	; (8005138 <vPortExitCritical+0x54>)
 8005114:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005116:	4b08      	ldr	r3, [pc, #32]	; (8005138 <vPortExitCritical+0x54>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d105      	bne.n	800512a <vPortExitCritical+0x46>
 800511e:	2300      	movs	r3, #0
 8005120:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	f383 8811 	msr	BASEPRI, r3
}
 8005128:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	2000000c 	.word	0x2000000c
 800513c:	00000000 	.word	0x00000000

08005140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005140:	f3ef 8009 	mrs	r0, PSP
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <pxCurrentTCBConst>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	f01e 0f10 	tst.w	lr, #16
 8005150:	bf08      	it	eq
 8005152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515a:	6010      	str	r0, [r2, #0]
 800515c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005164:	b672      	cpsid	i
 8005166:	f380 8811 	msr	BASEPRI, r0
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	b662      	cpsie	i
 8005174:	f7ff fb22 	bl	80047bc <vTaskSwitchContext>
 8005178:	f04f 0000 	mov.w	r0, #0
 800517c:	f380 8811 	msr	BASEPRI, r0
 8005180:	bc09      	pop	{r0, r3}
 8005182:	6819      	ldr	r1, [r3, #0]
 8005184:	6808      	ldr	r0, [r1, #0]
 8005186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518a:	f01e 0f10 	tst.w	lr, #16
 800518e:	bf08      	it	eq
 8005190:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005194:	f380 8809 	msr	PSP, r0
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop

080051a0 <pxCurrentTCBConst>:
 80051a0:	2000a8cc 	.word	0x2000a8cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop

080051a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	b672      	cpsid	i
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	b662      	cpsie	i
 80051c2:	607b      	str	r3, [r7, #4]
}
 80051c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051c6:	f7ff fa3f 	bl	8004648 <xTaskIncrementTick>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <xPortSysTickHandler+0x44>)
 80051d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	2300      	movs	r3, #0
 80051da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	f383 8811 	msr	BASEPRI, r3
}
 80051e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051e4:	bf00      	nop
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	e000ed04 	.word	0xe000ed04

080051f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051f4:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <vPortSetupTimerInterrupt+0x34>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051fa:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <vPortSetupTimerInterrupt+0x38>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005200:	4b0a      	ldr	r3, [pc, #40]	; (800522c <vPortSetupTimerInterrupt+0x3c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a0a      	ldr	r2, [pc, #40]	; (8005230 <vPortSetupTimerInterrupt+0x40>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	099b      	lsrs	r3, r3, #6
 800520c:	4a09      	ldr	r2, [pc, #36]	; (8005234 <vPortSetupTimerInterrupt+0x44>)
 800520e:	3b01      	subs	r3, #1
 8005210:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005212:	4b04      	ldr	r3, [pc, #16]	; (8005224 <vPortSetupTimerInterrupt+0x34>)
 8005214:	2207      	movs	r2, #7
 8005216:	601a      	str	r2, [r3, #0]
}
 8005218:	bf00      	nop
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	e000e010 	.word	0xe000e010
 8005228:	e000e018 	.word	0xe000e018
 800522c:	20000000 	.word	0x20000000
 8005230:	10624dd3 	.word	0x10624dd3
 8005234:	e000e014 	.word	0xe000e014

08005238 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005238:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005248 <vPortEnableVFP+0x10>
 800523c:	6801      	ldr	r1, [r0, #0]
 800523e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005242:	6001      	str	r1, [r0, #0]
 8005244:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005246:	bf00      	nop
 8005248:	e000ed88 	.word	0xe000ed88

0800524c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005252:	f3ef 8305 	mrs	r3, IPSR
 8005256:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b0f      	cmp	r3, #15
 800525c:	d916      	bls.n	800528c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800525e:	4a19      	ldr	r2, [pc, #100]	; (80052c4 <vPortValidateInterruptPriority+0x78>)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005268:	4b17      	ldr	r3, [pc, #92]	; (80052c8 <vPortValidateInterruptPriority+0x7c>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	7afa      	ldrb	r2, [r7, #11]
 800526e:	429a      	cmp	r2, r3
 8005270:	d20c      	bcs.n	800528c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	b672      	cpsid	i
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	b662      	cpsie	i
 8005286:	607b      	str	r3, [r7, #4]
}
 8005288:	bf00      	nop
 800528a:	e7fe      	b.n	800528a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800528c:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <vPortValidateInterruptPriority+0x80>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005294:	4b0e      	ldr	r3, [pc, #56]	; (80052d0 <vPortValidateInterruptPriority+0x84>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d90c      	bls.n	80052b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	b672      	cpsid	i
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	b662      	cpsie	i
 80052b0:	603b      	str	r3, [r7, #0]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <vPortValidateInterruptPriority+0x68>
	}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	e000e3f0 	.word	0xe000e3f0
 80052c8:	2000a9f8 	.word	0x2000a9f8
 80052cc:	e000ed0c 	.word	0xe000ed0c
 80052d0:	2000a9fc 	.word	0x2000a9fc

080052d4 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d04c      	beq.n	8005380 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052e6:	2308      	movs	r3, #8
 80052e8:	425b      	negs	r3, r3
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4413      	add	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	4b23      	ldr	r3, [pc, #140]	; (8005388 <vPortFree+0xb4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4013      	ands	r3, r2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10c      	bne.n	800531c <vPortFree+0x48>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	b672      	cpsid	i
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	b662      	cpsie	i
 8005316:	60fb      	str	r3, [r7, #12]
}
 8005318:	bf00      	nop
 800531a:	e7fe      	b.n	800531a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00c      	beq.n	800533e <vPortFree+0x6a>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	b672      	cpsid	i
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	b662      	cpsie	i
 8005338:	60bb      	str	r3, [r7, #8]
}
 800533a:	bf00      	nop
 800533c:	e7fe      	b.n	800533c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	4b11      	ldr	r3, [pc, #68]	; (8005388 <vPortFree+0xb4>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4013      	ands	r3, r2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d019      	beq.n	8005380 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d115      	bne.n	8005380 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <vPortFree+0xb4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	43db      	mvns	r3, r3
 800535e:	401a      	ands	r2, r3
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005364:	f7ff f8c4 	bl	80044f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	4b07      	ldr	r3, [pc, #28]	; (800538c <vPortFree+0xb8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4413      	add	r3, r2
 8005372:	4a06      	ldr	r2, [pc, #24]	; (800538c <vPortFree+0xb8>)
 8005374:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005376:	6938      	ldr	r0, [r7, #16]
 8005378:	f000 f80a 	bl	8005390 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800537c:	f7ff f8c6 	bl	800450c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005380:	bf00      	nop
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	2000aa10 	.word	0x2000aa10
 800538c:	2000aa0c 	.word	0x2000aa0c

08005390 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005398:	4b28      	ldr	r3, [pc, #160]	; (800543c <prvInsertBlockIntoFreeList+0xac>)
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	e002      	b.n	80053a4 <prvInsertBlockIntoFreeList+0x14>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d8f7      	bhi.n	800539e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	4413      	add	r3, r2
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d108      	bne.n	80053d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	441a      	add	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	441a      	add	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d118      	bne.n	8005418 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	4b15      	ldr	r3, [pc, #84]	; (8005440 <prvInsertBlockIntoFreeList+0xb0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d00d      	beq.n	800540e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	441a      	add	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	e008      	b.n	8005420 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800540e:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <prvInsertBlockIntoFreeList+0xb0>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	e003      	b.n	8005420 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	429a      	cmp	r2, r3
 8005426:	d002      	beq.n	800542e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	2000aa00 	.word	0x2000aa00
 8005440:	2000aa08 	.word	0x2000aa08

08005444 <__libc_init_array>:
 8005444:	b570      	push	{r4, r5, r6, lr}
 8005446:	4d0d      	ldr	r5, [pc, #52]	; (800547c <__libc_init_array+0x38>)
 8005448:	4c0d      	ldr	r4, [pc, #52]	; (8005480 <__libc_init_array+0x3c>)
 800544a:	1b64      	subs	r4, r4, r5
 800544c:	10a4      	asrs	r4, r4, #2
 800544e:	2600      	movs	r6, #0
 8005450:	42a6      	cmp	r6, r4
 8005452:	d109      	bne.n	8005468 <__libc_init_array+0x24>
 8005454:	4d0b      	ldr	r5, [pc, #44]	; (8005484 <__libc_init_array+0x40>)
 8005456:	4c0c      	ldr	r4, [pc, #48]	; (8005488 <__libc_init_array+0x44>)
 8005458:	f000 f82e 	bl	80054b8 <_init>
 800545c:	1b64      	subs	r4, r4, r5
 800545e:	10a4      	asrs	r4, r4, #2
 8005460:	2600      	movs	r6, #0
 8005462:	42a6      	cmp	r6, r4
 8005464:	d105      	bne.n	8005472 <__libc_init_array+0x2e>
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	f855 3b04 	ldr.w	r3, [r5], #4
 800546c:	4798      	blx	r3
 800546e:	3601      	adds	r6, #1
 8005470:	e7ee      	b.n	8005450 <__libc_init_array+0xc>
 8005472:	f855 3b04 	ldr.w	r3, [r5], #4
 8005476:	4798      	blx	r3
 8005478:	3601      	adds	r6, #1
 800547a:	e7f2      	b.n	8005462 <__libc_init_array+0x1e>
 800547c:	08005508 	.word	0x08005508
 8005480:	08005508 	.word	0x08005508
 8005484:	08005508 	.word	0x08005508
 8005488:	0800550c 	.word	0x0800550c

0800548c <memcpy>:
 800548c:	440a      	add	r2, r1
 800548e:	4291      	cmp	r1, r2
 8005490:	f100 33ff 	add.w	r3, r0, #4294967295
 8005494:	d100      	bne.n	8005498 <memcpy+0xc>
 8005496:	4770      	bx	lr
 8005498:	b510      	push	{r4, lr}
 800549a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800549e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054a2:	4291      	cmp	r1, r2
 80054a4:	d1f9      	bne.n	800549a <memcpy+0xe>
 80054a6:	bd10      	pop	{r4, pc}

080054a8 <memset>:
 80054a8:	4402      	add	r2, r0
 80054aa:	4603      	mov	r3, r0
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d100      	bne.n	80054b2 <memset+0xa>
 80054b0:	4770      	bx	lr
 80054b2:	f803 1b01 	strb.w	r1, [r3], #1
 80054b6:	e7f9      	b.n	80054ac <memset+0x4>

080054b8 <_init>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr

080054c4 <_fini>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	bf00      	nop
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr
